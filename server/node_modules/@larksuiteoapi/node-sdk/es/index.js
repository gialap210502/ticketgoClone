/**
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import get from 'lodash.get';
import axios, { AxiosError } from 'axios';
import crypto from 'crypto';
import identity from 'lodash.identity';
import pickBy from 'lodash.pickby';
import fs from 'fs';
import pick from 'lodash.pick';
import merge from 'lodash.merge';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

const defaultHttpInstance = axios.create();
defaultHttpInstance.interceptors.request.use((req) => {
    if (req.headers) {
        req.headers['User-Agent'] = 'oapi-node-sdk/1.0.0';
    }
    return req;
}, undefined, { synchronous: true });
defaultHttpInstance.interceptors.response.use((resp) => resp.data);

var AppType;
(function (AppType) {
    AppType[AppType["SelfBuild"] = 0] = "SelfBuild";
    AppType[AppType["ISV"] = 1] = "ISV";
})(AppType || (AppType = {}));
var Domain;
(function (Domain) {
    Domain[Domain["Feishu"] = 0] = "Feishu";
    Domain[Domain["Lark"] = 1] = "Lark";
})(Domain || (Domain = {}));
var LoggerLevel;
(function (LoggerLevel) {
    LoggerLevel[LoggerLevel["fatal"] = 0] = "fatal";
    LoggerLevel[LoggerLevel["error"] = 1] = "error";
    LoggerLevel[LoggerLevel["warn"] = 2] = "warn";
    LoggerLevel[LoggerLevel["info"] = 3] = "info";
    LoggerLevel[LoggerLevel["debug"] = 4] = "debug";
    LoggerLevel[LoggerLevel["trace"] = 5] = "trace";
})(LoggerLevel || (LoggerLevel = {}));

const CEventType = Symbol('event-type');
const CTenantKey = Symbol('tenant-key');
const CAppTicket = Symbol('app-ticket');
const CTenantAccessToken = Symbol('tenant-access-token');
const CWithHelpdeskAuthorization = Symbol('with-helpdesk-authorization');
const CWithUserAccessToken = Symbol('with-user-access-token');

const string2Base64 = (content) => Buffer.from(content).toString('base64');

class DefaultCache {
    constructor() {
        this.values = new Map();
    }
    // When there is a namespace, splice the namespace and key to form a new key
    getCacheKey(key, namespace) {
        if (namespace) {
            return `${namespace}/${key.toString()}`;
        }
        return key;
    }
    get(key, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const cacheKey = this.getCacheKey(key, get(options, 'namespace'));
            const data = this.values.get(cacheKey);
            if (data) {
                const { value, expiredTime } = data;
                if (!expiredTime || expiredTime - new Date().getTime() > 0) {
                    return value;
                }
            }
            return undefined;
        });
    }
    set(key, value, expiredTime, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const cacheKey = this.getCacheKey(key, get(options, 'namespace'));
            this.values.set(cacheKey, {
                value,
                expiredTime,
            });
            return true;
        });
    }
}
const internalCache = new DefaultCache();

class AESCipher {
    constructor(key) {
        const hash = crypto.createHash('sha256');
        hash.update(key);
        this.key = hash.digest();
    }
    decrypt(encrypt) {
        const encryptBuffer = Buffer.from(encrypt, 'base64');
        const decipher = crypto.createDecipheriv('aes-256-cbc', this.key, encryptBuffer.slice(0, 16));
        let decrypted = decipher.update(encryptBuffer.slice(16).toString('hex'), 'hex', 'utf8');
        decrypted += decipher.final('utf8');
        return decrypted;
    }
}

const formatDomain = (domain) => {
    switch (domain) {
        case Domain.Feishu:
            return 'https://open.feishu.cn';
        case Domain.Lark:
            return 'https://open.larksuite.com';
        default:
            return domain;
    }
};

const fillApiPath = (apiPath, pathSupplement = {}) => apiPath.replace(/:([^/]+)/g, (_, $1) => {
    if (pathSupplement[$1] !== undefined) {
        return pathSupplement[$1];
    }
    throw new Error(`request miss ${$1} path argument`);
});

const assert = (predication, callback) => __awaiter(void 0, void 0, void 0, function* () {
    const isInvoke = typeof predication === 'function' ? predication() : predication;
    if (isInvoke) {
        yield callback();
    }
});

const formatUrl = (url) => (url ? url.replace(/^\//, '') : '');

const formatErrors = (e) => {
    if (e instanceof AxiosError) {
        const { message, response, request, config } = pick(e, [
            'message',
            'response',
            'request',
            'config',
        ]);
        const filteredErrorInfo = {
            message,
            config: pick(config, ['data', 'url', 'params', 'method']),
            request: pick(request, ['protocol', 'host', 'path', 'method']),
            response: pick(response, ['data', 'status', 'statusText']),
        };
        const errors = [filteredErrorInfo];
        const specificError = get(e, 'response.data');
        if (specificError) {
            errors.push(specificError);
        }
        return errors;
    }
    return [e];
};

// auto gen
class Client$1 {
    constructor() {
        /**
         * 智能门禁
         */
        this.acs = {
            /**
             * access_record.access_photo
             */
            accessRecordAccessPhoto: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=acs&resource=access_record.access_photo&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/access_record-access_photo/get document }
                 *
                 * 下载开门时的人脸识别图片
                 *
                 * 用户在门禁考勤机上成功开门或打卡后，智能门禁应用都会生成一条门禁记录，对于使用人脸识别方式进行开门的识别记录，还会有抓拍图。;;可以用该接口下载开门时的人脸识别照片。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/acs/v1/access_records/:access_record_id/access_photo`, path),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return {
                        writeFile: (filePath) => __awaiter(this, void 0, void 0, function* () {
                            return new Promise((resolve, reject) => {
                                const writableStream = fs.createWriteStream(filePath);
                                writableStream.on("finish", () => {
                                    resolve(filePath);
                                });
                                writableStream.on("error", (e) => {
                                    reject(e);
                                });
                                res.pipe(writableStream);
                            });
                        }),
                    };
                }),
            },
            /**
             * 门禁记录
             */
            accessRecord: {
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/acs/v1/access_records`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=acs&resource=access_record&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/access_record/list document }
                 *
                 * 获取门禁记录列表
                 *
                 * 用户在门禁考勤机上成功开门或打卡后，智能门禁应用都会生成一条门禁记录。;;该接口返回满足查询参数的识别记录。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/acs/v1/access_records`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 门禁设备
             */
            device: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=acs&resource=device&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/device/list document }
                 *
                 * 获取门禁设备列表
                 *
                 * 使用该接口获取租户内所有门禁设备。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/acs/v1/devices`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * user.face
             */
            userFace: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=acs&resource=user.face&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user-face/get document }
                 *
                 * 下载人脸图片
                 *
                 * 对于已经录入人脸图片的用户，可以使用该接口下载用户人脸图片。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/acs/v1/users/:user_id/face`, path),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return {
                        writeFile: (filePath) => __awaiter(this, void 0, void 0, function* () {
                            return new Promise((resolve, reject) => {
                                const writableStream = fs.createWriteStream(filePath);
                                writableStream.on("finish", () => {
                                    resolve(filePath);
                                });
                                writableStream.on("error", (e) => {
                                    reject(e);
                                });
                                res.pipe(writableStream);
                            });
                        }),
                    };
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=acs&resource=user.face&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user-face/update document }
                 *
                 * 上传人脸图片
                 *
                 * 用户需要录入人脸图片才可以使用门禁考勤机。使用该 API 上传门禁用户的人脸图片。
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/acs/v1/users/:user_id/face`, path),
                        method: "PUT",
                        data,
                        params,
                        headers: Object.assign(Object.assign({}, headers), { "Content-Type": "multipart/form-data" }),
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return get(res, "data", null);
                }),
            },
            /**
             * 用户管理
             */
            user: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=acs&resource=user&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user/get document }
                 *
                 * 获取单个用户信息
                 *
                 * 该接口用于获取智能门禁中单个用户的信息。
                 *
                 * 只能获取已加入智能门禁权限组的用户
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/acs/v1/users/:user_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/acs/v1/users`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=acs&resource=user&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user/list document }
                 *
                 * 获取用户列表
                 *
                 * 使用该接口获取智能门禁中所有用户信息。
                 *
                 * 只能获取已加入智能门禁权限组的用户。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/acs/v1/users`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=acs&resource=user&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user/patch document }
                 *
                 * 修改用户部分信息
                 *
                 * 飞书智能门禁在人脸识别成功后会有韦根信号输出，输出用户的卡号。;对于使用韦根协议的门禁系统，企业可使用该接口录入用户卡号。
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/acs/v1/users/:user_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
         * 管理后台-密码
         */
        this.admin = {
            /**
             * 部门维度的数据报表
             */
            adminDeptStat: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=admin&resource=admin_dept_stat&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/admin_dept_stat/list document }
                 *
                 * 获取部门维度的用户活跃和功能使用数据
                 *
                 * 该接口用于获取部门维度的用户活跃和功能使用数据，即IM（即时通讯）、日历、云文档、音视频会议功能的使用数据。
                 *
                 * - 只有企业自建应用才有权限调用此接口;;- 当天的数据会在第二天的早上九点半产出（UTC+8）
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/admin/v1/admin_dept_stats`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 用户维度的数据报表
             */
            adminUserStat: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=admin&resource=admin_user_stat&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/admin_user_stat/list document }
                 *
                 * 获取用户维度的用户活跃和功能使用数据
                 *
                 * 用于获取用户维度的用户活跃和功能使用数据，即IM（即时通讯）、日历、云文档、音视频会议功能的使用数据。
                 *
                 * - 只有企业自建应用才有权限调用此接口;;- 当天的数据会在第二天的早上九点半产出（UTC+8）
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/admin/v1/admin_user_stats`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 勋章
             */
            badge: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge/create document }
                 *
                 * 创建勋章
                 *
                 * 使用该接口可以创建一枚完整的勋章信息，一个租户下最多可创建1000枚勋章。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/admin/v1/badges`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge/get document }
                 *
                 * 获取勋章详情
                 *
                 * 可以通过该接口查询勋章的详情
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/admin/v1/badges/:badge_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/admin/v1/badges`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge/list document }
                 *
                 * 获取勋章列表
                 *
                 * 可以通过该接口列出租户下所有的勋章，勋章的排列顺序是按照创建时间倒序排列。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/admin/v1/badges`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge/update document }
                 *
                 * 修改勋章信息
                 *
                 * 通过该接口可以修改勋章的信息
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/admin/v1/badges/:badge_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 勋章授予名单
             */
            badgeGrant: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge.grant&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge-grant/create document }
                 *
                 * 创建勋章的授予名单
                 *
                 * 通过该接口可以为特定勋章创建一份授予名单，一枚勋章下最多可创建1000份授予名单。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/admin/v1/badges/:badge_id/grants`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge.grant&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge-grant/delete document }
                 *
                 * 删除授予名单
                 *
                 * 通过该接口可以删除特定授予名单的信息
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/admin/v1/badges/:badge_id/grants/:grant_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge.grant&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge-grant/get document }
                 *
                 * 获取授予名单的信息
                 *
                 * 通过该接口可以获取特定授予名单的信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/admin/v1/badges/:badge_id/grants/:grant_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/admin/v1/badges/:badge_id/grants`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge.grant&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge-grant/list document }
                 *
                 * 获取勋章的授予名单列表
                 *
                 * 通过该接口可以获取特定勋章下的授予名单列表，授予名单的排列顺序按照创建时间倒序排列。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/admin/v1/badges/:badge_id/grants`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge.grant&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge-grant/update document }
                 *
                 * 修改授予名单
                 *
                 * 通过该接口可以修改特定授予名单的相关信息
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/admin/v1/badges/:badge_id/grants/:grant_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 勋章图片
             */
            badgeImage: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge_image&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/badge_image/create document }
                 *
                 * 上传勋章图片
                 *
                 * 通过该接口可以上传勋章详情图、挂饰图的文件，获取对应的文件key
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/admin/v1/badge_images`, path),
                        method: "POST",
                        data,
                        params,
                        headers: Object.assign(Object.assign({}, headers), { "Content-Type": "multipart/form-data" }),
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return get(res, "data", null);
                }),
            },
            /**
             * 登录密码管理
             */
            password: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=admin&resource=password&apiName=reset&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/password/reset document }
                 *
                 * 重置密码
                 *
                 * 重置用户的企业邮箱密码，仅当用户的邮箱和企业邮箱(别名)一致时生效，可用于处理飞书企业邮箱登录死锁的问题。;;邮箱死锁：当用户的登录凭证与飞书企业邮箱一致时，目前飞书登录流程要求用户输入验证码，由于飞书邮箱无单独的帐号体系，则未登录时无法收取邮箱验证码，即陷入死锁
                 */
                reset: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/admin/v1/password/reset`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
         * 应用信息
         */
        this.application = {
            /**
             * 我的常用推荐规则
             */
            appRecommendRule: {
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/application/v6/app_recommend_rules`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=application&resource=app_recommend_rule&apiName=list&version=v6 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/app_recommend_rule/list document }
                 *
                 * 获取当前设置的推荐规则列表
                 *
                 * 获取当前设置的推荐规则列表。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/application/v6/app_recommend_rules`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 应用使用情况
             */
            applicationAppUsage: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=application&resource=application.app_usage&apiName=overview&version=v6 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-app_usage/overview document }
                 *
                 * 获取应用使用概览
                 *
                 * 查看应用在某一天/某一周/某一个月的使用数据，可以查看租户整体对应用的使用情况，也可以分部门查看。
                 *
                 * 1. 仅支持企业版/旗舰版租户使用;2. 一般每天早上10点产出前一天的数据;3. 已经支持的指标包括：应用的活跃用户数、累计用户数、新增用户数、访问页面数、打开次数;4. 数据从飞书4.10版本开始统计，使用飞书版本4.10及以下版本的用户数据不会被统计到;5. 按照部门查看数据时，会展示当前部门以及其子部门的整体使用情况;6. 调用频控为100次/分
                 */
                overview: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/application/v6/applications/:app_id/app_usage/overview`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 事件
             */
            applicationAppVersion: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=application&resource=application.app_version&apiName=contacts_range_suggest&version=v6 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=contacts_range_suggest&project=application&resource=application.app_version&version=v6 document }
                 *
                 * 获取应用版本通讯录权限范围建议
                 */
                contactsRangeSuggest: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/application/v6/applications/:app_id/app_versions/:version_id/contacts_range_suggest`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=application&resource=application.app_version&apiName=get&version=v6 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-app_version/get document }
                 *
                 * 获取应用版本信息
                 *
                 * 根据应用 ID 和应用版本 ID 来获取同租户下的应用版本的信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/application/v6/applications/:app_id/app_versions/:version_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/application/v6/applications/:app_id/app_versions`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=application&resource=application.app_version&apiName=list&version=v6 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-app_version/list document }
                 *
                 * 获取应用版本列表
                 *
                 * 根据 app_id 获取对应应用版本列表。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/application/v6/applications/:app_id/app_versions`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=application&resource=application.app_version&apiName=patch&version=v6 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-app_version/patch document }
                 *
                 * 更新应用审核状态
                 *
                 * 通过接口来更新应用版本的审核结果：通过后应用可以直接上架；拒绝后则开发者可以看到拒绝理由，并在修改后再次申请发布。
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/application/v6/applications/:app_id/app_versions/:version_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 应用
             */
            application: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=application&resource=application&apiName=contacts_range_configuration&version=v6 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=contacts_range_configuration&project=application&resource=application&version=v6 document }
                 */
                contactsRangeConfiguration: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/application/v6/applications/:app_id/contacts_range_configuration`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=application&resource=application&apiName=get&version=v6 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application/get document }
                 *
                 * 获取应用信息
                 *
                 * 根据app_id获取应用的基础信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/application/v6/applications/:app_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=application&resource=application&apiName=patch&version=v6 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application/patch document }
                 *
                 * 更新应用分组信息
                 *
                 * 更新应用的分组信息（分组会影响应用在工作台中的分类情况，请谨慎更新）
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/application/v6/applications/:app_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                underauditlistWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/application/v6/applications/underauditlist`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=application&resource=application&apiName=underauditlist&version=v6 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application/underauditlist document }
                 *
                 * 查看待审核的应用列表
                 *
                 * 查看本企业下所有待审核的自建应用列表
                 */
                underauditlist: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/application/v6/applications/underauditlist`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 应用反馈
             */
            applicationFeedback: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=application&resource=application.feedback&apiName=list&version=v6 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-feedback/list document }
                 *
                 * 获取应用反馈列表
                 *
                 * 查询应用的反馈数据
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/application/v6/applications/:app_id/feedbacks`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=application&resource=application.feedback&apiName=patch&version=v6 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-feedback/patch document }
                 *
                 * 更新应用反馈
                 *
                 * 更新应用的反馈数据
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/application/v6/applications/:app_id/feedbacks/:feedback_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 事件
             */
            applicationVisibility: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=application&resource=application.visibility&apiName=check_white_black_list&version=v6 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=check_white_black_list&project=application&resource=application.visibility&version=v6 document }
                 */
                checkWhiteBlackList: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/application/v6/applications/:app_id/visibility/check_white_black_list`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
         * 审批
         */
        this.approval = {
            /**
             * 原生审批定义
             */
            approval: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=approval&apiName=create&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/create document }
                 *
                 * 创建审批定义
                 *
                 * 用于通过接口创建简单的审批定义，可以灵活指定定义的基础信息、表单和流程等。创建成功后，不支持从审批管理后台删除该定义。不推荐企业自建应用使用，如有需要尽量联系管理员在审批管理后台创建定义。
                 *
                 * 接口谨慎调用，创建后的审批定义无法停用/删除
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/approvals`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=approval&apiName=get&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/get document }
                 *
                 * 查看审批定义
                 *
                 * 根据 Approval Code 获取某个审批定义的详情，用于构造创建审批实例的请求。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/approvals/:approval_code`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=approval&apiName=subscribe&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/subscribe document }
                 *
                 * 订阅审批事件
                 *
                 * 应用订阅 approval_code 后，该应用就可以收到该审批定义对应实例的事件通知。同一应用只需要订阅一次，无需重复订阅。;;当应用不希望再收到审批事件时，可以使用取消订阅接口进行取消，取消后将不再给应用推送消息。;;订阅和取消订阅都是应用维度的，多个应用可以同时订阅同一个 approval_code，每个应用都能收到审批事件。
                 */
                subscribe: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/approvals/:approval_code/subscribe`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=approval&apiName=unsubscribe&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/unsubscribe document }
                 *
                 * 取消订阅审批事件
                 *
                 * 取消订阅 approval_code 后，无法再收到该审批定义对应实例的事件通知
                 */
                unsubscribe: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/approvals/:approval_code/unsubscribe`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 三方审批定义
             */
            externalApproval: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=external_approval&apiName=create&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_approval/create document }
                 *
                 * 三方审批定义创建
                 *
                 * 审批定义是审批的描述，包括审批名称、图标、描述等基础信息。创建好审批定义，用户就可以在审批应用的发起页中看到审批，如果用户点击发起，则会跳转到配置的发起三方系统地址去发起审批。;;另外，审批定义还配置了审批操作时的回调地址：审批人在待审批列表中进行【同意】【拒绝】操作时，审批中心会调用回调地址通知三方系统。
                 *
                 * 注意，审批中心不负责审批流程的流转，只负责展示、操作、消息通知。因此审批定义创建时没有审批流程的信息。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/external_approvals`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 三方审批实例
             */
            externalInstance: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=external_instance&apiName=check&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_instance/check document }
                 *
                 * 三方审批实例校验
                 *
                 * 校验三方审批实例数据，用于判断服务端数据是否为最新的。用户提交实例最新更新时间，如果服务端不存在该实例，或者服务端实例更新时间不是最新的，则返回对应实例 id。;;例如，用户可以每隔5分钟，将最近5分钟产生的实例使用该接口进行对比。
                 */
                check: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/external_instances/check`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=external_instance&apiName=create&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_instance/create document }
                 *
                 * 三方审批实例同步
                 *
                 * 审批中心不负责审批的流转，审批的流转在三方系统，三方系统在审批流转后生成的审批实例、审批任务、审批抄送数据同步到审批中心。;;用户可以在审批中心中浏览三方系统同步过来的实例、任务、抄送信息，并且可以跳转回三方系统进行更详细的查看和操作，其中实例信息在【已发起】列表，任务信息在【待审批】和【已审批】列表，抄送信息在【抄送我】列表;;:::html;<img src="//sf3-cn.feishucdn.com/obj/open-platform-opendoc/9dff4434afbeb0ef69de7f36b9a6e995_z5iwmTzEgg.png" alt="" style="zoom:17%;" />;;;<img src="//sf3-cn.feishucdn.com/obj/open-platform-opendoc/ca6e0e984a7a6d64e1b16a0bac4bf868_tfqjCiaJQM.png" alt="" style="zoom:17%;" />;;;<img src="//sf3-cn.feishucdn.com/obj/open-platform-opendoc/529377e238df78d391bbd22e962ad195_T7eefLI1GA.png" alt="" style="zoom:17%;" />;:::;;对于审批任务，三方系统也可以配置审批任务的回调接口，这样审批人可以在审批中心中直接进行审批操作，审批中心会回调三方系统，三方系统收到回调后更新任务信息，并将新的任务信息同步回审批中心，形成闭环。;;:::html;<img src="//sf3-cn.feishucdn.com/obj/open-platform-opendoc/721c35428bc1187db3318c572f9979ad_je75QpElcg.png" alt=""  style="zoom:25%;" />;:::;<br>
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/external_instances`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 三方审批任务
             */
            externalTask: {
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/approval/v4/external_tasks`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=external_task&apiName=list&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_task/list document }
                 *
                 * 获取三方审批任务状态
                 *
                 * 该接口用于获取三方审批的状态。用户传入查询条件，接口返回满足条件的审批实例的状态。该接口支持多种参数的组合，包括如下组合：;;1.通过 instance_ids 获取指定实例的任务状态;;2.通过 user_ids 获取指定用户的任务状态;;3.通过 status 获取指定状态的所有任务;;4.通过page_token获取下一批数据
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/external_tasks`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 原生审批实例
             */
            instance: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=add_sign&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/ukTM5UjL5ETO14SOxkTN/approval-task-addsign document }
                 */
                addSign: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/instances/add_sign`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=cancel&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/cancel document }
                 *
                 * 审批实例撤回
                 *
                 * 对于状态为“审批中”的单个审批实例进行撤销操作，撤销后审批流程结束
                 */
                cancel: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/instances/cancel`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=cc&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/cc document }
                 *
                 * 审批实例抄送
                 *
                 * 通过接口可以将当前审批实例抄送给其他人。
                 */
                cc: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/instances/cc`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=create&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/create document }
                 *
                 * 创建审批实例
                 *
                 * 创建一个审批实例，调用方需对审批定义的表单有详细了解，将按照定义的表单结构，将表单 Value 通过接口传入
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/instances`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=get&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/get document }
                 *
                 * 获取单个审批实例详情
                 *
                 * 通过审批实例 Instance Code  获取审批实例详情。Instance Code 由 [批量获取审批实例](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/list) 接口获取。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/instances/:instance_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/approval/v4/instances`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=list&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/list document }
                 *
                 * 批量获取审批实例ID
                 *
                 * 根据 approval_code 批量获取审批实例的 instance_code，用于拉取租户下某个审批定义的全部审批实例。默认以审批创建时间先后顺序排列
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/instances`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=preview&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/ukTM5UjL5ETO14SOxkTN/approval-preview document }
                 */
                preview: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/instances/preview`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                queryWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/approval/v4/instances/query`, path),
                            method: "POST",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=query&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/query document }
                 *
                 * 查询实例列表
                 *
                 * 该接口通过不同条件查询审批系统中符合条件的审批实例列表。
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/instances/query`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=search_cc&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/search_cc document }
                 *
                 * 查询抄送列表
                 *
                 * 该接口通过不同条件查询审批系统中符合条件的审批抄送列表。
                 */
                searchCc: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/instances/search_cc`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=specified_rollback&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/specified_rollback document }
                 *
                 * 审批任务退回
                 *
                 * 从当前审批任务，退回到已审批的一个或多个任务节点。退回后，已审批节点重新生成审批任务
                 */
                specifiedRollback: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/instances/specified_rollback`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 原生审批评论
             */
            instanceComment: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance.comment&apiName=create&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance-comment/create document }
                 *
                 * 创建评论
                 *
                 * 在某审批实例下创建、修改评论或评论回复（不包含审批同意、拒绝、转交等附加的理由或意见）。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/instances/:instance_id/comments`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance.comment&apiName=delete&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance-comment/delete document }
                 *
                 * 删除评论
                 *
                 * 逻辑删除某审批实例下的一条评论或评论回复（不包含审批同意、拒绝、转交等附加的理由或意见）。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/instances/:instance_id/comments/:comment_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/approval/v4/instances/:instance_id/comments`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance.comment&apiName=list&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance-comment/list document }
                 *
                 * 获取评论
                 *
                 * 根据 Instance Code 获取某个审批实例下的全部评论与评论回复（不包含审批同意、拒绝、转交等附加的理由或意见）。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/instances/:instance_id/comments`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance.comment&apiName=remove&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance-comment/remove document }
                 *
                 * 清空评论
                 *
                 * 删除某审批实例下的全部评论与评论回复。
                 */
                remove: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/instances/:instance_id/comments/remove`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 审批查询
             */
            task: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=task&apiName=approve&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/approve document }
                 *
                 * 审批任务同意
                 *
                 * 对于单个审批任务进行同意操作。同意后审批流程会流转到下一个审批人。
                 */
                approve: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/tasks/approve`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                queryWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/approval/v4/tasks/query`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=task&apiName=query&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/query document }
                 *
                 * 用户角度列出任务
                 *
                 * 根据用户和任务分组查询任务列表
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/tasks/query`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=task&apiName=reject&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/reject document }
                 *
                 * 审批任务拒绝
                 *
                 * 对于单个审批任务进行拒绝操作。拒绝后审批流程结束。
                 */
                reject: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/tasks/reject`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=task&apiName=resubmit&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/resubmit document }
                 *
                 * 审批任务重新提交
                 *
                 * 对于单个退回到发起人的审批任务进行重新发起操作。发起后审批流程会流转到下一个审批人。
                 */
                resubmit: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/tasks/resubmit`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=task&apiName=search&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/search document }
                 *
                 * 查询任务列表
                 *
                 * 该接口通过不同条件查询审批系统中符合条件的审批任务列表
                 */
                search: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/tasks/search`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=approval&resource=task&apiName=transfer&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/transfer document }
                 *
                 * 审批任务转交
                 *
                 * 对于单个审批任务进行转交操作。转交后审批流程流转给被转交人。
                 */
                transfer: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/approval/v4/tasks/transfer`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
         * 打卡
         */
        this.attendance = {
            /**
             * approval_info
             */
            approvalInfo: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=approval_info&apiName=process&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/approval_info/process document }
                 *
                 * 通知审批状态更新
                 *
                 * 对于只使用飞书考勤系统而未使用飞书审批系统的企业，可以通过该接口更新写入飞书考勤系统中的三方系统审批状态，例如请假、加班、外出、出差、补卡等审批，状态包括通过、不通过、撤销等。
                 *
                 * 发起状态的审批才可以被更新为通过、不通过，已经通过的审批才可以被更新为撤销。
                 */
                process: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/approval_infos/process`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 文件
             */
            file: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=file&apiName=download&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/file/download document }
                 *
                 * 下载文件
                 *
                 * 通过文件 ID 下载指定的文件。
                 */
                download: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/files/:file_id/download`, path),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return {
                        writeFile: (filePath) => __awaiter(this, void 0, void 0, function* () {
                            return new Promise((resolve, reject) => {
                                const writableStream = fs.createWriteStream(filePath);
                                writableStream.on("finish", () => {
                                    resolve(filePath);
                                });
                                writableStream.on("error", (e) => {
                                    reject(e);
                                });
                                res.pipe(writableStream);
                            });
                        }),
                    };
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=file&apiName=upload&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/file/upload document }
                 *
                 * 上传文件
                 *
                 * 上传文件并获取文件 ID，可用于“修改用户设置”接口中的 face_key 参数。
                 */
                upload: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/files/upload`, path),
                        method: "POST",
                        data,
                        params,
                        headers: Object.assign(Object.assign({}, headers), { "Content-Type": "multipart/form-data" }),
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return get(res, "data", null);
                }),
            },
            /**
             * 考勤组管理
             */
            group: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=group&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/create document }
                 *
                 * 创建或修改考勤组
                 *
                 * 考勤组，是对部门或者员工在某个特定场所及特定时间段内的出勤情况（包括上下班、迟到、早退、病假、婚假、丧假、公休、工作时间、加班情况等）的一种规则设定。;;通过设置考勤组，可以从部门、员工两个维度，来设定考勤方式、考勤时间、考勤地点等考勤规则。
                 *
                 * 出于安全考虑，目前通过该接口只允许修改自己创建的考勤组。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/groups`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=group&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/delete document }
                 *
                 * 删除考勤组
                 *
                 * 通过班次 ID 删除班次。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/groups/:group_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=group&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/get document }
                 *
                 * 获取考勤组详情
                 *
                 * 通过考勤组 ID 获取考勤组详情。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/groups/:group_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/attendance/v1/groups`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=group&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/list document }
                 *
                 * 获取考勤组列表
                 *
                 * 翻页获取所有考勤组列表。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/groups`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=group&apiName=search&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/search document }
                 *
                 * 按名称查询考勤组
                 *
                 * 按考勤组名称查询考勤组摘要信息。查询条件支持名称精确匹配和模糊匹配两种方式。查询结果按考勤组修改时间 desc 排序，且最大记录数为 10 条。
                 *
                 * 该接口依赖的数据和考勤组主数据间存在数据同步延时（正常数据同步 2 秒以内），因此在使用该接口时需注意评估数据延迟潜在风险。
                 */
                search: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/groups/search`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * leave_accrual_record
             */
            leaveAccrualRecord: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=leave_accrual_record&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=attendance&resource=leave_accrual_record&version=v1 document }
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/leave_accrual_record/:leave_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * leave_employ_expire_record
             */
            leaveEmployExpireRecord: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=leave_employ_expire_record&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=attendance&resource=leave_employ_expire_record&version=v1 document }
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/leave_employ_expire_records/:leave_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 考勤班次
             */
            shift: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=shift&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/create document }
                 *
                 * 创建班次
                 *
                 * 班次是描述一次考勤任务时间规则的统称，比如一天打多少次卡，每次卡的上下班时间，晚到多长时间算迟到，晚到多长时间算缺卡等。
                 *
                 * - 创建一个考勤组前，必须先创建一个或者多个班次。;- 一个公司内的班次是共享的，你可以直接引用他人创建的班次，但是需要注意的是，若他人修改了班次，会影响到你的考勤组及其考勤结果。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/shifts`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=shift&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/delete document }
                 *
                 * 删除班次
                 *
                 * 通过班次 ID 删除班次。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/shifts/:shift_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=shift&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/get document }
                 *
                 * 获取班次详情
                 *
                 * 通过班次 ID 获取班次详情。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/shifts/:shift_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/attendance/v1/shifts`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=shift&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/list document }
                 *
                 * 获取班次列表
                 *
                 * 翻页获取所有班次列表。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/shifts`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=shift&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/query document }
                 *
                 * 按名称查询班次
                 *
                 * 通过班次的名称查询班次信息。
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/shifts/query`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 假勤审批
             */
            userApproval: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_approval&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_approval/create document }
                 *
                 * 写入审批结果
                 *
                 * 由于部分企业使用的是自己的审批系统，而不是飞书审批系统，因此员工的请假、加班等数据无法流入到飞书考勤系统中，导致员工在请假时间段内依然收到打卡提醒，并且被记为缺卡。;;对于这些只使用飞书考勤系统，而未使用飞书审批系统的企业，可以通过考勤开放接口的形式，将三方审批结果数据回写到飞书考勤系统中。
                 *
                 * 目前支持写入加班、请假、出差和外出这四种审批结果，写入只会追加(insert)，不会覆盖(update)（开放接口导入的加班假期记录，在管理后台的假期加班里查不到，只能通过[获取审批通过数据](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_approval/query)来查询）
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/user_approvals`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_approval&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_approval/query document }
                 *
                 * 获取审批通过数据
                 *
                 * 获取员工在某段时间内的请假、加班、外出和出差四种审批的通过数据。
                 *
                 * 请假的假期时长字段，暂未开放提供，待后续提供。
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/user_approvals/query`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 考勤排班
             */
            userDailyShift: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_daily_shift&apiName=batch_create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_daily_shift/batch_create document }
                 *
                 * 创建或修改班表
                 *
                 * 班表是用来描述考勤组内人员每天按哪个班次进行上班。目前班表支持按一个整月对一位或多位人员进行排班。
                 */
                batchCreate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/user_daily_shifts/batch_create`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_daily_shift&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_daily_shift/query document }
                 *
                 * 查询班表信息
                 *
                 * 支持查询多个用户的排班情况，查询的时间跨度不能超过 30 天。
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/user_daily_shifts/query`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * user_flow
             */
            userFlow: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_flow&apiName=batch_create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/batch_create document }
                 *
                 * 导入打卡流水记录
                 *
                 * 导入授权内员工的打卡流水记录。导入后，会根据员工所在的考勤组班次规则，计算最终的打卡状态与结果。
                 *
                 * 适用于考勤机数据导入等场景。
                 */
                batchCreate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/user_flows/batch_create`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_flow&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/get document }
                 *
                 * 获取打卡流水记录
                 *
                 * 通过打卡记录 ID 获取用户的打卡流水记录。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/user_flows/:user_flow_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_flow&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/query document }
                 *
                 * 批量查询打卡流水记录
                 *
                 * 批量查询授权内员工的实际打卡流水记录。例如，企业给一个员工设定的班次是上午 9 点和下午 6 点各打一次上下班卡，但是该员工在这期间打了多次卡，该接口会把所有的打卡记录都返回。
                 *
                 * 如果只需获取打卡结果，而不需要详细的打卡数据，可使用“获取打卡结果”的接口。
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/user_flows/query`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 用户设置
             */
            userSetting: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_setting&apiName=modify&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_setting/modify document }
                 *
                 * 修改用户设置
                 *
                 * 修改授权内员工的用户设置信息，包括人脸照片文件 ID。
                 */
                modify: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/user_settings/modify`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_setting&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_setting/query document }
                 *
                 * 批量查询用户设置
                 *
                 * 批量查询授权内员工的用户设置信息，包括人脸照片文件 ID、人脸照片更新时间。
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/user_settings/query`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 考勤统计
             */
            userStatsData: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_stats_data&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_data/query document }
                 *
                 * 查询统计数据
                 *
                 * 查询日度统计或月度统计的统计数据。
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/user_stats_datas/query`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * user_stats_field
             */
            userStatsField: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_stats_field&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_field/query document }
                 *
                 * 查询统计表头
                 *
                 * 查询考勤统计支持的日度统计或月度统计的统计表头。
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/user_stats_fields/query`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * user_stats_view
             */
            userStatsView: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_stats_view&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_view/query document }
                 *
                 * 查询统计设置
                 *
                 * 查询开发者定制的日度统计或月度统计的统计报表表头设置信息。
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/user_stats_views/query`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_stats_view&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_view/update document }
                 *
                 * 更新统计设置
                 *
                 * 更新开发者定制的日度统计或月度统计的统计报表表头设置信息。
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/user_stats_views/:user_stats_view_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 考勤记录
             */
            userTask: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_task&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query document }
                 *
                 * 获取打卡结果
                 *
                 * 获取企业内员工的实际打卡结果，包括上班打卡结果和下班打卡结果。
                 *
                 * - 如果企业给一个员工设定的班次是上午 9 点和下午 6 点各打一次上下班卡，即使员工在这期间打了多次卡，该接口也只会返回 1 条记录。;- 如果要获取打卡的详细数据，如打卡位置等信息，可使用“获取打卡流水记录”或“批量查询打卡流水记录”的接口。
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/user_tasks/query`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 考勤补卡
             */
            userTaskRemedy: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_task_remedy&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task_remedy/create document }
                 *
                 * 通知补卡审批发起
                 *
                 * 对于只使用飞书考勤系统而未使用飞书审批系统的企业，可以通过该接口，将在三方审批系统中发起的补卡审批数据，写入到飞书考勤系统中，状态为审批中。写入后可以由[通知审批状态更新](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/approval_info/process) 进行状态更新
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/user_task_remedys`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_task_remedy&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task_remedy/query document }
                 *
                 * 获取补卡记录
                 *
                 * 获取授权内员工的补卡记录。
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/user_task_remedys/query`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_task_remedy&apiName=query_user_allowed_remedys&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task_remedy/query_user_allowed_remedys document }
                 *
                 * 获取用户可补卡时间
                 *
                 * 获取用户某天可以补的第几次上 / 下班卡的时间。
                 */
                queryUserAllowedRemedys: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/attendance/v1/user_task_remedys/query_user_allowed_remedys`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
             
             */
        this.auth = {
            /**
             * app_access_token
             */
            appAccessToken: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=auth&resource=app_access_token&apiName=create&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=auth&resource=app_access_token&version=v3 document }
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/auth/v3/app_access_token`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=auth&resource=app_access_token&apiName=internal&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=internal&project=auth&resource=app_access_token&version=v3 document }
                 */
                internal: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/auth/v3/app_access_token/internal`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * app_ticket
             */
            appTicket: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=auth&resource=app_ticket&apiName=resend&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=resend&project=auth&resource=app_ticket&version=v3 document }
                 */
                resend: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/auth/v3/app_ticket/resend`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * tenant_access_token
             */
            tenantAccessToken: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=auth&resource=tenant_access_token&apiName=create&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=auth&resource=tenant_access_token&version=v3 document }
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/auth/v3/tenant_access_token`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=auth&resource=tenant_access_token&apiName=internal&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=internal&project=auth&resource=tenant_access_token&version=v3 document }
                 */
                internal: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/auth/v3/tenant_access_token/internal`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
             
             */
        this.authen = {
            /**
             * access_token
             */
            accessToken: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=authen&resource=access_token&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=authen&resource=access_token&version=v1 document }
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/authen/v1/access_token`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * refresh_access_token
             */
            refreshAccessToken: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=authen&resource=refresh_access_token&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=authen&resource=refresh_access_token&version=v1 document }
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/authen/v1/refresh_access_token`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * user_info
             */
            userInfo: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=authen&resource=user_info&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=authen&resource=user_info&version=v1 document }
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/authen/v1/user_info`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
             
             */
        this.aweme_ecosystem = {};
        /**
         * 企业百科
         */
        this.baike = {
            /**
             * 分类
             */
            classification: {
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/baike/v1/classifications`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=baike&resource=classification&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/classification/list document }
                 *
                 * 获取百科分类
                 *
                 * 获取企业百科当前分类。;企业百科目前为二级分类体系，每个词条可添加多个二级分类，但每个一级分类下只能添加一个分类。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/baike/v1/classifications`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 草稿
             */
            draft: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=baike&resource=draft&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/draft/create document }
                 *
                 * 创建草稿
                 *
                 * 草稿并非百科词条，而是指通过 API 发起创建新词条或更新现有词条的申请。百科管理员审核通过后，草稿将变为新的词条或覆盖已有词条。
                 *
                 * · 创建新的百科词条时，无需传入 entity_id 字段;· 更新已有百科词条时，请传入对应词条的 entity_id 或 outer_info
                 *
                 * 以用户身份创建草稿（即 Authorization 使用 user_access_token），对应用户将收到由企业百科 Bot 发送的审核结果；以应用身份创建草稿（即 Authorization 使用 tenant_access_toke），不会收到任何通知。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/baike/v1/drafts`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=baike&resource=draft&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/draft/update document }
                 *
                 * 更新草稿
                 *
                 * 根据 draft_id 更新草稿内容，已审批的草稿无法编辑
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/baike/v1/drafts/:draft_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 词条
             */
            entity: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/create document }
                 *
                 * 创建免审词条
                 *
                 * 通过此接口创建的词条，不需要百科管理员审核可直接写入词库，请慎重使用【租户管理员请慎重审批】。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/baike/v1/entities`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=extract&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/extract document }
                 *
                 * 提取潜在的百科词条
                 *
                 * 提取文本中可能成为百科词条的词语，且不会过滤已经成为百科词条的词语。同时，会返回推荐的别名。
                 */
                extract: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/baike/v1/entities/extract`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/get document }
                 *
                 * 获取词条详情
                 *
                 * 通过词条 id 拉取对应的词条详情信息。
                 *
                 * 也支持通过 provider 和 outer_id 返回对应实体的详情数据。此时路径中的 entity_id 为固定的 enterprise_0
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/baike/v1/entities/:entity_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=highlight&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/highlight document }
                 *
                 * 词条高亮
                 *
                 * 传入一句话，智能识别句中对应的词条，并返回词条位置和 entity_id，可在外部系统中快速实现百科词条智能高亮。
                 */
                highlight: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/baike/v1/entities/highlight`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/baike/v1/entities`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/list document }
                 *
                 * 获取词条列表
                 *
                 * 分页拉取词条列表数据，支持拉取租户内的全部词条。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/baike/v1/entities`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=match&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/match document }
                 *
                 * 精准搜索词条
                 *
                 * 将关键词与词条名、别名精准匹配，并返回对应的 词条 ID。
                 */
                match: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/baike/v1/entities/match`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                searchWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/baike/v1/entities/search`, path),
                            method: "POST",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=search&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/search document }
                 *
                 * 模糊搜索词条
                 *
                 * 传入关键词，与词条名、别名、释义等信息进行模糊匹配，返回搜到的词条信息。
                 */
                search: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/baike/v1/entities/search`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/update document }
                 *
                 * 更新免审词条
                 *
                 * 通过此接口更新已有的词条，不需要百科管理员审核可直接写入词库，请慎重使用【租户管理员请慎重审批】。
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/baike/v1/entities/:entity_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 文件
             */
            file: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=baike&resource=file&apiName=download&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/file/download document }
                 *
                 * 图片下载
                 *
                 * 通过 file_token 下载原图片
                 */
                download: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/baike/v1/files/:file_token/download`, path),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return {
                        writeFile: (filePath) => __awaiter(this, void 0, void 0, function* () {
                            return new Promise((resolve, reject) => {
                                const writableStream = fs.createWriteStream(filePath);
                                writableStream.on("finish", () => {
                                    resolve(filePath);
                                });
                                writableStream.on("error", (e) => {
                                    reject(e);
                                });
                                res.pipe(writableStream);
                            });
                        }),
                    };
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=baike&resource=file&apiName=upload&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/file/upload document }
                 *
                 * 图片上传
                 *
                 * 百科词条图片资源上传。
                 */
                upload: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/baike/v1/files/upload`, path),
                        method: "POST",
                        data,
                        params,
                        headers: Object.assign(Object.assign({}, headers), { "Content-Type": "multipart/form-data" }),
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return get(res, "data", null);
                }),
            },
        };
        /**
         * 云文档-多维表格
         */
        this.bitable = {
            /**
             * 多维表格
             */
            app: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app&apiName=copy&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=copy&project=bitable&resource=app&version=v1 document }
                 */
                copy: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/copy`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=bitable&resource=app&version=v1 document }
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/get document }
                 *
                 * 获取多维表格元数据
                 *
                 * 获取指定多维表格的元数据信息，包括多维表格名称，多维表格版本号，多维表格是否开启高级权限等。
                 *
                 * 该接口支持调用频率上限为 20 QPS（Query Per Second，每秒请求率）
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/update document }
                 *
                 * 更新多维表格元数据
                 *
                 * 通过 app_token 更新多维表格元数据
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 *
                 * - 飞书文档、飞书表格、知识库中的多维表格不支持开启高级权限;- 此接口非原子操作，先修改多维表格名字，后开关高级权限。可能存在部分成功的情况
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 仪表盘
             */
            appDashboard: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.dashboard&apiName=copy&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-dashboard/copy document }
                 *
                 * 复制仪表盘
                 *
                 * 该接口用于根据现有仪表盘复制出新的仪表盘
                 */
                copy: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/dashboards/:block_id/copy`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/dashboards`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.dashboard&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-dashboard/list document }
                 *
                 * 列出仪表盘
                 *
                 * 根据 app_token，获取多维表格下的所有仪表盘
                 *
                 * 该接口支持调用频率上限为 20 QPS
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/dashboards`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 自定义角色
             */
            appRole: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/create document }
                 *
                 * 新增自定义角色
                 *
                 * 新增自定义角色
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/delete document }
                 *
                 * 删除自定义角色
                 *
                 * 删除自定义角色
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/list document }
                 *
                 * 列出自定义角色
                 *
                 * 列出自定义角色
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/update document }
                 *
                 * 更新自定义角色
                 *
                 * 更新自定义角色
                 *
                 * 更新自定义角色是全量更新，会完全覆盖旧的自定义角色设置
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 协作者
             */
            appRoleMember: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role.member&apiName=batch_create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role-member/batch_create document }
                 *
                 * 批量新增协作者
                 *
                 * 批量新增自定义角色的协作者
                 */
                batchCreate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members/batch_create`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role.member&apiName=batch_delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role-member/batch_delete document }
                 *
                 * 批量删除协作者
                 *
                 * 批量删除自定义角色的协作者
                 */
                batchDelete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members/batch_delete`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role.member&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role-member/create document }
                 *
                 * 新增协作者
                 *
                 * 新增自定义角色的协作者
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role.member&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role-member/delete document }
                 *
                 * 删除协作者
                 *
                 * 删除自定义角色的协作者
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members/:member_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role.member&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role-member/list document }
                 *
                 * 列出协作者
                 *
                 * 列出自定义角色的协作者
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 数据表
             */
            appTable: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table&apiName=batch_create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/batch_create document }
                 *
                 * 新增多个数据表
                 *
                 * 新增多个数据表
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                batchCreate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/batch_create`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table&apiName=batch_delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/batch_delete document }
                 *
                 * 删除多个数据表
                 *
                 * 删除多个数据表
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                batchDelete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/batch_delete`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/create document }
                 *
                 * 新增数据表
                 *
                 * 新增一个数据表
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/delete document }
                 *
                 * 删除数据表
                 *
                 * 删除一个数据表
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list document }
                 *
                 * 列出数据表
                 *
                 * 根据  app_token，获取多维表格下的所有数据表
                 *
                 * 该接口支持调用频率上限为 20 QPS
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/patch document }
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 字段
             */
            appTableField: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.field&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/create document }
                 *
                 * 新增字段
                 *
                 * 该接口用于在数据表中新增一个字段
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.field&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/delete document }
                 *
                 * 删除字段
                 *
                 * 该接口用于在数据表中删除一个字段
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields/:field_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.field&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/list document }
                 *
                 * 列出字段
                 *
                 * 根据 app_token 和 table_id，获取数据表的所有字段
                 *
                 * 该接口支持调用频率上限为 20 QPS
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.field&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/update document }
                 *
                 * 更新字段
                 *
                 * 该接口用于在数据表中更新一个字段
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields/:field_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 表单
             */
            appTableFormField: {
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id/fields`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.form.field&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-form-field/list document }
                 *
                 * 列出表单问题
                 *
                 * 列出表单的所有问题项
                 *
                 * 该接口支持调用频率上限为 20 QPS
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id/fields`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.form.field&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-form-field/patch document }
                 *
                 * 更新表单问题
                 *
                 * 该接口用于更新表单中的问题项
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id/fields/:field_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 表单
             */
            appTableForm: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.form&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-form/get document }
                 *
                 * 获取表单元数据
                 *
                 * 获取表单的所有元数据项
                 *
                 * 该接口支持调用频率上限为 20 QPS
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.form&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-form/patch document }
                 *
                 * 更新表单元数据
                 *
                 * 该接口用于更新表单中的元数据项
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 记录
             */
            appTableRecord: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=batch_create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/batch_create document }
                 *
                 * 新增多条记录
                 *
                 * 该接口用于在数据表中新增多条记录，单次调用最多新增 500 条记录。
                 *
                 * 该接口支持调用频率上限为 10 QPS（Query Per Second，每秒请求率）
                 */
                batchCreate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_create`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=batch_delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/batch_delete document }
                 *
                 * 删除多条记录
                 *
                 * 该接口用于删除数据表中现有的多条记录，单次调用中最多删除 500 条记录。
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                batchDelete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_delete`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=batch_update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/batch_update document }
                 *
                 * 更新多条记录
                 *
                 * 该接口用于更新数据表中的多条记录，单次调用最多更新 500 条记录。
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                batchUpdate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_update`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/create document }
                 *
                 * 新增记录
                 *
                 * 该接口用于在数据表中新增一条记录
                 *
                 * 该接口支持调用频率上限为 10 QPS（Query Per Second，每秒请求率）
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/delete document }
                 *
                 * 删除记录
                 *
                 * 该接口用于删除数据表中的一条记录
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/get document }
                 *
                 * 检索记录
                 *
                 * 该接口用于根据 record_id 的值检索现有记录
                 *
                 * 该接口支持调用频率上限为 20 QPS
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/list document }
                 *
                 * 列出记录
                 *
                 * 该接口用于列出数据表中的现有记录，单次最多列出 500 行记录，支持分页获取。
                 *
                 * 该接口支持调用频率上限为 10 QPS（Query Per Second，每秒请求率），1000 QPM（Query Per Minute，每分钟请求率）
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/update document }
                 *
                 * 更新记录
                 *
                 * 该接口用于更新数据表中的一条记录
                 *
                 * 该接口支持调用频率上限为 10 QPS（Query Per Second，每秒请求率）
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 视图
             */
            appTableView: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.view&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/create document }
                 *
                 * 新增视图
                 *
                 * 在数据表中新增一个视图
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.view&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/delete document }
                 *
                 * 删除视图
                 *
                 * 删除数据表中的视图
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views/:view_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.view&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/get document }
                 *
                 * 检索视图
                 *
                 * 该接口根据 view_id 检索现有视图
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views/:view_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.view&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/list document }
                 *
                 * 列出视图
                 *
                 * 根据 app_token 和 table_id，获取数据表的所有视图
                 *
                 * 该接口支持调用频率上限为 20 QPS
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.view&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/patch document }
                 *
                 * 更新视图
                 *
                 * 该接口用于增量修改视图信息
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views/:view_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
         * 小组件
         */
        this.block = {
            /**
             * 服务端 API
             */
            entity: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=block&resource=entity&apiName=create&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/block-v2/entity/create document }
                 *
                 * 创建 BlockEntity
                 *
                 * 开发者可以通过该接口将部分或全部数据存放于 BlockEntity。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/block/v2/entities`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=block&resource=entity&apiName=update&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/block-v2/entity/update document }
                 *
                 * 更新BlockEntity
                 *
                 * 开发者通过该接口可以更新存储在BlockEntity中的数据，并实时推送到端侧。
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/block/v2/entities/:block_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 服务端 API
             */
            message: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=block&resource=message&apiName=create&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/block-v2/message/create document }
                 *
                 * Block协同数据推送
                 *
                 * 根据BlockID向指定用户列表推送协同数据。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/block/v2/message`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
         * 日历
         */
        this.calendar = {
            /**
             * 日历访问控制
             */
            calendarAcl: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.acl&apiName=create&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-acl/create document }
                 *
                 * 创建访问控制
                 *
                 * 该接口用于以当前身份（应用 / 用户）给日历添加访问控制权限，即日历成员。;;身份由 Header Authorization 的 Token 类型决定。
                 *
                 * 当前身份需要有日历的 owner 权限，并且日历的类型只能为 primary 或 shared。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/acls`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.acl&apiName=delete&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-acl/delete document }
                 *
                 * 删除访问控制
                 *
                 * 该接口用于以当前身份（应用 / 用户）删除日历的控制权限，即日历成员。;;身份由 Header Authorization 的 Token 类型决定。
                 *
                 * 当前身份需要有日历的 owner 权限，并且日历的类型只能为 primary 或 shared。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/acls/:acl_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/acls`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.acl&apiName=list&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-acl/list document }
                 *
                 * 获取访问控制列表
                 *
                 * 该接口用于以当前身份（应用 / 用户）获取日历的控制权限列表。;;身份由 Header Authorization 的 Token 类型决定。
                 *
                 * 当前身份需要有日历的 owner 权限，并且日历的类型只能为 primary 或 shared。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/acls`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.acl&apiName=subscription&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-acl/subscription document }
                 *
                 * 订阅日历访问控制变更事件;
                 *
                 * 该接口用于以用户身份订阅指定日历下的日历成员变更事件。
                 *
                 * 用户必须对日历有访问权限。
                 */
                subscription: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/acls/subscription`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.acl&apiName=unsubscription&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-acl/unsubscription document }
                 *
                 * 取消订阅日历访问控制变更事件
                 *
                 * 该接口用于以用户身份取消订阅指定日历下的日历成员变更事件。
                 *
                 * 用户必须对日历有访问权限。
                 */
                unsubscription: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/acls/unsubscription`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 日历管理
             */
            calendar: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=create&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/create document }
                 *
                 * 创建共享日历
                 *
                 * 该接口用于为当前身份（应用 / 用户）创建一个共享日历。;;身份由 Header Authorization 的 Token 类型决定。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=delete&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/delete document }
                 *
                 * 删除共享日历
                 *
                 * 该接口用于以当前身份（应用 / 用户）删除一个共享日历。;;身份由 Header Authorization 的 Token 类型决定。
                 *
                 * 当前身份必须对日历具有 owner 权限。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=get&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get document }
                 *
                 * 查询日历信息
                 *
                 * 该接口用于以当前身份（应用 / 用户）根据日历 ID 获取日历信息。;;身份由 Header Authorization 的 Token 类型决定。
                 *
                 * 当前身份必须对日历有访问权限。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=list&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/list document }
                 *
                 * 查询日历列表
                 *
                 * 该接口用于分页获得当前身份（应用 / 用户）的日历列表。;;身份由 Header Authorization 的 Token 类型决定。
                 *
                 * 调用时首先使用 page_token 分页拉取存量数据，之后使用 sync_token 增量同步变更数据。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=patch&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/patch document }
                 *
                 * 更新日历信息
                 *
                 * 该接口用于以当前身份（应用 / 用户）修改日历信息。;;身份由 Header Authorization 的 Token 类型决定。
                 *
                 * 当前身份对日历有 owner 权限时，可修改全局字段：summary, description, permission。;;当前身份对日历不具有 owner 权限时，仅可修改对自己生效的字段：color, summary_alias。
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=primary&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/primary document }
                 *
                 * 查询主日历信息
                 *
                 * 获取当前身份的主日历信息。
                 */
                primary: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/primary`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                searchWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/search`, path),
                            method: "POST",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=search&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/search document }
                 *
                 * 搜索日历
                 *
                 * 该接口用于通过关键字查询公共日历或用户主日历。
                 */
                search: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/search`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=subscribe&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/subscribe document }
                 *
                 * 订阅日历
                 *
                 * 该接口用于以当前身份（应用 / 用户）订阅某个日历。;;身份由 Header Authorization 的 Token 类型决定。
                 *
                 * - 仅可订阅类型为 primary 或 shared 的公开日历。;- 可订阅日历数量上限为1000。
                 */
                subscribe: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/subscribe`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=subscription&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/subscription document }
                 *
                 * 订阅日历变更事件
                 *
                 * 该接口用于以用户身份订阅当前身份下日历列表中的所有日历变更。
                 */
                subscription: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/subscription`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=unsubscribe&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/unsubscribe document }
                 *
                 * 取消订阅日历
                 *
                 * 该接口用于以当前身份（应用 / 用户）取消对某日历的订阅状态。;;身份由 Header Authorization 的 Token 类型决定。
                 *
                 * 仅可操作已经被当前身份订阅的日历。
                 */
                unsubscribe: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/unsubscribe`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=unsubscription&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/unsubscription document }
                 *
                 * 取消订阅日历变更事件
                 *
                 * 该接口用于以用户身份取消订阅当前身份下日历列表中的日历变更事件。
                 */
                unsubscription: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/unsubscription`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 日程参与人
             */
            calendarEventAttendee: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event.attendee&apiName=batch_delete&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/batch_delete document }
                 *
                 * 删除日程参与人
                 *
                 * 批量删除日程的参与人。
                 *
                 * - 当前身份需要有日历的 writer 或 owner 权限，并且日历的类型只能为 primary 或 shared。;;- 当前身份需要是日程的组织者。
                 */
                batchDelete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees/batch_delete`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event.attendee&apiName=create&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/create document }
                 *
                 * 创建日程参与人;
                 *
                 * 批量给日程添加参与人。
                 *
                 * - 当前身份需要有日历的 writer 或 owner 权限，并且日历的类型只能为 primary 或 shared。;;- 当前身份需要是日程的组织者，或日程设置了「参与人可邀请其它参与人」权限。;;- 新添加的日程参与人必须与日程组织者在同一个企业内。;;- 使用该接口添加会议室后，会议室会进入异步的预约流程，请求结束不代表会议室预约成功，需后续再查询预约状态。;;- 每个日程最多只能有 3000 名参与人。;;- 开启管理员能力后预约会议室可不受会议室预约范围的限制（当前不支持用管理员身份给其他人的日程预约会议室）
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event.attendee&apiName=list&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/list document }
                 *
                 * 获取日程参与人列表
                 *
                 * 获取日程的参与人列表，若参与者列表中有群组，请使用 [获取参与人群成员列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee-chat_member/list) 。
                 *
                 * - 当前身份必须对日历有reader、writer或owner权限（调用[获取日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，role字段可查看权限）。;;- 当前身份必须有权限查看日程的参与人列表。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 日程参与人群成员
             */
            calendarEventAttendeeChatMember: {
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees/:attendee_id/chat_members`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event.attendee.chat_member&apiName=list&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee-chat_member/list document }
                 *
                 * 获取日程参与群成员列表
                 *
                 * 获取日程的群参与人的群成员列表。
                 *
                 * - 当前身份必须有权限查看日程的参与人列表。;;- 当前身份必须在群聊中，或有权限查看群成员列表。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees/:attendee_id/chat_members`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 日程
             */
            calendarEvent: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=create&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/create document }
                 *
                 * 创建日程
                 *
                 * 该接口用于以当前身份（应用 / 用户）在日历上创建一个日程。;;身份由 Header Authorization 的 Token 类型决定。
                 *
                 * 当前身份必须对日历有 writer 或 owner 权限，并且日历的类型只能为 primary 或 shared。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=delete&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/delete document }
                 *
                 * 删除日程
                 *
                 * 该接口用于以当前身份（应用 / 用户）删除日历上的一个日程。;;身份由 Header Authorization 的 Token 类型决定。
                 *
                 * 当前身份必须对日历有 writer 或 owner 权限，并且日历的类型只能为 primary 或 shared。;;当前身份必须是日程的组织者。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=get&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/get document }
                 *
                 * 获取日程
                 *
                 * 该接口用于以当前身份（应用 / 用户）获取日历上的一个日程。;身份由 Header Authorization 的 Token 类型决定。
                 *
                 * - 当前身份必须对日历有reader、writer或owner权限才会返回日程详细信息（调用[获取日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，role字段可查看权限）。;- [例外日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/introduction#71c5ec78)可通过event_id的非0时间戳后缀，来获取修改的重复性日程的哪一天日程的时间信息。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=list&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/list document }
                 *
                 * 获取日程列表
                 *
                 * 该接口用于以当前身份（应用 / 用户）获取日历下的日程列表。;身份由 Header Authorization 的 Token 类型决定。
                 *
                 * - 当前身份必须对日历有reader、writer或owner权限才会返回日程详细信息（调用[获取日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，role字段可查看权限）。;;- 仅支持primary、shared和resource类型的日历获取日程列表。;;- page_token 分页拉取存量数据，sync_token 增量同步变更数据；目前仅传anchor_time时，会返回page_token。;;- 为了确保调用方日程同步数据的一致性，在使用sync_token时，不能同时使用start_time和end_time，否则可能造成日程数据缺失。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=patch&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/patch document }
                 *
                 * 更新日程
                 *
                 * 该接口用于以当前身份（应用 / 用户）更新日历上的一个日程。;;身份由 Header Authorization 的 Token 类型决定。
                 *
                 * 当前身份必须对日历有 writer 或 owner 权限，并且日历的类型只能为 primary 或 shared。;;当前身份为日程组织者时，可修改所有可编辑字段。;;当前身份为日程参与者时，仅可编辑部分字段。（如：visibility, free_busy_status, color, reminders）
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                searchWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/search`, path),
                            method: "POST",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=search&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/search document }
                 *
                 * 搜索日程
                 *
                 * 该接口用于以用户身份搜索某日历下的相关日程。;;身份由 Header Authorization 的 Token 类型决定。
                 *
                 * 当前身份必须对日历有reader、writer或owner权限（调用[获取日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，role字段可查看权限）。
                 */
                search: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/search`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=subscription&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/subscription document }
                 *
                 * 订阅日程变更事件
                 *
                 * 该接口用于以用户身份订阅指定日历下的日程变更事件。
                 *
                 * 当前身份必须对日历有reader、writer或owner权限（调用[获取日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，role字段可查看权限）。
                 */
                subscription: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/subscription`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=unsubscription&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/unsubscription document }
                 *
                 * 取消订阅日程变更事件
                 *
                 * 该接口用于以用户身份取消订阅指定日历下的日程变更事件。
                 *
                 * 当前身份必须对日历有reader、writer或owner权限（调用[获取日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，role字段可查看权限）。
                 */
                unsubscription: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/unsubscription`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * Exchange绑定
             */
            exchangeBinding: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=exchange_binding&apiName=create&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/exchange_binding/create document }
                 *
                 * 创建Exchange绑定关系
                 *
                 * 本接口将Exchange账户绑定到飞书账户，进而支持Exchange日历的导入
                 *
                 * 操作用户需要是企业超级管理员
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/exchange_bindings`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=exchange_binding&apiName=delete&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/exchange_binding/delete document }
                 *
                 * 解除Exchange绑定关系
                 *
                 * 本接口解除Exchange账户和飞书账户的绑定关系，Exchange账户解除绑定后才能绑定其他飞书账户
                 *
                 * 操作用户需要是企业超级管理员
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/exchange_bindings/:exchange_binding_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=exchange_binding&apiName=get&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/exchange_binding/get document }
                 *
                 * 获取绑定状态
                 *
                 * 本接口获取Exchange账户的绑定状态，包括exchange日历是否同步完成。
                 *
                 * 操作用户需要是企业超级管理员
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/exchange_bindings/:exchange_binding_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * freebusy
             */
            freebusy: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=freebusy&apiName=list&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/freebusy/list document }
                 *
                 * 查询主日历忙闲信息
                 *
                 * 查询用户主日历或会议室的忙闲信息。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/freebusy/list`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 日历设置
             */
            setting: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=setting&apiName=generate_caldav_conf&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/setting/generate_caldav_conf document }
                 *
                 * 生成CalDAV配置
                 *
                 * 用于为当前用户生成一个CalDAV账号密码，用于将飞书日历信息同步到本地设备日历。
                 */
                generateCaldavConf: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/settings/generate_caldav_conf`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 请假
             */
            timeoffEvent: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=timeoff_event&apiName=create&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/timeoff_event/create document }
                 *
                 * 创建请假日程
                 *
                 * 为指定用户创建一个请假日程，可以是一个普通请假日程，也可以是一个全天日程。;创建请假日程后，会在相应时间内，在用户个人签名页展示请假信息。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/timeoff_events`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=timeoff_event&apiName=delete&version=v4 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/timeoff_event/delete document }
                 *
                 * 删除请假日程
                 *
                 * 删除一个指定的请假日程，请假日程删除，用户个人签名页的请假信息也会消失。;一个应用只能删除自己创建的请假日程。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/calendar/v4/timeoff_events/:timeoff_event_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
             
             */
        this.comment_sdk = {};
        /**
         * 通讯录
         */
        this.contact = {
            /**
             * 自定义用户字段
             */
            customAttr: {
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/contact/v3/custom_attrs`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=custom_attr&apiName=list&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/custom_attr/list document }
                 *
                 * 获取企业自定义用户字段
                 *
                 * 获取企业自定义的用户字段配置信息
                 *
                 * 调用该接口前，需要先确认[企业管理员](https://www.feishu.cn/hc/zh-CN/articles/360049067822)在[企业管理后台 - 组织架构 - 成员字段管理](http://www.feishu.cn/admin/contacts/employee-field-new/custom) 自定义字段管理栏开启了“允许开放平台API调用“。;;![通讯录.gif](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/544738c94f13ef0b9ebaff53a5133cc7_E9EGMkXyzX.gif)
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/custom_attrs`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 部门
             */
            department: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=batch&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch&project=contact&resource=department&version=v3 document }
                 */
                batch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/departments/batch`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                childrenWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/contact/v3/departments/:department_id/children`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=children&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/children document }
                 *
                 * 获取子部门列表
                 *
                 * 通过部门ID获取部门的子部门列表。
                 *
                 * - 部门ID 必填，根部门的部门ID 为0。;- 使用 `user_access_token` 时，返回该用户组织架构可见性范围（[登陆企业管理后台进行权限配置](https://www.feishu.cn/admin/security/permission/visibility)）内的所有可见部门。当进行递归查询时，最多1000个部门对该用户可见。;;- 使用 ;`tenant_access_token` 则基于应用的通讯录权限范围进行权限校验与过滤。;如果部门ID为0，会检验应用是否有全员通讯录权限，如果是非0 部门ID，则会校验应用是否有该部门的通讯录权限。无部门权限返回无部门通讯录权限错误码，有权限则返回部门下子部门列表（根据fetch_child决定是否递归）。
                 */
                children: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/departments/:department_id/children`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=create&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/create document }
                 *
                 * 创建部门
                 *
                 * 该接口用于向通讯录中创建部门。
                 *
                 * 只可在应用的通讯录权限范围内的部门下创建部门。若需要在根部门下创建子部门，则应用通讯录权限范围需要设置为“全部成员”。应用商店应用无权限调用此接口。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/departments`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=delete&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/delete document }
                 *
                 * 删除部门
                 *
                 * 该接口用于从通讯录中删除部门。
                 *
                 * 应用需要同时拥有待删除部门及其父部门的通讯录授权。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/departments/:department_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=get&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/get document }
                 *
                 * 获取单个部门信息
                 *
                 * 该接口用于向通讯录获取单个部门信息。
                 *
                 * - 使用`tenant_access_token`时，应用需要拥有待查询部门的通讯录授权。如果需要获取根部门信息，则需要拥有全员权限。;- 使用`user_access_token`时，用户需要有待查询部门的可见性，如果需要获取根部门信息，则要求员工可见所有人。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/departments/:department_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/contact/v3/departments`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=list&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=contact&resource=department&version=v3 document }
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/departments`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                parentWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/contact/v3/departments/parent`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=parent&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/parent document }
                 *
                 * 获取父部门信息
                 *
                 * 该接口用来递归获取部门父部门的信息，并按照由子到父的顺序返回有权限的父部门信息列表。
                 *
                 * 使用`tenant_access_token`时,该接口只返回可见性范围内的父部门信息。;例如：A >>B>>C>>D四级部门，通讯录权限只到B，那么查询D部门的parent，会返回B和C两级部门。;使用user_access_token时,该接口只返回对于用户可见的父部门信息。
                 */
                parent: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/departments/parent`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=patch&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/patch document }
                 *
                 * 修改部门部分信息
                 *
                 * 该接口用于更新通讯录中部门的信息。
                 *
                 * 调用该接口需要具有该部门以及更新操作涉及的部门的通讯录权限。
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/departments/:department_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                searchWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/contact/v3/departments/search`, path),
                            method: "POST",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=search&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/search document }
                 *
                 * 搜索部门
                 *
                 * 搜索部门，用户通过关键词查询可见的部门数据，部门可见性需要管理员在后台配置。
                 *
                 * 部门存在，但用户搜索不到并不一定是搜索有问题，可能是管理员在后台配置了权限控制，导致用户无法搜索到该部门。
                 */
                search: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/departments/search`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=unbind_department_chat&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/unbind_department_chat document }
                 *
                 * 部门群转为普通群
                 *
                 * 通过该接口将部门群转为普通群。
                 */
                unbindDepartmentChat: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/departments/unbind_department_chat`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=update&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/update document }
                 *
                 * 更新部门所有信息
                 *
                 * 该接口用于更新当前部门所有信息。
                 *
                 * - 调用该接口需要具有该部门与更新部门信息涉及的通讯录权限。;; - 没有填写的字段会被置为空值（order字段除外）。
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/departments/:department_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 人员类型
             */
            employeeTypeEnum: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=employee_type_enum&apiName=create&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/create document }
                 *
                 * 新增人员类型
                 *
                 * 新增自定义人员类型
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/employee_type_enums`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=employee_type_enum&apiName=delete&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/delete document }
                 *
                 * 删除人员类型
                 *
                 * 删除自定义人员类型
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/employee_type_enums/:enum_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/contact/v3/employee_type_enums`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=employee_type_enum&apiName=list&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list document }
                 *
                 * 查询人员类型
                 *
                 * 该接口用于获取员工的人员类型
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/employee_type_enums`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=employee_type_enum&apiName=update&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/update document }
                 *
                 * 更新人员类型
                 *
                 * 更新自定义人员类型
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/employee_type_enums/:enum_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * functional_role
             */
            functionalRole: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=functional_role&apiName=create&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=contact&resource=functional_role&version=v3 document }
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/functional_roles`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=functional_role&apiName=delete&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=delete&project=contact&resource=functional_role&version=v3 document }
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/functional_roles/:role_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=functional_role&apiName=update&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=update&project=contact&resource=functional_role&version=v3 document }
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/functional_roles/:role_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * functional_role.member
             */
            functionalRoleMember: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=functional_role.member&apiName=batch_create&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_create&project=contact&resource=functional_role.member&version=v3 document }
                 */
                batchCreate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/functional_roles/:role_id/members/batch_create`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=functional_role.member&apiName=batch_delete&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_delete&project=contact&resource=functional_role.member&version=v3 document }
                 */
                batchDelete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/functional_roles/:role_id/members/batch_delete`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=functional_role.member&apiName=get&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=contact&resource=functional_role.member&version=v3 document }
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/functional_roles/:role_id/members/:member_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/contact/v3/functional_roles/:role_id/members`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=functional_role.member&apiName=list&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=contact&resource=functional_role.member&version=v3 document }
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/functional_roles/:role_id/members`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=functional_role.member&apiName=scopes&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=scopes&project=contact&resource=functional_role.member&version=v3 document }
                 */
                scopes: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/functional_roles/:role_id/members/scopes`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 用户组
             */
            group: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group&apiName=create&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/create document }
                 *
                 * 创建用户组
                 *
                 * 使用该接口创建用户组，请注意创建用户组时应用的通讯录权限范围需为“全部员工”，否则会创建失败，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/group`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group&apiName=delete&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/delete document }
                 *
                 * 删除用户组
                 *
                 * 通过该接口可删除企业中的用户组，请注意删除用户组时应用的通讯录权限范围需为“全部员工”，否则会删除失败，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/group/:group_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group&apiName=get&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/get document }
                 *
                 * 查询用户组
                 *
                 * 根据用户组 ID 查询某个用户组的基本信息，支持查询普通用户组和动态用户组。请确保应用的通讯录权限范围里包括该用户组或者是“全部员工”，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/group/:group_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group&apiName=member_belong&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/member_belong document }
                 *
                 * 查询用户所属用户组
                 *
                 * 通过该接口可查询该用户所属的用户组列表，可分别查询普通用户组和动态用户组。如果应用的通讯录权限范围是“全部员工”，则可获取该员工所属的全部用户组列表。如果应用的通讯录权限范围不是“全部员工”，则仅可获取通讯录权限范围内该员工所属的用户组。[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
                 */
                memberBelong: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/group/member_belong`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group&apiName=patch&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/patch document }
                 *
                 * 更新用户组
                 *
                 * 使用该接口更新用户组信息，请注意更新用户组时应用的通讯录权限范围需为“全部员工”，否则会更新失败。[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/group/:group_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                simplelistWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/contact/v3/group/simplelist`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group&apiName=simplelist&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/simplelist document }
                 *
                 * 查询用户组列表
                 *
                 * 通过该接口可查询企业的用户组列表，可分别查询普通用户组或动态用户组。如果应用的通讯录权限范围是“全部员工”，则可获取企业全部用户组列表。如果应用的通讯录权限范围不是“全部员工”，则仅可获取通讯录权限范围内的用户组。[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
                 */
                simplelist: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/group/simplelist`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 用户组成员
             */
            groupMember: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group.member&apiName=add&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/add document }
                 *
                 * 添加用户组成员
                 *
                 * 向用户组中添加成员(目前成员仅支持用户，未来会支持部门)，如果应用的通讯录权限范围是“全部员工”，则可将任何成员添加到任何用户组。如果应用的通讯录权限范围不是“全部员工”，则仅可将通讯录权限范围中的成员添加到通讯录权限范围的用户组中，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
                 */
                add: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/group/:group_id/member/add`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group.member&apiName=batch_add&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/batch_add document }
                 *
                 * 批量添加用户组成员
                 *
                 * 向普通用户组中批量添加成员(目前仅支持添加用户，暂不支持添加部门），如果应用的通讯录权限范围是“全部员工”，则可将任何成员添加到任何用户组。如果应用的通讯录权限范围不是“全部员工”，则仅可将通讯录权限范围中的成员添加到通讯录权限范围的用户组中，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
                 *
                 * 请求体中的member_type，目前仅支持user， 未来将支持department。
                 */
                batchAdd: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/group/:group_id/member/batch_add`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group.member&apiName=batch_remove&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/batch_remove document }
                 *
                 * 批量移除用户组成员
                 *
                 * 从普通用户组中批量移除成员 (目前仅支持移除用户，暂不支持移除部门）。如果应用的通讯录权限范围是“全部员工”，则可将任何成员移出任何用户组。如果应用的通讯录权限范围不是“全部员工”，则仅可将通讯录权限范围中的成员从通讯录权限范围的用户组中移除， [点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
                 *
                 * 请求体中的member_type，目前仅支持user， 未来将支持department。
                 */
                batchRemove: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/group/:group_id/member/batch_remove`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group.member&apiName=remove&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/remove document }
                 *
                 * 移除用户组成员
                 *
                 * 从用户组中移除成员 (目前成员仅支持用户，未来会支持部门)，如果应用的通讯录权限范围是“全部员工”，则可将任何成员移出任何用户组。如果应用的通讯录权限范围不是“全部员工”，则仅可将通讯录权限范围中的成员从通讯录权限范围的用户组中移除， [点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
                 */
                remove: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/group/:group_id/member/remove`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group.member&apiName=simplelist&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/simplelist document }
                 *
                 * 查询用户组成员列表
                 *
                 * 通过该接口可查询某个用户组的成员列表（支持查询成员中的用户和部门）, 本接口支持普通用户组和动态用户组。如果应用的通讯录权限范围是“全部员工”，则可查询企业内任何用户组的成员列表。如果应用的通讯录权限范围不是“全部员工”，则仅可查询通讯录权限范围中的用户组的成员列表，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
                 */
                simplelist: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/group/:group_id/member/simplelist`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * job_family
             */
            jobFamily: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=job_family&apiName=create&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=contact&resource=job_family&version=v3 document }
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/job_families`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=job_family&apiName=delete&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=delete&project=contact&resource=job_family&version=v3 document }
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/job_families/:job_family_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=job_family&apiName=get&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=contact&resource=job_family&version=v3 document }
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/job_families/:job_family_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/contact/v3/job_families`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=job_family&apiName=list&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=contact&resource=job_family&version=v3 document }
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/job_families`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=job_family&apiName=update&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=update&project=contact&resource=job_family&version=v3 document }
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/job_families/:job_family_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * job_level
             */
            jobLevel: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=job_level&apiName=create&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=contact&resource=job_level&version=v3 document }
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/job_levels`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=job_level&apiName=delete&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=delete&project=contact&resource=job_level&version=v3 document }
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/job_levels/:job_level_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=job_level&apiName=get&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=contact&resource=job_level&version=v3 document }
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/job_levels/:job_level_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/contact/v3/job_levels`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=job_level&apiName=list&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=contact&resource=job_level&version=v3 document }
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/job_levels`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=job_level&apiName=update&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=update&project=contact&resource=job_level&version=v3 document }
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/job_levels/:job_level_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 通讯录权限范围
             */
            scope: {
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/contact/v3/scopes`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=scope&apiName=list&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/scope/list document }
                 *
                 * 获取通讯录授权范围
                 *
                 * 该接口用于获取应用被授权可访问的通讯录范围，包括可访问的部门列表、用户列表和用户组列表。;授权范围为全员时，返回的部门列表为该企业所有的一级部门；否则返回的部门为管理员在设置授权范围时勾选的部门（不包含勾选部门的子部门）。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/scopes`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 单位
             */
            unit: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=bind_department&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/bind_department document }
                 *
                 * 建立部门与单位的绑定关系
                 *
                 * 通过该接口建立部门与单位的绑定关系。由于单位是旗舰版付费功能，企业需开通相关版本，否则会绑定失败，不同版本请参考[飞书版本对比](https://www.feishu.cn/service)
                 */
                bindDepartment: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/unit/bind_department`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=create&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/create document }
                 *
                 * 创建单位
                 *
                 * 该接口用于创建单位。注意：单位功能属于旗舰版付费功能，企业需开通对应版本才可以创建单位，不同版本请参考[飞书版本对比](https://www.feishu.cn/service)。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/unit`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=delete&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/delete document }
                 *
                 * 删除单位
                 *
                 * 使用该接口删除单位，需要有更新单位的权限。注意：如果单位的单位类型被其它的业务使用，不允许删除。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/unit/:unit_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=get&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/get document }
                 *
                 * 获取单位信息
                 *
                 * 该接口用于获取单位信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/unit/:unit_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=list&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/list document }
                 *
                 * 批量获取单位列表
                 *
                 * 通过该接口获取企业的单位列表，需获取单位的权限
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/unit`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=list_department&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/list_department document }
                 *
                 * 获取单位绑定的部门列表
                 *
                 * 通过该接口获取单位绑定的部门列表，需具有获取单位的权限
                 */
                listDepartment: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/unit/list_department`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=patch&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/patch document }
                 *
                 * 修改单位信息
                 *
                 * 调用该接口，需要有更新单位的权限。注意：单位功能属于旗舰版付费功能，企业需开通对应版本才可以修改单位
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/unit/:unit_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=unbind_department&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/unbind_department document }
                 *
                 * 解除部门与单位的绑定关系
                 *
                 * 通过该接口解除部门与单位的绑定关系，需更新单位的权限，需对应部门的通讯录权限。由于单位是旗舰版付费功能，企业需开通相关功能，否则会解绑失败
                 */
                unbindDepartment: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/unit/unbind_department`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 用户
             */
            user: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=batch&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch&project=contact&resource=user&version=v3 document }
                 */
                batch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/users/batch`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=batch_get_id&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id document }
                 *
                 * 通过手机号或邮箱获取用户 ID
                 *
                 * 通过该接口，可使用手机号/邮箱获取用户的 ID 信息，具体获取支持的 ID 类型包括 open_id、user_id、union_id，可通过查询参数指定。
                 *
                 * 如果查询的手机号、邮箱不存在，或者无权限查看对应的用户，则返回的用户ID列表为空。
                 */
                batchGetId: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/users/batch_get_id`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=create&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/create document }
                 *
                 * 创建用户
                 *
                 * 使用该接口向通讯录创建一个用户，可以理解为员工入职。创建用户后只返回有数据权限的数据。具体的数据权限的与字段的对应关系请参照[应用权限](https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN)。
                 *
                 * - 新增用户的所有部门必须都在当前应用的通讯录授权范围内才允许新增用户，如果想要在根部门下新增用户，必须要有全员权限。;- 应用商店应用无权限调用此接口。;- 创建用户后，会给用户发送邀请短信/邮件，用户在操作同意后才可访问团队。;- 返回数据中不返回手机号，如果需要请重新查询用户信息获取手机号。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/users`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=delete&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/delete document }
                 *
                 * 删除用户
                 *
                 * 该接口用于从通讯录删除一个用户信息，可以理解为员工离职。
                 *
                 * - 若用户归属部门A、部门B，应用的通讯录权限范围必须包括部门A和部门B才可以删除用户。;- 用户可以在删除员工时设置删除员工数据（如文档）的接收者，如果不设置则由其leader接收，如果该员工没有leader，则会将该员工的数据删除。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/users/:user_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                findByDepartmentWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/contact/v3/users/find_by_department`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=find_by_department&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/find_by_department document }
                 *
                 * 获取部门直属用户列表
                 *
                 * 基于部门ID获取部门直属用户列表。
                 *
                 * - 部门ID 必填，根部门的部门ID为0。;- 使用 `user_access_token` 情况下根据个人组织架构的通讯录可见范围进行权限过滤，返回个人组织架构通讯录范围（[登录企业管理后台进行权限配置](https://www.feishu.cn/admin/security/permission/visibility)）内可见的用户数据。;- 使用`tenant_access_token`会根据应用通讯录的范围进行权限过滤。 如果请求的部门ID为0，则校验应用是否具有全员通讯录权限； 如果是非0的部门ID，则会验证应用是否具有该部门的通讯录权限。 无权限返回无权限错误码，有权限则返回对应部门下的直接用户列表。
                 */
                findByDepartment: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/users/find_by_department`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=get&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/get document }
                 *
                 * 获取单个用户信息
                 *
                 * 该接口用于获取通讯录中单个用户的信息。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/users/:user_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/contact/v3/users`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=list&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=contact&resource=user&version=v3 document }
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/users`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=patch&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/patch document }
                 *
                 * 修改用户部分信息
                 *
                 * 该接口用于更新通讯录中用户的字段，未传递的参数不会更新。
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/users/:user_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=resurrect&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/resurrect document }
                 *
                 * 恢复已删除用户
                 *
                 * 该接口用于恢复已删除用户（已离职的成员），仅自建应用可申请，应用商店应用无权调用接口。
                 *
                 * - 仅支持恢复离职 30 天内的成员。恢复后，部分用户数据仍不可恢复，请谨慎调用。;- 待恢复成员的用户 ID 不能被企业内其他成员使用。如有重复，请先离职对应的成员，否则接口会报错。;- 待恢复成员的手机号和邮箱不能被企业内其他成员使用。如有重复，请先修改对应成员的信息，否则接口会报错。
                 */
                resurrect: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/users/:user_id/resurrect`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=update&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/update document }
                 *
                 * 更新用户所有信息
                 *
                 * 该接口用于更新通讯录中用户的字段。
                 *
                 * 应用需要拥有待更新用户的通讯录授权，如果涉及到用户部门变更，还需要同时拥有变更前、后所有新部门的通讯录授权。
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/contact/v3/users/:user_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
             
             */
        this.content_check = {};
        /**
             
             */
        this.contract = {};
        /**
         * CoreHR
         */
        this.corehr = {
            /**
             * assigned_user
             */
            assignedUser: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=assigned_user&apiName=search&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/assigned_user/search document }
                 *
                 * 获取组织类角色授权列表
                 *
                 * 查询组织类角色的授权信息
                 */
                search: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/assigned_users/search`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 公司
             */
            company: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=company&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/create document }
                 *
                 * 创建公司
                 *
                 * 创建公司
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/companies`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=company&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/delete document }
                 *
                 * 删除公司
                 *
                 * 删除公司
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/companies/:company_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=company&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/get document }
                 *
                 * 查询单个公司
                 *
                 * 根据 ID 查询单个公司
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/companies/:company_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=company&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/list document }
                 *
                 * 批量查询公司
                 *
                 * 批量查询公司
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/companies`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 合同
             */
            contract: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=contract&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/contract/create document }
                 *
                 * 创建合同
                 *
                 * 创建合同
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/contracts`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=contract&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/contract/delete document }
                 *
                 * 删除合同
                 *
                 * 删除合同
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/contracts/:contract_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=contract&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/contract/get document }
                 *
                 * 查询单个合同
                 *
                 * 根据 ID 查询单个合同
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/contracts/:contract_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=contract&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/contract/list document }
                 *
                 * 批量查询合同
                 *
                 * 批量查询合同
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/contracts`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=contract&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/contract/patch document }
                 *
                 * 更新合同
                 *
                 * 更新合同
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/contracts/:contract_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 地理库信息
             */
            countryRegion: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=country_region&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/country_region/get document }
                 *
                 * 查询单条国家/地区信息
                 *
                 * 查询单条国家/地区信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/country_regions/:country_region_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=country_region&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/country_region/list document }
                 *
                 * 批量查询国家/地区信息
                 *
                 * 批量查询国家/地区信息
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/country_regions`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 货币信息
             */
            currency: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=currency&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/currency/get document }
                 *
                 * 查询单个货币信息
                 *
                 * 查询单个货币信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/currencies/:currency_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=currency&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/currency/list document }
                 *
                 * 批量查询货币信息
                 *
                 * 批量查询货币信息
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/currencies`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 自定义字段
             */
            customField: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=custom_field&apiName=get_by_param&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param document }
                 *
                 * 获取自定义字段详情
                 *
                 * 获取「飞书人事」具体对象下某自定义字段的详细信息
                 */
                getByParam: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/custom_fields/get_by_param`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=custom_field&apiName=list_object_api_name&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/list_object_api_name document }
                 *
                 * 获取飞书人事对象列表
                 *
                 * 获取「飞书人事」中的对象列表，含系统预置对象与自定义对象
                 */
                listObjectApiName: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/custom_fields/list_object_api_name`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=custom_field&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/query document }
                 *
                 * 获取自定义字段列表
                 *
                 * 获取「飞书人事」具体对象下的自定义字段列表
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/custom_fields/query`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 部门
             */
            department: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/create document }
                 *
                 * 创建部门
                 *
                 * 创建部门
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/departments`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/delete document }
                 *
                 * 删除部门
                 *
                 * 删除部门
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/departments/:department_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/get document }
                 *
                 * 查询单个部门
                 *
                 * 根据 ID 查询单个部门
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/departments/:department_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/list document }
                 *
                 * 批量查询部门
                 *
                 * 批量查询部门
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/departments`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=department&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/patch document }
                 *
                 * 更新部门
                 *
                 * 更新部门
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/departments/:department_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 人员类型
             */
            employeeType: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employee_type&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/create document }
                 *
                 * 创建人员类型
                 *
                 * 创建人员类型
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/employee_types`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employee_type&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/delete document }
                 *
                 * 删除人员类型
                 *
                 * 删除人员类型
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/employee_types/:employee_type_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employee_type&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/get document }
                 *
                 * 查询单个人员类型
                 *
                 * 根据 ID 查询单个人员类型
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/employee_types/:employee_type_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employee_type&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/list document }
                 *
                 * 批量查询人员类型
                 *
                 * 批量查询人员类型
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/employee_types`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employee_type&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/patch document }
                 *
                 * 更新人员类型数据
                 *
                 * 更新人员类型数据
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/employee_types/:employee_type_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 雇佣信息
             */
            employment: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employment&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employment/create document }
                 *
                 * 创建雇佣信息
                 *
                 * 创建人员的雇佣信息
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/employments`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employment&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employment/delete document }
                 *
                 * 删除雇佣信息
                 *
                 * 删除人员的雇佣信息
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/employments/:employment_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=employment&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employment/patch document }
                 *
                 * 更新雇佣信息
                 *
                 * 更新雇佣信息
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/employments/:employment_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * file
             */
            file: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=file&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=corehr&resource=file&version=v1 document }
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/files/:id`, path),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return {
                        writeFile: (filePath) => __awaiter(this, void 0, void 0, function* () {
                            return new Promise((resolve, reject) => {
                                const writableStream = fs.createWriteStream(filePath);
                                writableStream.on("finish", () => {
                                    resolve(filePath);
                                });
                                writableStream.on("error", (e) => {
                                    reject(e);
                                });
                                res.pipe(writableStream);
                            });
                        }),
                    };
                }),
            },
            /**
             * 职务
             */
            job: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/create document }
                 *
                 * 创建职务
                 *
                 * 创建职务
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/jobs`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/delete document }
                 *
                 * 删除职务
                 *
                 * 删除职务
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/jobs/:job_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/get document }
                 *
                 * 查询单个职务
                 *
                 * 根据 ID 查询单个职务
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/jobs/:job_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/list document }
                 *
                 * 批量查询职务
                 *
                 * 批量查询职务
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/jobs`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/patch document }
                 *
                 * 更新职务
                 *
                 * 更新职务
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/jobs/:job_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 异动信息
             */
            jobChange: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_change&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_change/create document }
                 *
                 * 发起员工异动
                 *
                 * 创建员工异动信息
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/job_changes`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 任职信息
             */
            jobData: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_data&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/create document }
                 *
                 * 创建任职信息
                 *
                 * 在系统中第一次创建员工任职数据，通常在员工入职或者做数据批量导入的时候使用，【任职原因】只支持填写“入职”
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/job_datas`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_data&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/delete document }
                 *
                 * 删除任职信息
                 *
                 * 删除人员的任职信息
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/job_datas/:job_data_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_data&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/get document }
                 *
                 * 查询单个任职信息
                 *
                 * 根据 ID 查询单任职信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/job_datas/:job_data_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_data&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/list document }
                 *
                 * 批量查询任职信息
                 *
                 * 批量查询人员的任职信息
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/job_datas`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_data&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/patch document }
                 *
                 * 更新任职信息
                 *
                 * 更新任职信息
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/job_datas/:job_data_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 职务序列
             */
            jobFamily: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_family&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/create document }
                 *
                 * 创建职务序列
                 *
                 * 创建职务序列
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/job_families`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_family&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/delete document }
                 *
                 * 删除职务序列
                 *
                 * 删除职务序列
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/job_families/:job_family_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_family&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/get document }
                 *
                 * 查询单个职务序列
                 *
                 * 根据 ID 查询单个职务序列
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/job_families/:job_family_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_family&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/list document }
                 *
                 * 批量查询职务序列
                 *
                 * 批量查询职务序列
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/job_families`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_family&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/patch document }
                 *
                 * 更新职务序列
                 *
                 * 更新职务序列
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/job_families/:job_family_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 职务级别
             */
            jobLevel: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_level&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/create document }
                 *
                 * 创建职务级别
                 *
                 * 创建职务级别
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/job_levels`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_level&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/delete document }
                 *
                 * 删除职务级别
                 *
                 * 删除职务级别
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/job_levels/:job_level_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_level&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/get document }
                 *
                 * 查询单个职务级别
                 *
                 * 根据 ID 查询单个职务级别
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/job_levels/:job_level_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_level&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/list document }
                 *
                 * 批量查询职务级别
                 *
                 * 批量查询职务级别
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/job_levels`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=job_level&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/patch document }
                 *
                 * 更新职务级别
                 *
                 * 更新职务级别
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/job_levels/:job_level_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 休假管理
             */
            leave: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave&apiName=leave_balances&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave/leave_balances document }
                 *
                 * 批量查询员工假期余额
                 *
                 * 批量获取员工各个假期的余额数据
                 */
                leaveBalances: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/leaves/leave_balances`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave&apiName=leave_request_history&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave/leave_request_history document }
                 *
                 * 批量查询员工请假记录
                 *
                 * 批量获取员工的请假记录数据
                 */
                leaveRequestHistory: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/leaves/leave_request_history`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave&apiName=leave_types&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave/leave_types document }
                 *
                 * 获取假期类型列表
                 *
                 * 获取休假设置后台配置的假期类型列表（比如年假、事假、婚假等）
                 */
                leaveTypes: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/leaves/leave_types`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * leave_granting_record
             */
            leaveGrantingRecord: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave_granting_record&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave_granting_record/create document }
                 *
                 * 创建假期授予记录
                 *
                 * 向飞书人事休假系统写入假期授予记录
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/leave_granting_records`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=leave_granting_record&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave_granting_record/delete document }
                 *
                 * 删除假期授予记录
                 *
                 * 删除飞书人事休假系统中的假期授予记录（仅支持删除授予来源是「手动授予」或「外部系统授予」的记录）
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/leave_granting_records/:leave_granting_record_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 地点
             */
            location: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=location&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/create document }
                 *
                 * 创建地点
                 *
                 * 创建地点
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/locations`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=location&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/delete document }
                 *
                 * 删除地点
                 *
                 * 删除地点
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/locations/:location_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=location&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/get document }
                 *
                 * 查询单个地点
                 *
                 * 根据 ID 查询单个地点
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/locations/:location_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=location&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/list document }
                 *
                 * 批量查询地点
                 *
                 * 批量查询地点
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/locations`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 国家证件类型
             */
            nationalIdType: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=national_id_type&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/national_id_type/create document }
                 *
                 * 创建国家证件类型
                 *
                 * 创建国家证件类型
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/national_id_types`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=national_id_type&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/national_id_type/delete document }
                 *
                 * 删除国家证件类型
                 *
                 * 删除国家证件类型
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/national_id_types/:national_id_type_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=national_id_type&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/national_id_type/get document }
                 *
                 * 查询单个国家证件类型
                 *
                 * 根据 ID 查询单个国家证件类型
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/national_id_types/:national_id_type_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=national_id_type&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/national_id_type/list document }
                 *
                 * 批量查询国家证件类型
                 *
                 * 批量查询国家证件类型
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/national_id_types`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=national_id_type&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/national_id_type/patch document }
                 *
                 * 更新国家证件类型
                 *
                 * 更新国家证件类型
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/national_id_types/:national_id_type_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 员工离职
             */
            offboarding: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=offboarding&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/offboarding/query document }
                 *
                 * 查询员工离职原因列表
                 *
                 * 查询「飞书人事」-「离职设置」中的离职原因
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/offboardings/query`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                searchWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/corehr/v1/offboardings/search`, path),
                            method: "POST",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=offboarding&apiName=search&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=corehr&resource=offboarding&version=v1 document }
                 *
                 * 根据 雇佣 ID 查询员工离职信息
                 */
                search: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/offboardings/search`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=offboarding&apiName=submit&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/offboarding/submit document }
                 *
                 * 操作员工离职
                 *
                 * 操作员工直接离职
                 */
                submit: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/offboardings/submit`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 个人信息
             */
            person: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=person&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/person/delete document }
                 *
                 * 删除个人信息
                 *
                 * 删除人员的个人信息
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/persons/:person_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=person&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/person/get document }
                 *
                 * 查询单个个人信息
                 *
                 * 根据 ID 查询单个人员的个人信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/persons/:person_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=person&apiName=upload&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/person/upload document }
                 *
                 * 上传文件
                 *
                 * 上传文件
                 */
                upload: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/persons/upload`, path),
                        method: "POST",
                        data,
                        params,
                        headers: Object.assign(Object.assign({}, headers), { "Content-Type": "multipart/form-data" }),
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return get(res, "data", null);
                }),
            },
            /**
             * 待入职
             */
            preHire: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/pre_hire/delete document }
                 *
                 * 删除待入职人员
                 *
                 * 删除待入职人员
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/pre_hires/:pre_hire_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/pre_hire/get document }
                 *
                 * 查询单个待入职人员
                 *
                 * 根据 ID 查询单个待入职人员
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/pre_hires/:pre_hire_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/pre_hire/list document }
                 *
                 * 批量查询待入职人员
                 *
                 * 批量查询待入职人员
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/pre_hires`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=pre_hire&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/pre_hire/patch document }
                 *
                 * 更新待入职数据
                 *
                 * 更新待入职数据
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/pre_hires/:pre_hire_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 流程管理
             */
            processFormVariableData: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=process.form_variable_data&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/process-form_variable_data/get document }
                 *
                 * 获取流程表单数据
                 *
                 * 获取流程表单数据
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/processes/:process_id/form_variable_data`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * security_group
             */
            securityGroup: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=security_group&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/security_group/list document }
                 *
                 * 批量获取角色列表
                 *
                 * 批量查询「飞书人事」-「权限设置」-「角色设置」中的角色列表
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/security_groups`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=security_group&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/security_group/query document }
                 *
                 * HRBP/属地 BP 查询
                 *
                 * 通过部门或工作地点，查询对应的 HRBP/属地 BP
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/security_groups/query`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 地理库信息
             */
            subdivision: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=subdivision&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/subdivision/get document }
                 *
                 * 查询单条省份/行政区信息
                 *
                 * 查询单条省份/行政区信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/subdivisions/:subdivision_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=subdivision&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/subdivision/list document }
                 *
                 * 批量查询省份/行政区信息
                 *
                 * 批量查询省份/行政区信息
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/subdivisions`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 地理库信息
             */
            subregion: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=subregion&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/subregion/get document }
                 *
                 * 查询单条城市/区域信息
                 *
                 * 查询单条城市/区域信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/subregions/:subregion_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=subregion&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/subregion/list document }
                 *
                 * 批量查询城市/区域信息
                 *
                 * 批量查询城市/区域信息
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/subregions`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 异动原因
             */
            transferReason: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=transfer_reason&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/transfer_reason/query document }
                 *
                 * 获取异动原因列表
                 *
                 * 获取异动原因列表
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/transfer_reasons/query`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 异动类型
             */
            transferType: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=transfer_type&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/transfer_type/query document }
                 *
                 * 获取异动类型列表
                 *
                 * 获取异动类型列表
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/transfer_types/query`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 工时制度
             */
            workingHoursType: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=working_hours_type&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/create document }
                 *
                 * 创建工时制度
                 *
                 * 创建工时制度
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/working_hours_types`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=working_hours_type&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/delete document }
                 *
                 * 删除工时制度
                 *
                 * 删除工时制度
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/working_hours_types/:working_hours_type_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=working_hours_type&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/get document }
                 *
                 * 查询单个工时制度
                 *
                 * 根据 ID 查询单个工时制度
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/working_hours_types/:working_hours_type_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=working_hours_type&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/list document }
                 *
                 * 批量查询工时制度
                 *
                 * 批量查询工时制度
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/working_hours_types`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=corehr&resource=working_hours_type&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/patch document }
                 *
                 * 更新工时制度
                 *
                 * 更新工时制度
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/corehr/v1/working_hours_types/:working_hours_type_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
             
             */
        this.docs_tool = {};
        /**
         * 云文档-文档
         */
        this.docx = {
            /**
             * 块
             */
            documentBlock: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block&apiName=batch_update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/batch_update document }
                 *
                 * 批量更新块
                 *
                 * 批量更新块的富文本内容。
                 *
                 * 频率限制：单个应用调用频率上限为每秒 3 次。
                 *
                 * 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnby5Y0yoACL3PdfZqrJEm6f#doxcnMiwAKCiE6oQEkPyhvmmQEe)，了解相关规则及约束。
                 */
                batchUpdate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/batch_update`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/get document }
                 *
                 * 获取块
                 *
                 * 获取指定块的富文本内容。
                 *
                 * 频率限制：单个应用调用频率上限为每秒 5 次。
                 *
                 * 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnamKaccZKqIMopnREJCZUMe#doxcnWEMWYAg2YMkEq0SZXHzaih)，了解相关规则及约束。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/:block_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/docx/v1/documents/:document_id/blocks`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/list document }
                 *
                 * 获取文档所有块
                 *
                 * 获取文档所有块的富文本内容并分页返回。
                 *
                 * 频率限制：单个应用调用频率上限为每秒 5 次。
                 *
                 * 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnamKaccZKqIMopnREJCZUMe#doxcn6AkCE2AUUm2WwxID7lS7Xc)，了解相关规则及约束。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/docx/v1/documents/:document_id/blocks`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/patch document }
                 *
                 * 更新块
                 *
                 * 更新指定的块。
                 *
                 * 频率限制：单个应用调用频率上限为每秒 3 次。
                 *
                 * 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnby5Y0yoACL3PdfZqrJEm6f#doxcnEeyS0I8MMqoieIMpK7jm8g)，了解相关规则及约束。
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/:block_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * document.block.children
             */
            documentBlockChildren: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block.children&apiName=batch_delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block-children/batch_delete document }
                 *
                 * 删除块
                 *
                 * 指定需要操作的块，删除其指定范围的子块。如果操作成功，接口将返回应用删除操作后的文档版本号。
                 *
                 * 频率限制：单个应用调用频率上限为每秒 3 次。
                 *
                 * 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnby5Y0yoACL3PdfZqrJEm6f#doxcngCsscGk0WacO258mYDgM6b)，了解相关规则及约束。
                 */
                batchDelete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children/batch_delete`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block.children&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block-children/create document }
                 *
                 * 创建块
                 *
                 * 指定需要操作的块，为其创建一批子块，并插入到指定位置。如果操作成功，接口将返回新创建子块的富文本内容。
                 *
                 * 频率限制：单个应用调用频率上限为每秒 3 次。
                 *
                 * 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnby5Y0yoACL3PdfZqrJEm6f#doxcnm0ooUe0s20GwwVB3a05rtb)，了解相关规则及约束。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                getWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block.children&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block-children/get document }
                 *
                 * 获取所有子块
                 *
                 * 给定一个指定版本的文档，并指定需要操作的块，分页遍历其所有子块富文本内容 。如果不指定版本，则会默认查询最新版本。
                 *
                 * 频率限制：单个应用调用频率上限为每秒 5 次。
                 *
                 * 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnby5Y0yoACL3PdfZqrJEm6f#doxcnE2UK2yY0gEGK8nBMPtB0vd)，了解相关规则及约束。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 文档
             */
            document: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document/create document }
                 *
                 * 创建文档
                 *
                 * 创建新版文档，文档标题和目录可选。
                 *
                 * 频率限制：单个应用调用频率上限为每秒 3 次。
                 *
                 * 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnby5Y0yoACL3PdfZqrJEm6f#doxcnyoyCgwS8ywWwMtQr9yjZ2f)，了解相关规则及约束。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/docx/v1/documents`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document/get document }
                 *
                 * 获取文档基本信息
                 *
                 * 获取文档最新版本号、标题等
                 *
                 * 频率限制：单个应用调用频率上限为每秒 5 次。
                 *
                 * 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnby5Y0yoACL3PdfZqrJEm6f#doxcnWKAE4aSaIU4GcdLInSaVde)，了解相关规则及约束。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/docx/v1/documents/:document_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document&apiName=raw_content&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document/raw_content document }
                 *
                 * 获取文档纯文本内容
                 *
                 * 获取文档的纯文本内容。
                 *
                 * 频率限制：单个应用调用频率上限为每秒 5 次。
                 *
                 * 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnby5Y0yoACL3PdfZqrJEm6f#doxcnQeqI4wiKIMis6GNvCOBuqg)，了解相关规则及约束。
                 */
                rawContent: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/docx/v1/documents/:document_id/raw_content`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
         * 云文档-文件管理
         */
        this.drive = {
            /**
             * 导出
             */
            exportTask: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=export_task&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/create document }
                 *
                 * 创建导出任务
                 *
                 * 创建导出任务，将云文件导出为指定格式的本地文件。该接口为异步接口，需要通过轮询 [查询导出任务结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/get) 接口获取任务结果。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/export_tasks`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=export_task&apiName=download&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/download document }
                 *
                 * 下载导出文件
                 *
                 * 根据任务导出结果的token，下载导出文件
                 */
                download: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/export_tasks/file/:file_token/download`, path),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return {
                        writeFile: (filePath) => __awaiter(this, void 0, void 0, function* () {
                            return new Promise((resolve, reject) => {
                                const writableStream = fs.createWriteStream(filePath);
                                writableStream.on("finish", () => {
                                    resolve(filePath);
                                });
                                writableStream.on("error", (e) => {
                                    reject(e);
                                });
                                res.pipe(writableStream);
                            });
                        }),
                    };
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=export_task&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/get document }
                 *
                 * 查询导出任务结果
                 *
                 * 根据[创建导出任务](/ssl::ttdoc//uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/create)的ticket查询导出任务的结果，前提条件需要先调用创建导出任务接口。;;通过该接口获取到下载文件的 token 后调用[下载导出文件接口](/ssl::ttdoc//uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/download)将文件进行下载
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/export_tasks/:ticket`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 评论
             */
            fileComment: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.comment&apiName=batch_query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/batch_query document }
                 *
                 * 批量获取评论
                 *
                 * 该接口用于根据评论 ID 列表批量获取评论。
                 */
                batchQuery: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/comments/batch_query`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.comment&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/create document }
                 *
                 * 添加评论
                 *
                 * 往云文档添加一条全局评论。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/comments`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.comment&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/get document }
                 *
                 * 获取评论
                 *
                 * 获取云文档中的某条评论。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/comments/:comment_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/comments`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.comment&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/list document }
                 *
                 * 分页获取文档评论
                 *
                 * 该接口用于根据文档 token 分页获取文档评论。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/comments`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.comment&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/patch document }
                 *
                 * 解决/恢复 评论
                 *
                 * 解决或恢复云文档中的评论。
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/comments/:comment_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 评论
             */
            fileCommentReply: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.comment.reply&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment-reply/delete document }
                 *
                 * 删除回复
                 *
                 * 删除云文档中的某条回复。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/comments/:comment_id/replies/:reply_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.comment.reply&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment-reply/update document }
                 *
                 * 更新回复
                 *
                 * 更新云文档中的某条回复。
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/comments/:comment_id/replies/:reply_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 文件
             */
            file: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=copy&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/copy document }
                 *
                 * 复制文件
                 *
                 * 将文件复制到用户云空间的其他文件夹中。不支持复制文件夹。;;如果目标文件夹是我的空间，则复制的文件会在「**我的空间**」的「**归我所有**」列表里。
                 *
                 * 该接口不支持并发拷贝多个文件，且调用频率上限为 5QPS 且 10000次/天
                 */
                copy: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/copy`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=create_folder&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/create_folder document }
                 *
                 * 新建文件夹
                 *
                 * 在用户云空间的指定文件夹中创建一个新的空文件夹。
                 *
                 * 该接口不支持并发创建，且调用频率上限为 5QPS 以及 10000次/天
                 */
                createFolder: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/create_folder`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=create_shortcut&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create_shortcut&project=drive&resource=file&version=v1 document }
                 */
                createShortcut: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/create_shortcut`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/delete document }
                 *
                 * 删除文件
                 *
                 * 删除用户在云空间内的文件或者文件夹。文件或者文件夹被删除后，会进入用户回收站里。
                 *
                 * 该接口不支持并发调用，且调用频率上限为5QPS。删除文件夹会异步执行并返回一个task_id，可以使用[task_check](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/task_check)接口查询任务执行状态。
                 *
                 * 要删除文件需要确保应用具有下述两种权限之一：;1. 该应用是文件所有者并且具有该文件所在父文件夹的编辑权限。;2. 该应用并非文件所有者，但是是该文件所在父文件夹的所有者或者拥有该父文件夹的所有权限（full access）。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=download&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/download document }
                 *
                 * 下载文件
                 *
                 * 使用该接口可以下载在云空间目录下的文件（不含飞书文档/表格/思维导图等在线文档）。支持range下载。
                 *
                 * 该接口支持调用频率上限为5QPS
                 */
                download: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/download`, path),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return {
                        writeFile: (filePath) => __awaiter(this, void 0, void 0, function* () {
                            return new Promise((resolve, reject) => {
                                const writableStream = fs.createWriteStream(filePath);
                                writableStream.on("finish", () => {
                                    resolve(filePath);
                                });
                                writableStream.on("error", (e) => {
                                    reject(e);
                                });
                                res.pipe(writableStream);
                            });
                        }),
                    };
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/drive/v1/files`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list document }
                 *
                 * 获取文件夹下的清单
                 *
                 * 获取用户云空间中指定文件夹下的文件清单。清单类型包括文件、各种在线文档（文档、电子表格、多维表格、思维笔记）、文件夹和快捷方式。该接口支持分页，但是不会递归的获取子文件夹的清单。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=move&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/move document }
                 *
                 * 移动文件
                 *
                 * 将文件或者文件夹移动到用户云空间的其他位置。
                 */
                move: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/move`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=subscribe&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/subscribe document }
                 *
                 * 订阅云文档事件
                 *
                 * 该接口仅支持**文档拥有者**订阅自己文档的通知事件，可订阅的文档类型为**旧版文档**、**新版文档**、**电子表格**和**多维表格**。在调用该接口之前请确保正确[配置事件回调网址和订阅事件类型](https://open.feishu.cn/document/ukTMukTMukTM/uUTNz4SN1MjL1UzM#2eb3504a)(暂不支持单独订阅文档维度的某类事件)，事件类型参考[事件列表](https://open.feishu.cn/document/ukTMukTMukTM/uYDNxYjL2QTM24iN0EjN/event-list)。
                 */
                subscribe: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/subscribe`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=task_check&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/task_check document }
                 *
                 * 查询异步任务状态
                 *
                 * 查询删除文件夹等异步任务的状态信息。
                 */
                taskCheck: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/task_check`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=upload_all&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_all document }
                 *
                 * 上传文件
                 *
                 * 向云空间指定目录下上传一个小文件。
                 *
                 * 该接口支持调用频率上限为5QPS
                 *
                 * 请不要使用这个接口上传大于20MB的文件，如果有这个需求可以尝试使用[分片上传接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/multipart-upload-file-/introduction)。
                 */
                uploadAll: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/upload_all`, path),
                        method: "POST",
                        data,
                        params,
                        headers: Object.assign(Object.assign({}, headers), { "Content-Type": "multipart/form-data" }),
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return get(res, "data", null);
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=upload_finish&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_finish document }
                 *
                 * 分片上传文件（完成上传）
                 *
                 * 触发完成上传。
                 *
                 * 该接口不支持太高的并发，且调用频率上限为5QPS
                 */
                uploadFinish: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/upload_finish`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=upload_part&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_part document }
                 *
                 * 分片上传文件（上传分片）
                 *
                 * 上传对应的文件块。
                 *
                 * 该接口不支持太高的并发，且调用频率上限为5QPS
                 */
                uploadPart: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/upload_part`, path),
                        method: "POST",
                        data,
                        params,
                        headers: Object.assign(Object.assign({}, headers), { "Content-Type": "multipart/form-data" }),
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return get(res, "data", null);
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=upload_prepare&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_prepare document }
                 *
                 * 分片上传文件（预上传）
                 *
                 * 发送初始化请求获取上传事务ID和分块策略，目前是以4MB大小进行定长分片。
                 *
                 * 该接口不支持太高的并发，且调用频率上限为5QPS
                 *
                 * 你在24小时内可保存上传事务ID和上传进度，以便可以恢复上传
                 */
                uploadPrepare: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/upload_prepare`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * file.statistics
             */
            fileStatistics: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.statistics&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-statistics/get document }
                 *
                 * 获取文件统计信息
                 *
                 * 此接口用于获取文件统计信息，包括文档阅读人数、次数和点赞数。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/statistics`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 订阅
             */
            fileSubscription: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.subscription&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-subscription/create document }
                 *
                 * 创建订阅
                 *
                 * 订阅文档中的变更事件，当前支持文档评论订阅，订阅后文档评论更新会有“云文档助手”推送给订阅的用户
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/subscriptions`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.subscription&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-subscription/get document }
                 *
                 * 获取订阅状态
                 *
                 * 根据订阅ID获取该订阅的状态
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/subscriptions/:subscription_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.subscription&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-subscription/patch document }
                 *
                 * 更新订阅状态
                 *
                 * 根据订阅ID更新订阅状态
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/subscriptions/:subscription_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 文档版本
             */
            fileVersion: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.version&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-version/create document }
                 *
                 * 创建文档版本
                 *
                 * 创建文档版本。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/versions`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.version&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-version/delete document }
                 *
                 * 删除文档版本
                 *
                 * 删除文档版本。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/versions/:version_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.version&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-version/get document }
                 *
                 * 获取文档版本
                 *
                 * 获取文档版本。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/versions/:version_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/versions`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.version&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-version/list document }
                 *
                 * 获取文档版本列表
                 *
                 * 获取文档所有版本。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/versions`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * file.view_record
             */
            fileViewRecord: {
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/view_records`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.view_record&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=drive&resource=file.view_record&version=v1 document }
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/files/:file_token/view_records`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 导入
             */
            importTask: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=import_task&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/create document }
                 *
                 * 创建导入任务
                 *
                 * 创建导入任务。支持导入为 doc、docx、sheet、bitable，参考[导入用户指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/import-user-guide)
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/import_tasks`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=import_task&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/get document }
                 *
                 * 查询导入结果
                 *
                 * 根据创建导入任务返回的 ticket 查询导入结果。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/import_tasks/:ticket`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 素材
             */
            media: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=media&apiName=batch_get_tmp_download_url&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/batch_get_tmp_download_url document }
                 *
                 * 获取素材临时下载链接
                 *
                 * 通过file_token获取素材临时下载链接，链接时效性是24小时，过期失效。
                 *
                 * 该接口不支持太高的并发，且调用频率上限为5QPS
                 */
                batchGetTmpDownloadUrl: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/medias/batch_get_tmp_download_url`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=media&apiName=download&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/download document }
                 *
                 * 下载素材
                 *
                 * 使用该接口可以下载素材。素材表示在各种创作容器里的文件，如Doc文档内的图片，文件均属于素材。支持range下载。
                 *
                 * 该接口不支持太高的并发，且调用频率上限为5QPS
                 */
                download: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/medias/:file_token/download`, path),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return {
                        writeFile: (filePath) => __awaiter(this, void 0, void 0, function* () {
                            return new Promise((resolve, reject) => {
                                const writableStream = fs.createWriteStream(filePath);
                                writableStream.on("finish", () => {
                                    resolve(filePath);
                                });
                                writableStream.on("error", (e) => {
                                    reject(e);
                                });
                                res.pipe(writableStream);
                            });
                        }),
                    };
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=media&apiName=upload_all&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_all document }
                 *
                 * 上传素材
                 *
                 * 将文件、图片、视频等素材文件上传到指定云文档中。素材文件在云空间中不会显示，只会显示在对应云文档中。
                 *
                 * 该接口支持调用频率上限为5QPS
                 *
                 * 请不要使用这个接口上传大于20MB的文件，如果有这个需求可以尝试使用[分片上传接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/multipart-upload-media/introduction)。
                 */
                uploadAll: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/medias/upload_all`, path),
                        method: "POST",
                        data,
                        params,
                        headers: Object.assign(Object.assign({}, headers), { "Content-Type": "multipart/form-data" }),
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return get(res, "data", null);
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=media&apiName=upload_finish&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_finish document }
                 *
                 * 分片上传素材（完成上传）
                 *
                 * 触发完成上传。
                 *
                 * 该接口不支持太高的并发，且调用频率上限为5QPS
                 */
                uploadFinish: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/medias/upload_finish`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=media&apiName=upload_part&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_part document }
                 *
                 * 分片上传素材（上传分片）
                 *
                 * 上传对应的文件块。
                 *
                 * 该接口不支持太高的并发，且调用频率上限为5QPS
                 */
                uploadPart: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/medias/upload_part`, path),
                        method: "POST",
                        data,
                        params,
                        headers: Object.assign(Object.assign({}, headers), { "Content-Type": "multipart/form-data" }),
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return get(res, "data", null);
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=media&apiName=upload_prepare&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_prepare document }
                 *
                 * 分片上传素材（预上传）
                 *
                 * 发送初始化请求获取上传事务ID和分块策略，目前是以4MB大小进行定长分片。
                 *
                 * 该接口不支持太高的并发，且调用频率上限为5QPS
                 *
                 * 您在24小时内可保存上传事务ID和上传进度，以便可以恢复上传
                 */
                uploadPrepare: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/medias/upload_prepare`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * meta
             */
            meta: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=meta&apiName=batch_query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/meta/batch_query document }
                 *
                 * 获取文档元数据
                 *
                 * 该接口用于根据 token 获取各类文件的元数据
                 */
                batchQuery: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/metas/batch_query`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 成员
             */
            permissionMember: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.member&apiName=auth&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=auth&project=drive&resource=permission.member&version=v1 document }
                 */
                auth: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/permissions/:token/members/auth`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.member&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/create document }
                 *
                 * 增加协作者权限
                 *
                 * 该接口用于根据 filetoken 给用户增加文档的权限。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/permissions/:token/members`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.member&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/delete document }
                 *
                 * 移除协作者权限
                 *
                 * 该接口用于根据 filetoken 移除文档协作者的权限。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/permissions/:token/members/:member_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.member&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/list document }
                 *
                 * 获取协作者列表
                 *
                 * 该接口用于根据 filetoken 查询协作者
                 *
                 * - 你能获取到协作者列表的前提是你对该文档有分享权限;- 目前仅支持人、群、组织架构三种类型的协作者
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/permissions/:token/members`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.member&apiName=transfer_owner&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=transfer_owner&project=drive&resource=permission.member&version=v1 document }
                 */
                transferOwner: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/permissions/:token/members/transfer_owner`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.member&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/update document }
                 *
                 * 更新协作者权限
                 *
                 * 该接口用于根据 filetoken 更新文档协作者的权限。
                 *
                 * 该接口要求文档协作者已存在，如还未对文档协作者授权请先调用[「增加权限」 ](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/create)接口进行授权。
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/permissions/:token/members/:member_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 设置
             */
            permissionPublic: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.public&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-public/get document }
                 *
                 * 获取云文档权限设置
                 *
                 * 该接口用于根据 filetoken 获取云文档的权限设置。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/permissions/:token/public`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.public&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-public/patch document }
                 *
                 * 更新云文档权限设置
                 *
                 * 该接口用于根据 filetoken 更新云文档的权限设置。
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/permissions/:token/public`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * permission.public.password
             */
            permissionPublicPassword: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.public.password&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=drive&resource=permission.public.password&version=v1 document }
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/permissions/:token/public/password`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.public.password&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=delete&project=drive&resource=permission.public.password&version=v1 document }
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/permissions/:token/public/password`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.public.password&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=update&project=drive&resource=permission.public.password&version=v1 document }
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/permissions/:token/public/password`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
             
             */
        this.edu = {};
        /**
         * 智能人事
         */
        this.ehr = {
            /**
             * 飞书人事（标准版)
             */
            attachment: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=ehr&resource=attachment&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/ehr/ehr-v1/attachment/get document }
                 *
                 * 下载附件
                 *
                 * 根据文件 token 下载文件。;;调用 「批量获取员工花名册信息」接口的返回值中，「文件」类型的字段 id，即是文件 token
                 *
                 * ![image.png](//sf1-ttcdn-tos.pstatp.com/obj/open-platform-opendoc/bed391d2a8ce6ed2d5985ea69bf92850_9GY1mnuDXP.png)
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/ehr/v1/attachments/:token`, path),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return {
                        writeFile: (filePath) => __awaiter(this, void 0, void 0, function* () {
                            return new Promise((resolve, reject) => {
                                const writableStream = fs.createWriteStream(filePath);
                                writableStream.on("finish", () => {
                                    resolve(filePath);
                                });
                                writableStream.on("error", (e) => {
                                    reject(e);
                                });
                                res.pipe(writableStream);
                            });
                        }),
                    };
                }),
            },
            /**
             * 飞书人事（标准版)
             */
            employee: {
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/ehr/v1/employees`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=ehr&resource=employee&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/ehr/ehr-v1/employee/list document }
                 *
                 * 批量获取员工花名册信息
                 *
                 * 根据员工飞书用户 ID / 员工状态 / 雇员类型等搜索条件 ，批量获取员工花名册字段信息。字段包括「系统标准字段 / system_fields」和「自定义字段 / custom_fields」
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/ehr/v1/employees`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
             
             */
        this.elearning = {};
        /**
         * 事件订阅
         */
        this.event = {
            /**
             * 事件订阅
             */
            outboundIp: {
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/event/v1/outbound_ip`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=event&resource=outbound_ip&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uYDNxYjL2QTM24iN0EjN/event-v1/outbound_ip/list document }
                 *
                 * 获取事件出口 IP
                 *
                 * 飞书开放平台向应用配置的回调地址推送事件时，是通过特定的 IP 发送出去的，应用可以通过本接口获取所有相关的 IP 地址。
                 *
                 * IP 地址有变更可能，建议应用每隔 6 小时定时拉取最新的 IP 地址，以免由于企业防火墙设置，导致应用无法及时接收到飞书开放平台推送的事件。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/event/v1/outbound_ip`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
             
             */
        this.exam = {};
        /**
             
             */
        this.face_detection = {};
        /**
             
             */
        this.feelgood = {};
        /**
             
             */
        this.gray_test_open_sg = {
            /**
             * moto
             */
            moto: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=gray_test_open_sg&resource=moto&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=gray_test_open_sg&resource=moto&version=v1 document }
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/gray_test_open_sg/v1/motos`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=gray_test_open_sg&resource=moto&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=gray_test_open_sg&resource=moto&version=v1 document }
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/gray_test_open_sg/v1/motos/:moto_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/gray_test_open_sg/v1/motos`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=gray_test_open_sg&resource=moto&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=gray_test_open_sg&resource=moto&version=v1 document }
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/gray_test_open_sg/v1/motos`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
         * 服务台
         */
        this.helpdesk = {
            /**
             * 客服
             */
            agent: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent&apiName=agent_email&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent/agent_email document }
                 *
                 * 获取客服邮箱地址
                 *
                 * 该接口用于获取客服邮箱地址
                 */
                agentEmail: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/agent_emails`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent/patch document }
                 *
                 * 更新客服信息
                 *
                 * 更新客服状态等信息
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/agents/:agent_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 客服工作日程
             */
            agentSchedules: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent.schedules&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent-schedules/delete document }
                 *
                 * 删除客服
                 *
                 * 该接口用于删除客服
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/agents/:agent_id/schedules`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent.schedules&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent-schedules/get document }
                 *
                 * 获取客服工作日程;
                 *
                 * 该接口用于获取客服信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/agents/:agent_id/schedules`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent.schedules&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent-schedules/patch document }
                 *
                 * 更新客服日程
                 *
                 * 该接口用于更新客服的日程
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/agents/:agent_id/schedules`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * agent_schedule
             */
            agentSchedule: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_schedule&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_schedule/create document }
                 *
                 * 创建客服
                 *
                 * 该接口用于创建客服
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/agent_schedules`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_schedule&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_schedule/list document }
                 *
                 * 获取全部客服工作日程
                 *
                 * 该接口用于获取所有客服信息
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/agent_schedules`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 客服技能
             */
            agentSkill: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_skill&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/create document }
                 *
                 * 创建客服技能
                 *
                 * 该接口用于创建客服技能
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/agent_skills`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_skill&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/delete document }
                 *
                 * 删除客服技能
                 *
                 * 该接口用于删除客服技能
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/agent_skills/:agent_skill_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_skill&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/get document }
                 *
                 * 获取客服技能
                 *
                 * 该接口用于获取客服技能
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/agent_skills/:agent_skill_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_skill&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/list document }
                 *
                 * 获取全部客服技能
                 *
                 * 获取全部客服技能
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/agent_skills`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_skill&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/patch document }
                 *
                 * 更新客服技能
                 *
                 * 该接口用于更新客服技能
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/agent_skills/:agent_skill_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 客服技能规则
             */
            agentSkillRule: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_skill_rule&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill_rule/list document }
                 *
                 * 获取客服技能列表
                 *
                 * 该接口用于获取全部客服技能。仅支持自建应用。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/agent_skill_rules`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 机器人消息
             */
            botMessage: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=bot.message&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/bot-message/create document }
                 *
                 * 服务台机器人发送消息
                 *
                 * 通过服务台机器人给指定用户的服务台专属群或私聊发送消息，支持文本、富文本、卡片、图片。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/message`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 知识库分类
             */
            category: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=category&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/create document }
                 *
                 * 创建知识库分类
                 *
                 * 该接口用于创建知识库分类。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/categories`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=category&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/delete document }
                 *
                 * 删除知识库分类详情
                 *
                 * 该接口用于删除知识库分类详情。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/categories/:id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=category&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/get document }
                 *
                 * 获取知识库分类
                 *
                 * 该接口用于获取知识库分类。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/categories/:id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=category&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/list document }
                 *
                 * 获取全部知识库分类 - meta
                 *
                 * 该接口用于获取服务台知识库所有分类
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/categories`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=category&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/patch document }
                 *
                 * 更新知识库分类详情
                 *
                 * 该接口用于更新知识库分类详情。
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/categories/:id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 事件订阅
             */
            event: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=event&apiName=subscribe&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/event/subscribe document }
                 *
                 * 订阅服务台事件
                 *
                 * 用于订阅服务台事件
                 */
                subscribe: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/events/subscribe`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=event&apiName=unsubscribe&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/event/unsubscribe document }
                 *
                 * 取消订阅服务台事件
                 *
                 * 用于取消订阅服务台事件
                 */
                unsubscribe: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/events/unsubscribe`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 知识库
             */
            faq: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/create document }
                 *
                 * 创建知识库
                 *
                 * 该接口用于创建知识库。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/faqs`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/delete document }
                 *
                 * 删除知识库
                 *
                 * 该接口用于删除知识库。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/faqs/:id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=faq_image&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/faq_image document }
                 *
                 * 获取知识库图像
                 *
                 * 该接口用于获取知识库图像。
                 */
                faqImage: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/faqs/:id/image/:image_key`, path),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return {
                        writeFile: (filePath) => __awaiter(this, void 0, void 0, function* () {
                            return new Promise((resolve, reject) => {
                                const writableStream = fs.createWriteStream(filePath);
                                writableStream.on("finish", () => {
                                    resolve(filePath);
                                });
                                writableStream.on("error", (e) => {
                                    reject(e);
                                });
                                res.pipe(writableStream);
                            });
                        }),
                    };
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/get document }
                 *
                 * 获取知识库详情
                 *
                 * 该接口用于获取服务台知识库详情。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/faqs/:id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/faqs`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/list document }
                 *
                 * 获取全部知识库详情
                 *
                 * 该接口用于获取服务台知识库详情。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/faqs`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/patch document }
                 *
                 * 修改知识库
                 *
                 * 该接口用于修改知识库。
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/faqs/:id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                searchWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/faqs/search`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=search&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/search document }
                 *
                 * 搜索知识库
                 *
                 * 该接口用于搜索服务台知识库。
                 */
                search: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/faqs/search`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 推送中心
             */
            notification: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=cancel_approve&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/cancel_approve document }
                 *
                 * 取消审核
                 *
                 * 提交审核后，如果需要取消审核，则调用此接口
                 */
                cancelApprove: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id/cancel_approve`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=cancel_send&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/cancel_send document }
                 *
                 * 取消推送
                 *
                 * 取消推送接口，审核通过后待调度可以调用，发送过程中可以调用（会撤回已发送的消息），发送完成后可以需要推送（会撤回所有已发送的消息）
                 */
                cancelSend: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id/cancel_send`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/create document }
                 *
                 * 创建推送
                 *
                 * 调用接口创建推送，创建成功后为草稿状态
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/notifications`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=execute_send&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/execute_send document }
                 *
                 * 执行推送
                 *
                 * 审核通过后调用此接口设置推送时间，等待调度系统调度，发送消息
                 */
                executeSend: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id/execute_send`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/get document }
                 *
                 * 查询推送
                 *
                 * 查询推送详情
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/patch document }
                 *
                 * 更新推送
                 *
                 * 更新推送信息，只有在草稿状态下才可以调用此接口进行更新
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=preview&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/preview document }
                 *
                 * 预览推送内容
                 *
                 * 在正式执行推送之前是可以调用此接口预览设置的推送内容
                 */
                preview: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id/preview`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=submit_approve&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/submit_approve document }
                 *
                 * 提交审核
                 *
                 * 正常情况下调用创建推送接口后，就可以调用提交审核接口，如果创建人是服务台owner则会自动审核通过，否则会通知服务台owner审核此推送信息
                 */
                submitApprove: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id/submit_approve`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 工单
             */
            ticket: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=answer_user_query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/answer_user_query document }
                 *
                 * 回复用户提问结果至工单
                 *
                 * 该接口用于回复用户提问结果至工单，需要工单仍处于进行中且未接入人工状态。仅支持自建应用。
                 */
                answerUserQuery: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/tickets/:ticket_id/answer_user_query`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=customized_fields&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/customized_fields document }
                 *
                 * 获取服务台自定义字段详情
                 *
                 * 该接口用于获取服务台自定义字段详情。
                 */
                customizedFields: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/customized_fields`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/get document }
                 *
                 * 获取工单详情
                 *
                 * 该接口用于获取单个服务台工单详情。仅支持自建应用。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/tickets/:ticket_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/list document }
                 *
                 * 获取全部工单详情
                 *
                 * 该接口用于获取全部工单详情。仅支持自建应用。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/tickets`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=start_service&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/start_service document }
                 *
                 * 创建服务台对话
                 *
                 * 该接口用于创建服务台对话。
                 */
                startService: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/start_service`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=ticket_image&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/ticket_image document }
                 *
                 * 获取服务台工单内消息图像
                 *
                 * 该接口用于获取服务台工单消息图象。仅支持自建应用。
                 */
                ticketImage: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/ticket_images`, path),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return {
                        writeFile: (filePath) => __awaiter(this, void 0, void 0, function* () {
                            return new Promise((resolve, reject) => {
                                const writableStream = fs.createWriteStream(filePath);
                                writableStream.on("finish", () => {
                                    resolve(filePath);
                                });
                                writableStream.on("error", (e) => {
                                    reject(e);
                                });
                                res.pipe(writableStream);
                            });
                        }),
                    };
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/update document }
                 *
                 * 更新工单详情
                 *
                 * 该接口用于更新服务台工单详情。只会更新数据，不会触发相关操作。如修改工单状态到关单，不会关闭聊天页面。仅支持自建应用。要更新的工单字段必须至少输入一项。
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/tickets/:ticket_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 事件
             */
            ticketMessage: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket.message&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket-message/create document }
                 *
                 * 工单发送消息
                 *
                 * 该接口用于工单发送消息。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/tickets/:ticket_id/messages`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket.message&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket-message/list document }
                 *
                 * 获取服务台工单消息详情
                 *
                 * 该接口用于获取服务台工单消息详情。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/tickets/:ticket_id/messages`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 工单自定义字段
             */
            ticketCustomizedField: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket_customized_field&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/create document }
                 *
                 * 创建工单自定义字段
                 *
                 * 该接口用于创建自定义字段
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/ticket_customized_fields`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket_customized_field&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/delete document }
                 *
                 * 删除工单自定义字段
                 *
                 * 该接口用于删除工单自定义字段。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket_customized_field&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/get document }
                 *
                 * 获取工单自定义字段
                 *
                 * 该接口用于获取工单自定义字段详情。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/ticket_customized_fields`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket_customized_field&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/list document }
                 *
                 * 获取全部工单自定义字段
                 *
                 * 该接口用于获取全部工单自定义字段。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/ticket_customized_fields`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket_customized_field&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/patch document }
                 *
                 * 更新工单自定义字段
                 *
                 * 该接口用于更新自定义字段。
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
         * 招聘
         */
        this.hire = {
            /**
             * 投递
             */
            application: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/create document }
                 *
                 * 创建投递
                 *
                 * 根据人才 ID 和职位 ID 创建投递
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/applications`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/get document }
                 *
                 * 获取投递信息
                 *
                 * 根据投递 ID 获取单个投递信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/applications/:application_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list document }
                 *
                 * 获取投递列表
                 *
                 * 根据限定条件获取投递列表信息
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/applications`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application&apiName=offer&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/offer document }
                 *
                 * 获取 Offer 信息
                 *
                 * 根据投递 ID 获取 Offer 信息
                 */
                offer: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/applications/:application_id/offer`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application&apiName=terminate&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/terminate document }
                 *
                 * 终止投递
                 *
                 * 根据投递 ID 修改投递状态为「已终止」
                 */
                terminate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/applications/:application_id/terminate`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application&apiName=transfer_onboard&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/transfer_onboard document }
                 *
                 * 操作候选人入职
                 *
                 * 根据投递 ID 操作候选人入职并创建员工。投递须处于「待入职」阶段，可通过「转移阶段」接口变更投递状态
                 */
                transferOnboard: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/applications/:application_id/transfer_onboard`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * application.interview
             */
            applicationInterview: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application.interview&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=hire&resource=application.interview&version=v1 document }
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/applications/:application_id/interviews`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 附件
             */
            attachment: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=attachment&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/attachment/get document }
                 *
                 * 获取附件信息
                 *
                 * 获取招聘系统中附件的元信息，比如文件名、创建时间、文件url等
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/attachments/:attachment_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=attachment&apiName=preview&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/attachment/preview document }
                 *
                 * 获取附件预览信息
                 *
                 * 根据附件 ID 获取附件预览信息
                 */
                preview: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/attachments/:attachment_id/preview`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 导入 e-HR
             */
            ehrImportTask: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=ehr_import_task&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/ehr_import_task/patch document }
                 *
                 * 更新 e-HR 导入任务结果
                 *
                 * 在处理完导入 e-HR 事件后，可调用该接口，更新  e-HR 导入任务结果
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/ehr_import_tasks/:ehr_import_task_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 入职
             */
            employee: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=employee&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/employee/get document }
                 *
                 * 通过员工 ID 获取入职信息
                 *
                 * 通过员工 ID 获取入职信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/employees/:employee_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=employee&apiName=get_by_application&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/employee/get_by_application document }
                 *
                 * 通过投递 ID 获取入职信息
                 *
                 * 通过投递 ID 获取入职信息
                 */
                getByApplication: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/employees/get_by_application`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=employee&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/employee/patch document }
                 *
                 * 更新入职状态
                 *
                 * 根据员工 ID 更新员工转正、离职状态
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/employees/:employee_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 评估（灰度租户可见）
             */
            evaluation: {
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/hire/v1/evaluations`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=evaluation&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/evaluation/list document }
                 *
                 * 获取简历评估信息
                 *
                 * 获取简历评估信息
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/evaluations`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 导入外部系统信息（灰度租户可见）
             */
            externalApplication: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=external_application&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_application/create document }
                 *
                 * 创建外部投递
                 *
                 * 导入来自其他系统的投递信息，创建为外部投递
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/external_applications`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=external_application&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=delete&project=hire&resource=external_application&version=v1 document }
                 *
                 * 删除外部投递
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/external_applications/:external_application_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=external_application&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=update&project=hire&resource=external_application&version=v1 document }
                 *
                 * 更新外部投递
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/external_applications/:external_application_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 导入外部系统信息（灰度租户可见）
             */
            externalBackgroundCheck: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=external_background_check&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_background_check/create document }
                 *
                 * 创建外部背调
                 *
                 * 导入来自其他系统的背调信息，创建为外部背调
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/external_background_checks`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 导入外部系统信息（灰度租户可见）
             */
            externalInterview: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=external_interview&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_interview/create document }
                 *
                 * 创建外部面试
                 *
                 * 导入来自其他系统的面试信息，创建为外部面试
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/external_interviews`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 导入外部系统信息（灰度租户可见）
             */
            externalInterviewAssessment: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=external_interview_assessment&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_interview_assessment/create document }
                 *
                 * 创建外部面评
                 *
                 * 导入来自其他系统的面评信息，创建为外部面评
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/external_interview_assessments`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 面试
             */
            interview: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=interview&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/interview/list document }
                 *
                 * 获取面试信息
                 *
                 * 根据投递 ID 或面试时间获取面试信息
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/interviews`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 职位
             */
            job: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job&apiName=combined_create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/combined_create document }
                 *
                 * 新建职位
                 *
                 * 新建职位，字段的是否必填，以系统中的「职位字段管理」中的设置为准。
                 */
                combinedCreate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/jobs/combined_create`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job&apiName=combined_update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/combined_update document }
                 *
                 * 更新职位
                 *
                 * 更新职位信息，该接口为全量更新，若字段没有返回值，则原有值将会被清空。字段的是否必填，将以系统中的「职位字段管理」中的设置为准。
                 */
                combinedUpdate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/jobs/:job_id/combined_update`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job&apiName=config&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/config document }
                 *
                 * 获取职位设置
                 *
                 * 获取职位设置
                 */
                config: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/jobs/:job_id/config`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/get document }
                 *
                 * 获取职位信息
                 *
                 * 根据职位 ID 获取职位信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/jobs/:job_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job&apiName=update_config&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/update_config document }
                 *
                 * 更新职位设置
                 *
                 * 更新职位设置，包括面试评价表、Offer 申请表等。接口将按照所选择的「更新选项」进行设置参数校验和更新。
                 */
                updateConfig: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/jobs/:job_id/update_config`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * job.manager
             */
            jobManager: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job.manager&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job-manager/get document }
                 *
                 * 获取职位上的招聘人员信息
                 *
                 * 根据职位 ID 获取职位上的招聘人员信息，如招聘负责人、用人经理
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/jobs/:job_id/managers/:manager_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 流程
             */
            jobProcess: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job_process&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job_process/list document }
                 *
                 * 获取招聘流程信息
                 *
                 * 获取全部招聘流程信息
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/job_processes`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 招聘需求（灰度租户可见）
             */
            jobRequirement: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job_requirement&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job_requirement/create document }
                 *
                 * 创建招聘需求
                 *
                 * 创建招聘需求，除招聘需求编号为必填外，其他字段是否必填与飞书招聘「招聘需求字段管理」内设置一致
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/job_requirements`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job_requirement&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job_requirement/delete document }
                 *
                 * 删除招聘需求
                 *
                 * 删除招聘需求
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/job_requirements/:job_requirement_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job_requirement&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job_requirement/list document }
                 *
                 * 获取招聘需求列表
                 *
                 * 获取招聘需求列表
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/job_requirements`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job_requirement&apiName=list_by_id&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list_by_id&project=hire&resource=job_requirement&version=v1 document }
                 *
                 * 获取招聘需求信息
                 */
                listById: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/job_requirements/search`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job_requirement&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job_requirement/update document }
                 *
                 * 更新招聘需求
                 *
                 * 更新招聘需求
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/job_requirements/:job_requirement_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * job_requirement_schema
             */
            jobRequirementSchema: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job_requirement_schema&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job_requirement_schema/list document }
                 *
                 * 获取招聘需求模板
                 *
                 * 获取招聘需求模板
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/job_requirement_schemas`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 备注
             */
            note: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=note&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/note/create document }
                 *
                 * 创建备注
                 *
                 * 创建备注信息
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/notes`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=note&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/note/get document }
                 *
                 * 获取备注
                 *
                 * 根据备注 ID 获取备注信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/notes/:note_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=note&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/note/list document }
                 *
                 * 获取备注列表
                 *
                 * 获取备注列表
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/notes`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=note&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/note/patch document }
                 *
                 * 更新备注
                 *
                 * 根据备注 ID 更新备注信息
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/notes/:note_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * Offer
             */
            offer: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=offer&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer/create document }
                 *
                 * 创建 Offer
                 *
                 * 创建 Offer 时，需传入本文档中标注为必传的参数，其余参数是否必传参考「获取 Offer 申请表模板信息」的参数定义
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/offers`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=offer&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer/get document }
                 *
                 * 获取 Offer 详情
                 *
                 * 根据 Offer ID 获取 Offer 详细信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/offers/:offer_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=offer&apiName=intern_offer_status&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer/intern_offer_status document }
                 *
                 * 更新实习 Offer 入/离职状态
                 *
                 * 对「实习待入职」状态的实习 Offer 确认入职、放弃入职，或对「实习已入职」状态的实习 Offer 操作离职
                 */
                internOfferStatus: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/offers/:offer_id/intern_offer_status`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=offer&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer/list document }
                 *
                 * 获取 Offer 列表
                 *
                 * 根据人才 ID 获取 Offer 列表
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/offers`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=offer&apiName=offer_status&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=offer_status&project=hire&resource=offer&version=v1 document }
                 */
                offerStatus: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/offers/:offer_id/offer_status`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=offer&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer/update document }
                 *
                 * 更新 Offer 信息
                 *
                 * 1. 更新 Offer 时，需传入本文档中标注为必传的参数，其余参数是否必传参考「获取 Offer 申请表模板信息」的参数定义；;2. 对系统中已存在的 offer 进行更新的，若更新 offer 中含有「修改需审批」的字段，更新后原 Offer 的审批会自动撤回，需要重新发起审批
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/offers/:offer_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * offer_schema
             */
            offerSchema: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=offer_schema&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=hire&resource=offer_schema&version=v1 document }
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/offer_schemas/:offer_schema_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 问卷（灰度租户可见）
             */
            questionnaire: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=questionnaire&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/questionnaire/list document }
                 *
                 * 获取面试满意度问卷列表
                 *
                 * 获取面试满意度问卷列表
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/questionnaires`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 内推
             */
            referral: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=referral&apiName=get_by_application&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral/get_by_application document }
                 *
                 * 获取内推信息
                 *
                 * 根据投递 ID 获取内推信息
                 */
                getByApplication: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/referrals/get_by_application`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * referral_website.job_post
             */
            referralWebsiteJobPost: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=referral_website.job_post&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=hire&resource=referral_website.job_post&version=v1 document }
                 *
                 * 获取内推官网下职位广告详情
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/referral_websites/job_posts/:job_post_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/hire/v1/referral_websites/job_posts`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=referral_website.job_post&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=list&project=hire&resource=referral_website.job_post&version=v1 document }
                 *
                 * 获取内推官网下的职位列表。自定义数据暂不支持列表获取，请从「获取内推官网下职位广告详情」接口获取
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/referral_websites/job_posts`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 简历来源
             */
            resumeSource: {
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/hire/v1/resume_sources`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=resume_source&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/resume_source/list document }
                 *
                 * 获取简历来源列表
                 *
                 * 获取简历来源列表
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/resume_sources`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 人才
             */
            talent: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=talent&apiName=add_to_folder&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/add_to_folder document }
                 *
                 * 将人才加入指定文件夹
                 *
                 * 将人才加入指定文件夹
                 */
                addToFolder: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/talents/add_to_folder`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=talent&apiName=batch_get_id&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/batch_get_id document }
                 *
                 * 通过人才信息获取人才 ID
                 *
                 * 通过人才信息获取人才 ID
                 */
                batchGetId: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/talents/batch_get_id`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=talent&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/get document }
                 *
                 * 获取人才信息
                 *
                 * 根据人才 ID 获取人才信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/talents/:talent_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * talent_folder
             */
            talentFolder: {
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/hire/v1/talent_folders`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=hire&resource=talent_folder&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent_folder/list document }
                 *
                 * 获取人才文件夹信息
                 *
                 * 用于获取招聘系统中人才文件夹信息
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/hire/v1/talent_folders`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
         * 实名认证
         */
        this.human_authentication = {
            /**
             * 实名认证
             */
            identity: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=human_authentication&resource=identity&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/human_authentication-v1/identity/create document }
                 *
                 * 录入身份信息
                 *
                 * 该接口用于录入实名认证的身份信息，在唤起有源活体认证前，需要使用该接口进行实名认证。
                 *
                 * 实名认证接口会有计费管理，接入前请联系飞书开放平台工作人员，邮箱：openplatform@bytedance.com。;;仅通过计费申请的应用，才能在[开发者后台](https://open.feishu.cn/app)查找并申请该接口的权限。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/human_authentication/v1/identities`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
         * 消息与群组
         */
        this.im = {
            /**
             * 消息 - 批量消息
             */
            batchMessage: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=batch_message&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/batch_message/delete document }
                 *
                 * 批量撤回消息
                 *
                 * 批量撤回通过[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)接口发送的消息。
                 *
                 * 注意事项：;- 应用需要启用[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability) ;- 撤回单条发送的消息请使用[撤回消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/delete)接口;- 不支持撤回发出时间超过1天的消息;- 一次调用涉及大量消息，所以为异步接口，会有一定延迟。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/batch_messages/:batch_message_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=batch_message&apiName=get_progress&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/batch_message/get_progress document }
                 *
                 * 查询批量消息整体进度
                 *
                 * 该接口在[查询批量消息推送和阅读人数](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/batch_message/read_user)查询结果的基础上，增加了批量请求中有效的userid数量以及消息撤回进度数据。
                 *
                 * 注意事项:;* 该接口返回的数据为查询时刻的快照数据
                 */
                getProgress: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/batch_messages/:batch_message_id/get_progress`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=batch_message&apiName=read_user&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/batch_message/read_user document }
                 *
                 * 查询批量消息推送和阅读人数
                 *
                 * 批量发送消息后，可以通过该接口查询批量消息推送的总人数和阅读人数。
                 *
                 * 注意事项：;- 只能查询通过[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)接口产生的消息;- 该接口返回的数据为查询时刻的快照数据
                 */
                readUser: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/batch_messages/:batch_message_id/read_user`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 群组 - 群公告
             */
            chatAnnouncement: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.announcement&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-announcement/get document }
                 *
                 * 获取群公告信息
                 *
                 * 获取会话中的群公告信息，公告信息格式与[云文档](https://open.feishu.cn/document/ukTMukTMukTM/uAzM5YjLwMTO24CMzkjN)格式相同。
                 *
                 * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 机器人或授权用户必须在群里;- 获取内部群信息时，操作者须与群组在同一租户下
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/announcement`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.announcement&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-announcement/patch document }
                 *
                 * 更新群公告信息
                 *
                 * 更新会话中的群公告信息，更新公告信息的格式和更新[云文档](https://open.feishu.cn/document/ukTMukTMukTM/uAzM5YjLwMTO24CMzkjN)格式相同。
                 *
                 * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 机器人或授权用户必须在群里;- 操作者需要拥有群公告文档的阅读权限;- 获取内部群信息时，操作者须与群组在同一租户下;- 若群开启了 ==仅群主和群管理员可编辑群信息== 配置，群主/群管理员 或 创建群组且具备 ==更新应用所创建群的群信息== 权限的机器人，可更新群公告;- 若群未开启 ==仅群主和群管理员可编辑群信息== 配置，所有成员可以更新群公告
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/announcement`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 群组
             */
            chat: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create document }
                 *
                 * 创建群
                 *
                 * 创建群并设置群头像、群名、群描述等。
                 *
                 * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 本接口支持在创建群的同时拉用户或机器人进群；如果仅需要拉用户或者机器人入群参考 [将用户或机器人拉入群聊](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/create)接口
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/delete document }
                 *
                 * 解散群
                 *
                 * 解散群组。
                 *
                 * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 如果使用tenant_access_token，需要机器人符合以下任一情况才可解散群：;    - 机器人是群主;    - 机器人是群的创建者且具备==更新应用所创建群的群信息==权限;- 如果使用user_access_token，需要对应的用户是群主才可解散群
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get document }
                 *
                 * 获取群信息
                 *
                 * 获取群名称、群描述、群头像、群主 ID 等群基本信息。
                 *
                 * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability); - 机器人或授权用户必须在群里（否则只会返回群名称、群头像等基本信息）;- 获取内部群信息时，操作者须与群组在同一租户下
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=link&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/link document }
                 *
                 * 获取群分享链接
                 *
                 * 获取指定群的分享链接。
                 *
                 * 注意事项:;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability); - access_token所对应的 **机器人** 或 **授权用户** 必须在`chat_id`参数指定的群组中;- 单聊、密聊、团队群不支持分享群链接;- 当Bot被停用或Bot退出群组时，Bot生成的群链接也将停用;- 当群聊开启了 ==仅群主和群管理员可添加群成员/分享群== 设置时，仅**群主**和**群管理员**可以获取群分享链接;- 获取内部群分享链接时，操作者须与群组在同一租户下
                 */
                link: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/link`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/im/v1/chats`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list document }
                 *
                 * 获取用户或机器人所在的群列表
                 *
                 * 获取用户或者机器人所在群列表。
                 *
                 * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 请注意区分本接口和[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)的请求 URL;- 获取的群列表不包含P2P单聊
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                searchWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/search`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=search&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search document }
                 *
                 * 搜索对用户或机器人可见的群列表
                 *
                 * 搜索对用户或机器人可见的群列表，包括：用户或机器人所在的群、对用户或机器人公开的群。;搜索可获得的群信息包括：群ID（chat_id）、群名称、群描述等。
                 *
                 * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)
                 */
                search: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/search`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/update document }
                 *
                 * 更新群信息
                 *
                 * 更新群头像、群名称、群描述、群配置、转让群主等。
                 *
                 * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 对于群主/群管理员 或 创建群组且具备 ==更新应用所创建群的群信息== 权限的机器人，可更新所有信息;- 对于不满足上述权限条件的群成员或机器人：;    - 若未开启 ==仅群主和群管理员可编辑群信息== 配置，仅可更新群头像、群名称、群描述、群国际化名称信息;    - 若开启了 ==仅群主和群管理员可编辑群信息== 配置，任何群信息都不能修改;- 如果同时更新 ==邀请用户或机器人入群权限== 和 ==群分享权限== 这两项设置需要满足以下条件：;    - 若未开启 ==仅群主和管理员可以邀请用户或机器人入群==，需要设置 ==群分享权限== 为 ==允许分享==;    - 若开启了 ==仅群主和管理员可以邀请用户或机器人入群==，需要设置 ==群分享权限== 为 ==不允许分享==
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 群组 - 群成员
             */
            chatManagers: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.managers&apiName=add_managers&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-managers/add_managers document }
                 *
                 * 指定群管理员
                 *
                 * 将用户或机器人指定为群管理员。
                 *
                 * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 仅有群主可以指定群管理员
                 */
                addManagers: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/managers/add_managers`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.managers&apiName=delete_managers&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-managers/delete_managers document }
                 *
                 * 删除群管理员
                 *
                 * 删除指定的群管理员（用户或机器人）。
                 *
                 * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 仅有群主可以删除群管理员
                 */
                deleteManagers: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/managers/delete_managers`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 群组 - 群成员
             */
            chatMembers: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.members&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/create document }
                 *
                 * 将用户或机器人拉入群聊
                 *
                 * 将用户或机器人拉入群聊。
                 *
                 * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability); - 如需拉用户进群，需要机器人对用户有[可用性](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability); - 机器人或授权用户必须在群组中;- 外部租户不能被加入到内部群中;- 操作内部群时，操作者须与群组在同一租户下; - 在开启 ==仅群主和群管理员可添加群成员== 的设置时，仅有群主/管理员 或 创建群组且具备 ==更新应用所创建群的群信息== 权限的机器人，可以拉用户或者机器人进群; - 在未开启 ==仅群主和群管理员可添加群成员== 的设置时，所有群成员都可以拉用户或机器人进群
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/members`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.members&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/delete document }
                 *
                 * 将用户或机器人移出群聊
                 *
                 * 将用户或机器人移出群聊。
                 *
                 * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 用户或机器人在任何条件下均可移除自己出群（即主动退群）;- 仅有群主/管理员 或 创建群组并且具备 ==更新应用所创建群的群信息== 权限的机器人，可以移除其他用户或者机器人;- 每次请求，最多移除50个用户或者5个机器人;- 操作内部群时，操作者须与群组在同一租户下
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/members`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                getWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/members`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.members&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/get document }
                 *
                 * 获取群成员列表
                 *
                 * 获取用户/机器人所在群的群成员列表。
                 *
                 * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability); - 机器人或授权用户必须在群组中; - 该接口不会返回群内的机器人成员; - 由于返回的群成员列表会过滤掉机器人成员，因此返回的群成员个数可能会小于指定的page_size; - 如果有同一时间加入群的群成员，会一次性返回，这会导致返回的群成员个数可能会大于指定的page_size;- 获取内部群信息时，操作者须与群组在同一租户下
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/members`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.members&apiName=is_in_chat&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/is_in_chat document }
                 *
                 * 判断用户或机器人是否在群里
                 *
                 * 根据使用的access_token判断对应的用户或者机器人是否在群里。
                 *
                 * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 获取内部群信息时，操作者须与群组在同一租户下
                 */
                isInChat: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/members/is_in_chat`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.members&apiName=me_join&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/me_join document }
                 *
                 * 用户或机器人主动加入群聊
                 *
                 * 用户或机器人主动加入群聊。
                 *
                 * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 目前仅支持加入公开群;- 操作内部群时，操作者须与群组在同一租户下
                 */
                meJoin: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/members/me_join`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * chat.menu_item
             */
            chatMenuItem: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.menu_item&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-menu_item/patch document }
                 *
                 * 修改群菜单元信息
                 *
                 * 修改某个一级菜单或者二级菜单的元信息。
                 *
                 * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。;- 机器人必须在群里。
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/menu_items/:menu_item_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 群组 - 群菜单
             */
            chatMenuTree: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.menu_tree&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-menu_tree/create document }
                 *
                 * 添加群菜单
                 *
                 * 向群内添加群菜单。
                 *
                 * 注意事项：;- 该API是向群内追加菜单，群内原来存在的菜单并不会被覆盖。操作API后，将返回群内所有菜单。;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。;- 机器人必须在群里。;- 一个群内，一级菜单最多有3个，每个一级菜单最多有5个二级菜单。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/menu_tree`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.menu_tree&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-menu_tree/delete document }
                 *
                 * 删除群菜单。
                 *
                 * 删除群内菜单。
                 *
                 * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。;- 机器人必须在群里。;- 操作API后，将返回群内所有菜单。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/menu_tree`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.menu_tree&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-menu_tree/get document }
                 *
                 * 获取群内菜单
                 *
                 * 通过群ID获取群内菜单。
                 *
                 * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。;- 机器人必须在群里。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/menu_tree`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.menu_tree&apiName=sort&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-menu_tree/sort document }
                 *
                 * 排序群菜单
                 *
                 * 给一个群内的一级菜单排序。
                 *
                 * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。;- 机器人必须在群里。;- 操作API后，将返回群内所有菜单。
                 */
                sort: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/menu_tree/sort`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * chat.moderation
             */
            chatModeration: {
                getWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/moderation`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.moderation&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-moderation/get document }
                 *
                 * 获取群成员发言权限
                 *
                 * 获取群发言模式、可发言用户名单等
                 *
                 * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability); - 机器人 或 授权用户 必须在群里
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/moderation`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.moderation&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-moderation/update document }
                 *
                 * 更新群发言权限
                 *
                 * 更新群组的发言权限设置，可设置为全员可发言、仅管理员可发言  或 指定用户可发言。
                 *
                 * 注意事项：; - 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 若以用户授权调用接口，**当授权用户是群主**时，可更新群发言权限;- 若以租户授权调用接口(即以机器人身份调用接口)，当**机器人是群主** 或者 **机器人是群组创建者、具备==更新应用所创建群的群信息==权限且仍在群内**时，可更新群发言权限
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/moderation`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 群组 - 会话标签页
             */
            chatTab: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.tab&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-tab/create document }
                 *
                 * 添加会话标签页
                 *
                 * 添加自定义会话标签页。
                 *
                 * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 机器人或授权用户必须在群里;- 只允许添加类型为`doc`和`url`的会话标签页;- 添加doc类型时，操作者（access token对应的身份）需要拥有对应文档的权限;- tab_config字段当前只对`url`类型的会话标签页生效;- 在开启 ==仅群主和管理员可管理标签页== 的设置时，仅群主和群管理员可以添加会话标签页;- 操作内部群时，操作者须与群组在同一租户下
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/chat_tabs`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.tab&apiName=delete_tabs&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-tab/delete_tabs document }
                 *
                 * 删除会话标签页
                 *
                 * 删除会话标签页。
                 *
                 * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 机器人或授权用户必须在群里;- 只允许删除类型为`doc`和`url`的会话标签页;- 在开启 ==仅群主和管理员可管理标签页== 的设置时，仅群主和群管理员可以删除会话标签页;- 操作内部群时，操作者须与群组在同一租户下
                 */
                deleteTabs: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/chat_tabs/delete_tabs`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.tab&apiName=list_tabs&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-tab/list_tabs document }
                 *
                 * 拉取会话标签页
                 *
                 * 拉取会话标签页。
                 *
                 * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 机器人或授权用户必须在群里;- 操作内部群时，操作者须与群组在同一租户下
                 */
                listTabs: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/chat_tabs/list_tabs`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.tab&apiName=sort_tabs&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-tab/sort_tabs document }
                 *
                 * 会话标签页排序
                 *
                 * 会话标签页排序。
                 *
                 * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 机器人或授权用户必须在群里;- 消息标签页强制固定为第一顺位，不参与排序，但是请求体中必须包含该标签页的Tab ID;- 操作内部群时，操作者须与群组在同一租户下
                 */
                sortTabs: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/chat_tabs/sort_tabs`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.tab&apiName=update_tabs&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-tab/update_tabs document }
                 *
                 * 更新会话标签页
                 *
                 * 更新会话标签页
                 *
                 * 注意事项：;- 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 机器人或授权用户必须在群里;- 只允许更新类型为`doc`和`url`的会话标签页;- 更新doc类型时，操作者（access token对应的身份）需要拥有对应文档的权限;- 在开启 ==仅群主和管理员可管理标签页== 的设置时，仅群主和群管理员可以更新会话标签页;- 操作内部群时，操作者须与群组在同一租户下
                 */
                updateTabs: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/chat_tabs/update_tabs`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * chat.top_notice
             */
            chatTopNotice: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.top_notice&apiName=delete_top_notice&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-top_notice/delete_top_notice document }
                 *
                 * 撤销群置顶
                 *
                 * 撤销会话中的置顶。
                 *
                 * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability); - 机器人或授权用户必须在群组中;- 撤销内部群置顶时，操作者须与群组在同一租户下
                 */
                deleteTopNotice: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/top_notice/delete_top_notice`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.top_notice&apiName=put_top_notice&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-top_notice/put_top_notice document }
                 *
                 * 更新群置顶
                 *
                 * 更新会话中的群置顶信息，可以将群中的某一条消息，或者群公告置顶显示。
                 *
                 * 注意事项：; - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability); - 机器人或授权用户必须在群组中;- 更新内部群置顶时，操作者须与群组在同一租户下
                 */
                putTopNotice: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/chats/:chat_id/top_notice/put_top_notice`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 消息 - 文件信息
             */
            file: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=file&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/file/create document }
                 *
                 * 上传文件
                 *
                 * 上传文件，可以上传视频，音频和常见的文件类型。
                 *
                 * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 文件大小不得超过30M，且不允许上传空文件
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/files`, path),
                        method: "POST",
                        data,
                        params,
                        headers: Object.assign(Object.assign({}, headers), { "Content-Type": "multipart/form-data" }),
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return get(res, "data", null);
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=file&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/file/get document }
                 *
                 * 下载文件
                 *
                 * 下载文件接口，只能下载应用自己上传的文件。
                 *
                 * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 只能下载机器人自己上传的文件;- 下载用户发送的资源，请使用[获取消息中的资源文件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-resource/get)接口;- 下载的资源大小不能超过100M;- 如果需要Content-Disposition header，发起请求的时候需要在header中设置Content-Type为application/json
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/files/:file_key`, path),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return {
                        writeFile: (filePath) => __awaiter(this, void 0, void 0, function* () {
                            return new Promise((resolve, reject) => {
                                const writableStream = fs.createWriteStream(filePath);
                                writableStream.on("finish", () => {
                                    resolve(filePath);
                                });
                                writableStream.on("error", (e) => {
                                    reject(e);
                                });
                                res.pipe(writableStream);
                            });
                        }),
                    };
                }),
            },
            /**
             * 消息 - 图片信息
             */
            image: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=image&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/image/create document }
                 *
                 * 上传图片
                 *
                 * 上传图片接口，支持上传 JPEG、PNG、WEBP、GIF、TIFF、BMP、ICO格式图片。
                 *
                 * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 图片大小不得超过10M，且不支持上传大小为0的图片
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/images`, path),
                        method: "POST",
                        data,
                        params,
                        headers: Object.assign(Object.assign({}, headers), { "Content-Type": "multipart/form-data" }),
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return get(res, "data", null);
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=image&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/image/get document }
                 *
                 * 下载图片
                 *
                 * 下载图片资源，只能下载当前应用所上传且图片类型为message的图片。
                 *
                 * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 只能下载机器人自己上传且图片类型为message的图片，avatar类型暂不支持下载;- 下载用户发送的资源，请使用[获取消息中的资源文件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-resource/get)接口
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/images/:image_key`, path),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return {
                        writeFile: (filePath) => __awaiter(this, void 0, void 0, function* () {
                            return new Promise((resolve, reject) => {
                                const writableStream = fs.createWriteStream(filePath);
                                writableStream.on("finish", () => {
                                    resolve(filePath);
                                });
                                writableStream.on("error", (e) => {
                                    reject(e);
                                });
                                res.pipe(writableStream);
                            });
                        }),
                    };
                }),
            },
            /**
             * 消息
             */
            message: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create document }
                 *
                 * 发送消息
                 *
                 * 给指定用户或者会话发送消息，支持文本、富文本、可交互的[消息卡片](https://open.feishu.cn/document/ukTMukTMukTM/uczM3QjL3MzN04yNzcDN)、群名片、个人名片、图片、视频、音频、文件、表情包。
                 *
                 * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 给用户发送消息，需要机器人对用户有[可用性](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability);- 给群组发送消息，需要机器人在群组中
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/messages`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/delete document }
                 *
                 * 撤回消息
                 *
                 * 机器人撤回机器人自己发送的消息或群主撤回群内消息。
                 *
                 * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ，撤回消息时机器人仍需要在会话内;- 机器人可以撤回单聊和群组内，自己发送 且 发送时间不超过1天(24小时)的消息;- 若机器人要撤回群内他人发送的消息，则机器人必须是该群的群主、管理员 或者 创建者，且消息发送时间不超过1年;- 无法撤回通过「[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)」接口发送的消息
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/messages/:message_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=forward&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=forward&project=im&resource=message&version=v1 document }
                 *
                 * 转发一条消息
                 */
                forward: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/messages/:message_id/forward`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/get document }
                 *
                 * 获取指定消息的内容
                 *
                 * 通过 message_id 查询消息内容。
                 *
                 * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 机器人必须在群组中
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/messages/:message_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/im/v1/messages`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/list document }
                 *
                 * 获取会话历史消息
                 *
                 * 获取会话（包括单聊、群组）的历史消息（聊天记录）。
                 *
                 * - 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 获取消息时，机器人必须在群组中
                 *
                 * 接口级别权限默认只能获取单聊（p2p）消息，如果需要获取群组（group）消息，应用还必须拥有 **==获取群组中所有消息==** 权限
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/messages`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=merge_forward&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=merge_forward&project=im&resource=message&version=v1 document }
                 *
                 * 合并转发多条消息
                 */
                mergeForward: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/messages/merge_forward`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/patch document }
                 *
                 * 更新应用发送的消息
                 *
                 * 更新应用已发送的消息卡片内容。
                 *
                 * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 若以user_access_token更新消息，该操作用户必须是卡片消息的发送者;- 仅支持对所有人更新**未撤回**的[「共享卡片」](ukTMukTMukTM/uAjNwUjLwYDM14CM2ATN)消息，需在卡片的config属性中，显式声明 =="update_multi":true==。 ;- **不支持更新批量消息**;- 文本消息请求体最大不能超过150KB；卡片及富文本消息请求体最大不能超过30KB;- 仅支持修改14天内发送的消息;- 单条消息更新频控为**5QPS**
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/messages/:message_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=read_users&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/read_users document }
                 *
                 * 查询消息已读信息
                 *
                 * 查询消息的已读信息。
                 *
                 * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 只能查询机器人自己发送，且发送时间不超过7天的消息;- 查询消息已读信息时机器人仍需要在会话内;- 本接口不支持查询批量消息
                 */
                readUsers: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/messages/:message_id/read_users`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=reply&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/reply document }
                 *
                 * 回复消息
                 *
                 * 回复指定消息，支持文本、富文本、卡片、群名片、个人名片、图片、视频、文件等多种消息类型。
                 *
                 * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 回复私聊消息，需要机器人对用户有[可用性](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability);- 回复群组消息，需要机器人在群中
                 */
                reply: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/messages/:message_id/reply`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=update&project=im&resource=message&version=v1 document }
                 *
                 * 编辑已发送的消息内容，当前仅支持编辑文本和富文本消息。
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/messages/:message_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=urgent_app&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/urgent_app document }
                 *
                 * 发送应用内加急
                 *
                 * 对指定消息进行应用内加急。
                 *
                 * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 不支持加急批量消息;- 只能加急机器人自己发送的消息;- 加急时机器人需要在加急消息所在的群中;- 调用本接口需要用户已阅读加急的消息才可以继续加急（用户未读的加急上限为200条）
                 *
                 * 特别说明：;- 默认接口限流为50 QPS，请谨慎调用
                 */
                urgentApp: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/messages/:message_id/urgent_app`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=urgent_phone&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/urgent_phone document }
                 *
                 * 发送电话加急
                 *
                 * 对指定消息进行应用内加急与电话加急。
                 *
                 * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 只能加急机器人自己发送的消息;- 加急时机器人需要在加急消息所在的群组中;- 需要用户阅读已加急的消息才可以继续加急（用户未读的加急上限为200条）
                 *
                 * 特别说明：;- 通过接口产生的电话加急将消耗企业的加急额度，请慎重调用;- 通过[租户管理后台](https://admin.feishu.cn/)-费用中心-短信/电话加急 可以查看当前额度;- 默认接口限流为50 QPS，请谨慎调用
                 */
                urgentPhone: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/messages/:message_id/urgent_phone`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=urgent_sms&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/urgent_sms document }
                 *
                 * 发送短信加急
                 *
                 * 对指定消息进行应用内加急与短信加急。
                 *
                 * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 只能加急机器人自己发送的消息;- 加急时机器人仍需要在加急消息所在的群组中;- 调用本接口需要用户已阅读加急的消息才可以继续加急（用户未读的加急上限为200条）
                 *
                 * 特别说明：;- 通过接口产生的短信加急将消耗企业的加急额度，请慎重调用;- 通过[租户管理后台](https://admin.feishu.cn/)-费用中心-短信/电话加急 可以查看当前额度;- 默认接口限流为50 QPS，请谨慎调用
                 */
                urgentSms: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/messages/:message_id/urgent_sms`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create document }
                 *
                 * 通过模版消息卡片发送消息
                 *
                 * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 给用户发送消息，需要机器人对用户有[可用性](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability);- 给群组发送消息，需要机器人在群组中
                 */
                createByCard: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const { template_id, template_variable } = data, rest = __rest(data, ["template_id", "template_variable"]);
                    const targetData = Object.assign({ msg_type: "interactive", content: JSON.stringify({
                            type: "template",
                            data: {
                                template_id: template_id,
                                template_variable: template_variable,
                            },
                        }) }, rest);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/messages`, path),
                        method: "POST",
                        data: targetData,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=reply&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/reply document }
                 *
                 * 通过模版消息卡片回复消息
                 *
                 * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 回复私聊消息，需要机器人对用户有[可用性](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability);- 回复群组消息，需要机器人在群中
                 */
                replyByCard: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const { template_id, template_variable } = data, rest = __rest(data, ["template_id", "template_variable"]);
                    const targetData = Object.assign({ msg_type: "interactive", content: JSON.stringify({
                            type: "template",
                            data: {
                                template_id: template_id,
                                template_variable: template_variable,
                            },
                        }) }, rest);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/messages/:message_id/reply`, path),
                        method: "POST",
                        data: targetData,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=update&project=im&resource=message&version=v1 document }
                 *
                 * 通过模版消息卡片
                 */
                updateByCard: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const { template_id, template_variable } = data, rest = __rest(data, ["template_id", "template_variable"]);
                    const targetData = Object.assign({ msg_type: "interactive", content: JSON.stringify({
                            type: "template",
                            data: {
                                template_id: template_id,
                                template_variable: template_variable,
                            },
                        }) }, rest);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/messages/:message_id`, path),
                        method: "PUT",
                        data: targetData,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 消息 - 表情回复
             */
            messageReaction: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=message.reaction&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-reaction/create document }
                 *
                 * 添加消息表情回复
                 *
                 * 给指定消息添加指定类型的表情回复（reaction即表情回复，本文档统一用“reaction”代称）。
                 *
                 * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 待添加reaction的消息要真实存在，不能被撤回;- 给消息添加reaction，需要reaction的发送方（机器人或者用户）在消息所在的会话内
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/messages/:message_id/reactions`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=message.reaction&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-reaction/delete document }
                 *
                 * 删除消息表情回复
                 *
                 * 删除指定消息的表情回复（reaction即表情回复，本文档统一用“reaction”代称）。
                 *
                 * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 只能删除真实存在的reaction，并且删除reaction请求的操作者必须是reaction的原始添加者
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/messages/:message_id/reactions/:reaction_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/im/v1/messages/:message_id/reactions`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=message.reaction&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-reaction/list document }
                 *
                 * 获取消息表情回复
                 *
                 * 获取指定消息的特定类型表情回复列表（reaction即表情回复，本文档统一用“reaction”代称）。
                 *
                 * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 待获取reaction信息的消息要真实存在，不能被撤回;- 获取消息的reaction，需要request的授权主体（机器人或者用户）在消息所在的会话内
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/messages/:message_id/reactions`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * message.resource
             */
            messageResource: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=message.resource&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-resource/get document }
                 *
                 * 获取消息中的资源文件
                 *
                 * 获取消息中的资源文件，包括音频，视频，图片和文件，**暂不支持表情包资源下载**。当前仅支持 100M 以内的资源文件的下载。
                 *
                 * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability);- 机器人和消息需要在同一会话中;- 暂不支持获取合并转发消息中的子消息的资源文件
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/messages/:message_id/resources/:file_key`, path),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return {
                        writeFile: (filePath) => __awaiter(this, void 0, void 0, function* () {
                            return new Promise((resolve, reject) => {
                                const writableStream = fs.createWriteStream(filePath);
                                writableStream.on("finish", () => {
                                    resolve(filePath);
                                });
                                writableStream.on("error", (e) => {
                                    reject(e);
                                });
                                res.pipe(writableStream);
                            });
                        }),
                    };
                }),
            },
            /**
             * 消息 - Pin
             */
            pin: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=pin&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/pin/create document }
                 *
                 * Pin消息
                 *
                 * Pin一条指定的消息。
                 *
                 * 注意事项:;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- Pin消息时，机器人必须在对应的群组中;- 若消息已经被Pin，返回该Pin的操作信息;- 不能Pin一条对操作者不可见的消息;- 对同一条消息的Pin操作不能超过==5 QPS==
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/pins`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=pin&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/pin/delete document }
                 *
                 * 移除Pin消息
                 *
                 * 移除一条指定消息的Pin。
                 *
                 * 注意事项：;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 移除Pin消息时，机器人必须在对应的群组中;- 若消息未被Pin或已被撤回，返回成功信息;- 不能移除一条对操作者不可见的Pin消息;- 对同一条消息移除Pin的操作不能超过==5 QPS==
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/pins/:message_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/im/v1/pins`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=pin&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/pin/list document }
                 *
                 * 获取群内Pin消息
                 *
                 * 获取所在群内指定时间范围内的所有Pin消息。
                 *
                 * 注意事项：;- 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)  ;- 获取Pin消息时，机器人必须在群组中;- 获取的Pin消息按Pin的创建时间降序排列;- 接口默认限流为==50 QPS==
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/pins`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 特别关注（灰度租户可见）
             */
            specialFocus: {
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/im/v1/special_focus`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=special_focus&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/special_focus/list document }
                 *
                 * 获取特别关注列表
                 *
                 * 获取用户的特别关注列表。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/special_focus`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=im&resource=special_focus&apiName=unread&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/special_focus/unread document }
                 *
                 * 获取特别关注未读信息
                 *
                 * 支持按单聊类型和群聊类型获取用户的特别关注未读消息数。
                 */
                unread: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/im/v1/special_focus/unread`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
         * 邮箱
         */
        this.mail = {
            /**
             * 邮件组别名
             */
            mailgroupAlias: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.alias&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-alias/create document }
                 *
                 * 创建邮件组别名
                 *
                 * 创建邮件组别名
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.alias&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-alias/delete document }
                 *
                 * 删除邮件组别名
                 *
                 * 删除邮件组别名
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases/:alias_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.alias&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-alias/list document }
                 *
                 * 获取邮件组所有别名
                 *
                 * 获取邮件组所有别名
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 邮件组
             */
            mailgroup: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/create document }
                 *
                 * 创建邮件组
                 *
                 * 创建一个邮件组
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/delete document }
                 *
                 * 删除邮件组
                 *
                 * 删除一个邮件组
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/get document }
                 *
                 * 获取邮件组
                 *
                 * 获取特定邮件组信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/list document }
                 *
                 * 批量获取邮件组
                 *
                 * 分页批量获取邮件组
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/patch document }
                 *
                 * 修改邮件组
                 *
                 * 更新邮件组部分字段，没有填写的字段不会被更新
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/update document }
                 *
                 * 更新邮件组
                 *
                 * 更新邮件组所有信息
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 邮件组管理员
             */
            mailgroupManager: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.manager&apiName=batch_create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-manager/batch_create document }
                 *
                 * 批量创建邮件组管理员
                 *
                 * 批量创建邮件组管理员
                 */
                batchCreate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/managers/batch_create`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.manager&apiName=batch_delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-manager/batch_delete document }
                 *
                 * 批量删除邮件组管理员
                 *
                 * 批量删除邮件组管理员
                 */
                batchDelete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/managers/batch_delete`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/managers`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.manager&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-manager/list document }
                 *
                 * 批量获取邮件组管理员
                 *
                 * 批量获取邮件组管理员
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/managers`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 邮件组成员
             */
            mailgroupMember: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.member&apiName=batch_create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_create&project=mail&resource=mailgroup.member&version=v1 document }
                 */
                batchCreate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/members/batch_create`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.member&apiName=batch_delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_delete&project=mail&resource=mailgroup.member&version=v1 document }
                 */
                batchDelete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/members/batch_delete`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.member&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-member/create document }
                 *
                 * 创建邮件组成员
                 *
                 * 向邮件组添加单个成员
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/members`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.member&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-member/delete document }
                 *
                 * 删除邮件组成员
                 *
                 * 删除邮件组单个成员
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.member&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-member/get document }
                 *
                 * 获取邮件组成员信息
                 *
                 * 获取邮件组单个成员信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/members`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.member&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-member/list document }
                 *
                 * 批量获取邮件组成员
                 *
                 * 分页批量获取邮件组成员列表
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/members`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 邮件组权限成员
             */
            mailgroupPermissionMember: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.permission_member&apiName=batch_create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_create&project=mail&resource=mailgroup.permission_member&version=v1 document }
                 */
                batchCreate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/batch_create`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.permission_member&apiName=batch_delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_delete&project=mail&resource=mailgroup.permission_member&version=v1 document }
                 */
                batchDelete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/batch_delete`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.permission_member&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-permission_member/create document }
                 *
                 * 创建邮件组权限成员
                 *
                 * 向邮件组添加单个自定义权限成员，添加后该成员可发送邮件到该邮件组
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.permission_member&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-permission_member/delete document }
                 *
                 * 删除邮件组权限成员
                 *
                 * 从自定义成员中删除单个成员，删除后该成员无法发送邮件到该邮件组
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.permission_member&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-permission_member/get document }
                 *
                 * 获取邮件组权限成员
                 *
                 * 获取邮件组单个权限成员信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.permission_member&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-permission_member/list document }
                 *
                 * 批量获取邮件组权限成员
                 *
                 * 分页批量获取邮件组权限成员列表
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 公共邮箱别名
             */
            publicMailboxAlias: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.alias&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-alias/create document }
                 *
                 * 创建公共邮箱别名
                 *
                 * 创建公共邮箱别名
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.alias&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-alias/delete document }
                 *
                 * 删除公共邮箱别名
                 *
                 * 删除公共邮箱别名
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases/:alias_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.alias&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-alias/list document }
                 *
                 * 获取所有公共邮箱别名
                 *
                 * 获取所有公共邮箱别名
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 公共邮箱
             */
            publicMailbox: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/create document }
                 *
                 * 创建公共邮箱
                 *
                 * 创建一个公共邮箱
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/public_mailboxes`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/delete document }
                 *
                 * 释放公共邮箱地址
                 *
                 * 该接口会永久删除公共邮箱地址。可用于释放邮箱回收站的公共邮箱地址，一旦删除，该邮箱地址将无法恢复。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/get document }
                 *
                 * 获取公共邮箱
                 *
                 * 获取公共邮箱信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/mail/v1/public_mailboxes`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/list document }
                 *
                 * 批量获取公共邮箱
                 *
                 * 分页批量获取公共邮箱列表
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/public_mailboxes`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/patch document }
                 *
                 * 修改公共邮箱
                 *
                 * 更新公共邮箱部分字段，没有填写的字段不会被更新
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/update document }
                 *
                 * 更新公共邮箱
                 *
                 * 更新公共邮箱所有信息
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 公共邮箱成员
             */
            publicMailboxMember: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.member&apiName=batch_create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_create&project=mail&resource=public_mailbox.member&version=v1 document }
                 */
                batchCreate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/batch_create`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.member&apiName=batch_delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=batch_delete&project=mail&resource=public_mailbox.member&version=v1 document }
                 */
                batchDelete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/batch_delete`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.member&apiName=clear&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-member/clear document }
                 *
                 * 清空公共邮箱成员
                 *
                 * 删除公共邮箱所有成员
                 */
                clear: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/clear`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.member&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-member/create document }
                 *
                 * 创建公共邮箱成员
                 *
                 * 向公共邮箱添加单个成员
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.member&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-member/delete document }
                 *
                 * 删除公共邮箱成员
                 *
                 * 删除公共邮箱单个成员
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.member&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-member/get document }
                 *
                 * 获取公共邮箱成员信息
                 *
                 * 获取公共邮箱单个成员信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.member&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-member/list document }
                 *
                 * 批量获取公共邮箱成员
                 *
                 * 分页批量获取公共邮箱成员列表
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 邮箱地址
             */
            user: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=user&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user/query document }
                 *
                 * 邮箱状态查询
                 *
                 * 使用邮箱状态查询接口，可以输入邮箱地址，查询出该邮箱地址对应的类型以及状态
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/users/query`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 用户邮箱别名
             */
            userMailboxAlias: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=user_mailbox.alias&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-alias/create document }
                 *
                 * 创建用户邮箱别名
                 *
                 * 创建用户邮箱别名
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=user_mailbox.alias&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-alias/delete document }
                 *
                 * 删除用户邮箱别名
                 *
                 * 删除用户邮箱别名
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases/:alias_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=user_mailbox.alias&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-alias/list document }
                 *
                 * 获取用户邮箱所有别名
                 *
                 * 获取用户邮箱所有别名
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 用户邮箱
             */
            userMailbox: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mail&resource=user_mailbox&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox/delete document }
                 *
                 * 释放用户邮箱地址
                 *
                 * 该接口会永久删除用户邮箱地址。可用于删除位于邮箱回收站中的用户邮箱地址，一旦删除，将无法恢复。该接口支持邮件的转移，可以将被释放邮箱的邮件转移到另外一个可以使用的邮箱中。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mail/v1/user_mailboxes/:user_mailbox_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
         * 主数据
         */
        this.mdm = {
            /**
             * 数据维度
             */
            userAuthDataRelation: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mdm&resource=user_auth_data_relation&apiName=bind&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/mdm-v1/user_auth_data_relation/bind document }
                 *
                 * 用户数据维度绑定
                 *
                 * 通过该接口，可为指定应用下的用户绑定一类数据维度，支持批量给多个用户同时增量授权。
                 */
                bind: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mdm/v1/user_auth_data_relations/bind`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=mdm&resource=user_auth_data_relation&apiName=unbind&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/mdm-v1/user_auth_data_relation/unbind document }
                 *
                 * 用户数据维度解绑
                 *
                 * 通过该接口，可为指定应用下的指定用户解除一类数据维度。
                 */
                unbind: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/mdm/v1/user_auth_data_relations/unbind`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
             
             */
        this.meeting_room = {};
        /**
             
             */
        this.moments = {};
        /**
         * OKR
         */
        this.okr = {
            /**
             * 图片
             */
            image: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=okr&resource=image&apiName=upload&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/image/upload document }
                 *
                 * 上传图片
                 *
                 * 上传图片
                 */
                upload: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/okr/v1/images/upload`, path),
                        method: "POST",
                        data,
                        params,
                        headers: Object.assign(Object.assign({}, headers), { "Content-Type": "multipart/form-data" }),
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return get(res, "data", null);
                }),
            },
            /**
             * 指标库
             */
            metricSource: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=okr&resource=metric_source&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/metric_source/list document }
                 *
                 * 获取指标库
                 *
                 * 获取租户下全部 OKR 指标库（仅限 OKR 企业版使用）
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/okr/v1/metric_sources`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 指标项
             */
            metricSourceTableItem: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=okr&resource=metric_source.table.item&apiName=batch_update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/metric_source-table-item/batch_update document }
                 *
                 * 批量更新指标项
                 *
                 * - 该接口用于批量更新多项指标，单次调用最多更新 100 条记录。接口仅限 OKR 企业版使用。;;  更新成功后 OKR 系统会给以下人员发送消息通知：;;    - 首次更新目标值的人员 ;;    - 已经将指标添加为 KR、且本次目标值/起始值/支撑的上级有变更的人员，不包含仅更新了进度值的人员
                 */
                batchUpdate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/okr/v1/metric_sources/:metric_source_id/tables/:metric_table_id/items/batch_update`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=okr&resource=metric_source.table.item&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/metric_source-table-item/get document }
                 *
                 * 获取指标项详情
                 *
                 * 获取某项指标的具体内容（仅限 OKR 企业版使用）
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/okr/v1/metric_sources/:metric_source_id/tables/:metric_table_id/items/:metric_item_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=okr&resource=metric_source.table.item&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/metric_source-table-item/list document }
                 *
                 * 获取指标项
                 *
                 * 获取指定指标表下的所有指标项（仅限 OKR 企业版使用）
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/okr/v1/metric_sources/:metric_source_id/tables/:metric_table_id/items`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=okr&resource=metric_source.table.item&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/metric_source-table-item/patch document }
                 *
                 * 更新指标项
                 *
                 * - 该接口用于更新某项指标，接口仅限 OKR 企业版使用。;;    更新成功后 OKR 系统会给以下人员发送消息通知：;;    - 首次更新目标值的人员 ;;    - 已经将指标添加为 KR、且本次目标值/起始值/支撑的上级有变更的人员，不包含仅更新了进度值的人员
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/okr/v1/metric_sources/:metric_source_id/tables/:metric_table_id/items/:metric_item_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 指标表
             */
            metricSourceTable: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=okr&resource=metric_source.table&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/metric_source-table/list document }
                 *
                 * 获取指标表
                 *
                 * 获取指定指标库下有哪些指标表（仅限 OKR 企业版使用）
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/okr/v1/metric_sources/:metric_source_id/tables`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * OKR
             */
            okr: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=okr&resource=okr&apiName=batch_get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/okr/batch_get document }
                 *
                 * 批量获取OKR
                 *
                 * 根据OKR id批量获取OKR
                 *
                 * 使用<md-tag mode="inline" type="token-tenant">tenant_access_token</md-tag>需要额外申请权限<md-perm ;href="https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN">以应用身份访问OKR信息</md-perm>
                 */
                batchGet: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/okr/v1/okrs/batch_get`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * OKR周期
             */
            period: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=okr&resource=period&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/period/list document }
                 *
                 * 获取OKR周期列表
                 *
                 * 获取OKR周期列表
                 *
                 * 使用<md-tag mode="inline" type="token-tenant">tenant_access_token</md-tag>需要额外申请权限<md-perm ;href="https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN">以应用身份访问OKR信息</md-perm>
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/okr/v1/periods`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * OKR进展记录
             */
            progressRecord: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=okr&resource=progress_record&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/progress_record/create document }
                 *
                 * 创建OKR进展记录
                 *
                 * 创建OKR进展记录
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/okr/v1/progress_records`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=okr&resource=progress_record&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/progress_record/delete document }
                 *
                 * 删除OKR进展记录
                 *
                 * 根据ID删除OKR进展记录
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/okr/v1/progress_records/:progress_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=okr&resource=progress_record&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/progress_record/get document }
                 *
                 * 获取OKR进展记录
                 *
                 * 根据ID获取OKR进展记录详情
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/okr/v1/progress_records/:progress_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=okr&resource=progress_record&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/progress_record/update document }
                 *
                 * 更新OKR进展记录
                 *
                 * 根据OKR进展记录ID更新进展详情
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/okr/v1/progress_records/:progress_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 用户OKR
             */
            userOkr: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=okr&resource=user.okr&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/user-okr/list document }
                 *
                 * 获取用户的OKR列表
                 *
                 * 根据用户的id获取OKR列表
                 *
                 * 使用<md-tag mode="inline" type="token-tenant">tenant_access_token</md-tag>需要额外申请权限<md-perm ;href="https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN">以应用身份访问OKR信息</md-perm>
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/okr/v1/users/:user_id/okrs`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
         * AI能力
         */
        this.optical_char_recognition = {
            /**
             * 图片识别
             */
            image: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=optical_char_recognition&resource=image&apiName=basic_recognize&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/optical_char_recognition-v1/image/basic_recognize document }
                 *
                 * 基础图片识别 (OCR)
                 *
                 * 可识别图片中的文字，按图片中的区域划分，分段返回文本列表
                 *
                 * 单租户限流：20QPS，同租户下的应用没有限流，共享本租户的 20QPS 限流
                 */
                basicRecognize: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/optical_char_recognition/v1/image/basic_recognize`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
         * 帐号
         */
        this.passport = {
            /**
             * 登录态
             */
            session: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=passport&resource=session&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/passport-v1/session/query document }
                 *
                 * 批量获取用户登录信息（脱敏）
                 *
                 * 该接口用于查询用户的登录信息
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/passport/v1/sessions/query`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
             
             */
        this.people_admin = {};
        /**
             
             */
        this.people_bytedance = {};
        /**
         * 个人设置
         */
        this.personal_settings = {
            /**
             * 系统状态
             */
            systemStatus: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=personal_settings&resource=system_status&apiName=batch_close&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/batch_close document }
                 *
                 * 批量关闭系统状态
                 *
                 * 批量关闭用户系统状态可用
                 */
                batchClose: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/personal_settings/v1/system_statuses/:system_status_id/batch_close`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=personal_settings&resource=system_status&apiName=batch_open&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/batch_open document }
                 *
                 * 批量开启系统状态
                 *
                 * 批量开启用户系统状态可用
                 */
                batchOpen: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/personal_settings/v1/system_statuses/:system_status_id/batch_open`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=personal_settings&resource=system_status&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/create document }
                 *
                 * 创建系统状态
                 *
                 * 创建租户维度的系统状态。
                 *
                 * 注意事项:;- 操作的数据为租户维度数据，请小心操作。;- 每个租户最多创建10个系统状态。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/personal_settings/v1/system_statuses`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=personal_settings&resource=system_status&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/delete document }
                 *
                 * 删除系统状态
                 *
                 * 删除租户维度的系统状态。
                 *
                 * 注意事项：;- 操作的数据为租户维度数据，请小心操作。 ;- 删除系统状态后，并不影响正在使用该状态用户下系统状态的客户端展示。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/personal_settings/v1/system_statuses/:system_status_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/personal_settings/v1/system_statuses`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=personal_settings&resource=system_status&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/list document }
                 *
                 * 获取系统状态
                 *
                 * 获取租户下所有系统状态
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/personal_settings/v1/system_statuses`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=personal_settings&resource=system_status&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/patch document }
                 *
                 * 修改系统状态
                 *
                 * 修改租户维度系统状态。
                 *
                 * 注意事项：;- 操作的数据为租户维度数据，请小心操作。 ;- 修改系统状态后，并不影响正在使用的用户。该用户的系统状态可用时间到期后，再次被开启可用的时候，用户客户端才会同步到更新后的系统状态。
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/personal_settings/v1/system_statuses/:system_status_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
             
             */
        this.report = {};
        /**
             
             */
        this.search_in_app = {};
        /**
         * 搜索
         */
        this.search = {
            /**
             * app
             */
            app: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=search&resource=app&apiName=create&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=search&resource=app&version=v2 document }
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/search/v2/app`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 数据源
             */
            dataSource: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source&apiName=create&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source/create document }
                 *
                 * 创建数据源
                 *
                 * 创建一个数据源
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/search/v2/data_sources`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source&apiName=delete&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source/delete document }
                 *
                 * 删除数据源
                 *
                 * 删除一个已存在的数据源
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/search/v2/data_sources/:data_source_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source&apiName=get&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source/get document }
                 *
                 * 获取数据源
                 *
                 * 获取已经创建的数据源
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/search/v2/data_sources/:data_source_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/search/v2/data_sources`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source&apiName=list&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source/list document }
                 *
                 * 批量获取数据源
                 *
                 * 批量获取创建的数据源信息
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/search/v2/data_sources`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source&apiName=patch&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source/patch document }
                 *
                 * 修改数据源
                 *
                 * 更新一个已经存在的数据源
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/search/v2/data_sources/:data_source_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 数据项
             */
            dataSourceItem: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source.item&apiName=create&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source-item/create document }
                 *
                 * 索引数据项
                 *
                 * 索引一条数据记录
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/search/v2/data_sources/:data_source_id/items`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source.item&apiName=delete&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source-item/delete document }
                 *
                 * 删除数据项
                 *
                 * 删除数据项
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/search/v2/data_sources/:data_source_id/items/:item_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source.item&apiName=get&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source-item/get document }
                 *
                 * 获取数据项
                 *
                 * 获取单个数据记录
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/search/v2/data_sources/:data_source_id/items/:item_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * message
             */
            message: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=search&resource=message&apiName=create&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=search&resource=message&version=v2 document }
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/search/v2/message`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 数据范式
             */
            schema: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=search&resource=schema&apiName=create&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/schema/create document }
                 *
                 * 创建数据范式
                 *
                 * 创建一个数据范式
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/search/v2/schemas`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=search&resource=schema&apiName=delete&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/schema/delete document }
                 *
                 * 删除数据范式
                 *
                 * 删除已存在的数据范式
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/search/v2/schemas/:schema_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=search&resource=schema&apiName=get&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/schema/get document }
                 *
                 * 获取数据范式
                 *
                 * 获取单个数据范式
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/search/v2/schemas/:schema_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=search&resource=schema&apiName=patch&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/schema/patch document }
                 *
                 * 修改数据范式
                 *
                 * 修改数据范式
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/search/v2/schemas/:schema_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
             
             */
        this.security_and_compliance = {};
        /**
         * 云文档-电子表格
         */
        this.sheets = {
            /**
             * 表格
             */
            spreadsheet: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet&apiName=create&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet/create document }
                 *
                 * 创建表格
                 *
                 * 在指定目录下创建表格
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet&apiName=get&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet/get document }
                 *
                 * 获取电子表格信息
                 *
                 * 该接口用于获取电子表格的基础信息。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet&apiName=patch&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet/patch document }
                 *
                 * 修改电子表格属性
                 *
                 * 该接口用于修改电子表格的属性
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 筛选
             */
            spreadsheetSheetFilter: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter&apiName=create&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/create document }
                 *
                 * 创建筛选
                 *
                 * 在子表内创建筛选。
                 *
                 * 参数值可参考[筛选指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/filter-user-guide)
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter&apiName=delete&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/delete document }
                 *
                 * 删除筛选
                 *
                 * 删除子表的筛选
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter&apiName=get&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/get document }
                 *
                 * 获取筛选
                 *
                 * 获取子表的详细筛选信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter&apiName=update&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/update document }
                 *
                 * 更新筛选
                 *
                 * 更新子表筛选范围中的列筛选条件。
                 *
                 * 参数值可参考[筛选指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/filter-user-guide)
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 筛选条件
             */
            spreadsheetSheetFilterViewCondition: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view.condition&apiName=create&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/create document }
                 *
                 * 创建筛选条件
                 *
                 * 在筛选视图的筛选范围的某一列创建筛选条件。
                 *
                 * 筛选条件参考 [筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view.condition&apiName=delete&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/delete document }
                 *
                 * 删除筛选条件
                 *
                 * 删除筛选视图的筛选范围某一列的筛选条件。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions/:condition_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view.condition&apiName=get&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/get document }
                 *
                 * 获取筛选条件
                 *
                 * 获取筛选视图某列的筛选条件信息。
                 *
                 * 筛选条件含义参考 [筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions/:condition_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view.condition&apiName=query&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/query document }
                 *
                 * 查询筛选条件
                 *
                 * 查询一个筛选视图的所有筛选条件，返回筛选视图的筛选范围内的筛选条件。
                 *
                 * 筛选条件含义可参考 [筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions/query`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view.condition&apiName=update&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/update document }
                 *
                 * 更新筛选条件
                 *
                 * 更新筛选视图范围的某列的筛选条件，condition id 即为列的字母号。
                 *
                 * 筛选条件参数可参考 [筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions/:condition_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 筛选视图
             */
            spreadsheetSheetFilterView: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view&apiName=create&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/create document }
                 *
                 * 创建筛选视图
                 *
                 * 根据传入的参数创建一个筛选视图。Id 和 名字可选，不填的话会默认生成；range 必填。Id 长度为10，由 0-9、a-z、A-Z 组合生成。名字长度不超过100。单个子表内的筛选视图个数不超过 150。
                 *
                 * 筛选范围的设置参考：[筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view&apiName=delete&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/delete document }
                 *
                 * 删除筛选视图
                 *
                 * 删除指定 id 对应的筛选视图。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view&apiName=get&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/get document }
                 *
                 * 获取筛选视图
                 *
                 * 获取指定筛选视图 id 的名字和筛选范围。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view&apiName=patch&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/patch document }
                 *
                 * 更新筛选视图
                 *
                 * 更新筛选视图的名字或者筛选范围。名字长度不超过100，不能重复即子表内唯一；筛选范围不超过子表的最大范围。
                 *
                 * 筛选范围的设置参考：[筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view&apiName=query&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/query document }
                 *
                 * 查询筛选视图
                 *
                 * 查询子表内所有的筛选视图基本信息，包括 id、name 和 range
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/query`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 单元格
             */
            spreadsheetSheet: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet&apiName=find&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/find document }
                 *
                 * 查找单元格
                 *
                 * 在指定范围内查找符合查找条件的单元格。
                 */
                find: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/find`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet&apiName=get&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/get document }
                 *
                 * 查询工作表
                 *
                 * 该接口用于通过工作表ID查询工作表属性信息。
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet&apiName=move_dimension&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/move_dimension document }
                 *
                 * 移动行列
                 *
                 * 该接口用于移动行列，行列被移动到目标位置后，原本在目标位置的行列会对应右移或下移。
                 */
                moveDimension: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/move_dimension`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet&apiName=query&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/query document }
                 *
                 * 获取工作表
                 *
                 * 该接口用于获取电子表格下所有工作表及其属性。
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/query`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet&apiName=replace&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/replace document }
                 *
                 * 替换单元格
                 *
                 * 按照指定的条件查找子表的某个范围内的数据符合条件的单元格并替换值，返回替换成功的单元格位置。一次请求最多允许替换5000个单元格，如果超过请将range缩小范围再操作。请求体中的 range、find、replaccement 字段必填。
                 */
                replace: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/replace`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 浮动图片
             */
            spreadsheetSheetFloatImage: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.float_image&apiName=create&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/create document }
                 *
                 * 创建浮动图片
                 *
                 * 根据传入的参数创建一张浮动图片。Float_image_token （[上传图片至表格后得到](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_all)）和range（只支持一个单元格） 必填。Float_image_id 可选，不填的话会默认生成，长度为10，由 0-9、a-z、A-Z 组合生成。表格内不重复的图片（浮动图片+单元格图片）总数不超过4000。width 和 height 为图片展示的宽高，可选，不填的话会使用图片的真实宽高。offset_x 和 offset_y 为图片左上角距离所在单元格左上角的偏移，可选，默认为 0。
                 *
                 * 浮动图片的设置参考：[浮动图片指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/float-image-user-guide)
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.float_image&apiName=delete&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/delete document }
                 *
                 * 删除浮动图片
                 *
                 * 删除 float_image_id 对应的浮动图片。
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images/:float_image_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.float_image&apiName=get&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/get document }
                 *
                 * 获取浮动图片
                 *
                 * 根据 float_image_id 获取对应浮动图片的信息。
                 *
                 * 浮动图片参考：[浮动图片指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/float-image-user-guide)
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images/:float_image_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.float_image&apiName=patch&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/patch document }
                 *
                 * 更新浮动图片
                 *
                 * 更新已有的浮动图片位置和宽高，包括 range、width、height、offset_x 和 offset_y，不包括 float_image_id 和 float_image_token。
                 *
                 * 浮动图片更新参考：[浮动图片指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/float-image-user-guide)
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images/:float_image_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.float_image&apiName=query&version=v3 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/query document }
                 *
                 * 查询浮动图片
                 *
                 * 返回子表内所有的浮动图片信息。
                 *
                 * 浮动图片参考：[浮动图片指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/float-image-user-guide)
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images/query`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
         * AI能力
         */
        this.speech_to_text = {
            /**
             * 语音识别
             */
            speech: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=speech_to_text&resource=speech&apiName=file_recognize&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/speech_to_text-v1/speech/file_recognize document }
                 *
                 * 语音文件识别 (ASR)
                 *
                 * 语音文件识别接口，上传整段语音文件进行一次性识别。接口适合 60 秒以内音频识别
                 *
                 * 单租户限流：20QPS，同租户下的应用没有限流，共享本租户的 20QPS 限流
                 */
                fileRecognize: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/speech_to_text/v1/speech/file_recognize`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=speech_to_text&resource=speech&apiName=stream_recognize&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/speech_to_text-v1/speech/stream_recognize document }
                 *
                 * 语音流式识别 (ASR)
                 *
                 * 语音流式接口，将整个音频文件分片进行传入模型。能够实时返回数据。建议每个音频分片的大小为 100-200ms
                 *
                 * 单租户限流：20 路（一个 stream_id 称为一路会话），同租户下的应用没有限流，共享本租户的 20路限流
                 */
                streamRecognize: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/speech_to_text/v1/speech/stream_recognize`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
             
             */
        this.spend = {};
        /**
             
             */
        this.sup_project = {};
        /**
         * 任务
         */
        this.task = {
            /**
             * 任务
             */
            task: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=batch_delete_collaborator&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/batch_delete_collaborator document }
                 *
                 * 批量删除执行者
                 *
                 * 该接口用于批量删除执行者
                 */
                batchDeleteCollaborator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/batch_delete_collaborator`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=batch_delete_follower&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/batch_delete_follower document }
                 *
                 * 批量删除关注人
                 *
                 * 该接口用于批量删除关注人
                 */
                batchDeleteFollower: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/batch_delete_follower`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=complete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/complete document }
                 *
                 * 完成任务
                 *
                 * 该接口用于将任务状态修改为“已完成”。;完成任务是指整个任务全部完成，而不支持执行者分别完成任务，执行成功后，任务对所有关联用户都变为完成状态。
                 */
                complete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/complete`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/create document }
                 *
                 * 创建任务
                 *
                 * 该接口可以创建一个任务，支持填写任务的基本信息，包括任务的标题，描述及协作者等。;在此基础上，创建任务时可以设置截止时间和重复规则，将任务设置为定期执行的重复任务。通过添加协作者，则可以让其他用户协同完成该任务。;此外，接口也提供了一些支持自定义内容的字段，调用方可以实现定制化效果，如完成任务后跳转到指定结束界面。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/delete document }
                 *
                 * 删除任务
                 *
                 * 该接口用于删除任务
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/get document }
                 *
                 * 获取任务详情
                 *
                 * 该接口用于获取任务详情，包括任务标题、描述、时间、来源等信息
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/list document }
                 *
                 * 获取任务列表
                 *
                 * 以分页的方式获取任务列表。当使用user_access_token时，获取与该用户身份相关的所有任务。当使用tenant_access_token时，获取以该应用身份通过“创建任务“接口创建的所有任务（并非获取该应用所在租户下所有用户创建的任务）。;本接口支持通过任务创建时间以及任务的完成状态对任务进行过滤。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/patch document }
                 *
                 * 更新任务
                 *
                 * 该接口用于修改任务的标题、描述、时间、来源等相关信息
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=uncomplete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/uncomplete document }
                 *
                 * 取消完成任务
                 *
                 * 该接口用于取消任务的已完成状态
                 */
                uncomplete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/uncomplete`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 执行者
             */
            taskCollaborator: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.collaborator&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-collaborator/create document }
                 *
                 * 新增执行者
                 *
                 * 该接口用于新增任务执行者，一次性可以添加多个执行者。;只有任务的创建者和执行者才能添加执行者，关注人无权限添加。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/collaborators`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.collaborator&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-collaborator/delete document }
                 *
                 * 删除执行者
                 *
                 * 该接口用于删除任务执行者
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/collaborators/:collaborator_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/collaborators`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.collaborator&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-collaborator/list document }
                 *
                 * 获取一个任务的执行者列表
                 *
                 * 该接口用于查询任务执行者列表，支持分页，最大值为50
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/collaborators`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 评论
             */
            taskComment: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.comment&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/create document }
                 *
                 * 创建评论
                 *
                 * 该接口用于创建和回复任务的评论。当parent_id字段为0时，为创建评论；当parent_id不为0时，为回复某条评论
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/comments`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.comment&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/delete document }
                 *
                 * 删除评论
                 *
                 * 该接口用于通过评论ID删除评论
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/comments/:comment_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.comment&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/get document }
                 *
                 * 获取评论详情
                 *
                 * 该接口用于通过评论ID获取评论详情
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/comments/:comment_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/comments`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.comment&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/list document }
                 *
                 * 获取评论列表
                 *
                 * 该接口用于查询任务评论列表，支持分页，最大值为100
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/comments`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.comment&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/update document }
                 *
                 * 更新评论
                 *
                 * 该接口用于更新评论内容
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/comments/:comment_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 关注人
             */
            taskFollower: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.follower&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-follower/create document }
                 *
                 * 新增关注人
                 *
                 * 该接口用于创建任务关注人。可以一次性添加多位关注人。关注人ID要使用表示用户的ID。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/followers`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.follower&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-follower/delete document }
                 *
                 * 删除关注人
                 *
                 * 该接口用于删除任务关注人
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/followers/:follower_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/followers`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.follower&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-follower/list document }
                 *
                 * 获取任务关注人列表
                 *
                 * 该接口用于查询任务关注人列表，支持分页，最大值为50
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/followers`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 提醒
             */
            taskReminder: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.reminder&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-reminder/create document }
                 *
                 * 新增提醒时间
                 *
                 * 该接口用于创建任务的提醒时间。提醒时间在截止时间基础上做偏移，但是偏移后的结果不能早于当前时间。
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/reminders`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.reminder&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-reminder/delete document }
                 *
                 * 删除提醒时间
                 *
                 * 删除提醒时间，返回结果状态
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/reminders/:reminder_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/reminders`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.reminder&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-reminder/list document }
                 *
                 * 查询提醒时间列表
                 *
                 * 返回提醒时间列表，支持分页，最大值为50
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/task/v1/tasks/:task_id/reminders`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
         * 企业信息
         */
        this.tenant = {
            /**
             * tenant.product_assign_info
             */
            tenantProductAssignInfo: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=tenant&resource=tenant.product_assign_info&apiName=query&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=query&project=tenant&resource=tenant.product_assign_info&version=v2 document }
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/tenant/v2/tenant/assign_info_list/query`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 企业信息
             */
            tenant: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=tenant&resource=tenant&apiName=query&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/tenant-v2/tenant/query document }
                 *
                 * 获取企业信息
                 *
                 * 获取企业名称、企业编号等企业信息
                 *
                 * 如果ISV应用是企业创建时默认安装，并且180天内企业未打开或使用过此应用，则无法通过此接口获取到企业信息。
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/tenant/v2/tenant/query`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
         * AI能力
         */
        this.translation = {
            /**
             * 文本
             */
            text: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=translation&resource=text&apiName=detect&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/translation-v1/text/detect document }
                 *
                 * 文本语种识别
                 *
                 * 机器翻译 (MT)，支持 100 多种语言识别，返回符合 ISO 639-1 标准
                 *
                 * 单租户限流：20QPS，同租户下的应用没有限流，共享本租户的 20QPS 限流
                 */
                detect: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/translation/v1/text/detect`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=translation&resource=text&apiName=translate&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/translation-v1/text/translate document }
                 *
                 * 文本翻译
                 *
                 * 机器翻译 (MT)，支持以下语种互译：;"zh": 汉语；;"zh-Hant": 繁体汉语；;"en": 英语；;"ja": 日语；;"ru": 俄语；;"de": 德语；;"fr": 法语；;"it": 意大利语；;"pl": 波兰语；;"th": 泰语；;"hi": 印地语；;"id": 印尼语；;"es": 西班牙语；;"pt": 葡萄牙语；;"ko": 朝鲜语；;"vi": 越南语；
                 *
                 * 单租户限流：20QPS，同租户下的应用没有限流，共享本租户的 20QPS 限流
                 */
                translate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/translation/v1/text/translate`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
             
             */
        this.unified_kms_log = {};
        /**
         * 视频会议
         */
        this.vc = {
            /**
             * 告警中心
             */
            alert: {
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/vc/v1/alerts`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=alert&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/alert/list document }
                 *
                 * 获取告警记录
                 *
                 * 获取特定条件下租户的设备告警记录
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/alerts`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 导出
             */
            export: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=export&apiName=download&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/export/download document }
                 *
                 * 下载导出文件
                 *
                 * 下载导出文件
                 */
                download: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/exports/download`, path),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return {
                        writeFile: (filePath) => __awaiter(this, void 0, void 0, function* () {
                            return new Promise((resolve, reject) => {
                                const writableStream = fs.createWriteStream(filePath);
                                writableStream.on("finish", () => {
                                    resolve(filePath);
                                });
                                writableStream.on("error", (e) => {
                                    reject(e);
                                });
                                res.pipe(writableStream);
                            });
                        }),
                    };
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=export&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/export/get document }
                 *
                 * 查询导出任务结果
                 *
                 * 查看异步导出的进度
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/exports/:task_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=export&apiName=meeting_list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/export/meeting_list document }
                 *
                 * 导出会议明细
                 *
                 * 导出会议明细，具体权限要求请参考「导出概述」
                 */
                meetingList: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/exports/meeting_list`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=export&apiName=participant_list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/export/participant_list document }
                 *
                 * 导出参会人明细
                 *
                 * 导出某个会议的参会人详情列表，具体权限要求请参考「导出概述」
                 */
                participantList: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/exports/participant_list`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=export&apiName=participant_quality_list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/export/participant_quality_list document }
                 *
                 * 导出参会人会议质量数据
                 *
                 * 导出某场会议某个参会人的音视频&共享质量数据;，具体权限要求请参考「导出概述」
                 */
                participantQualityList: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/exports/participant_quality_list`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=export&apiName=resource_reservation_list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/export/resource_reservation_list document }
                 *
                 * 导出会议室预定数据
                 *
                 * 导出会议室预定数据，具体权限要求请参考「导出概述」
                 */
                resourceReservationList: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/exports/resource_reservation_list`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 会议
             */
            meeting: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting&apiName=end&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/end document }
                 *
                 * 结束会议
                 *
                 * 结束一个进行中的会议
                 *
                 * 会议正在进行中，且操作者须具有相应的权限（如果操作者为用户，必须是会中当前主持人）
                 */
                end: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/meetings/:meeting_id/end`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/get document }
                 *
                 * 获取会议详情
                 *
                 * 获取一个会议的详细数据
                 *
                 * 只能获取归属于自己的会议，支持查询最近90天内的会议
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/meetings/:meeting_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting&apiName=invite&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/invite document }
                 *
                 * 邀请参会人
                 *
                 * 邀请参会人进入会议
                 *
                 * 发起邀请的操作者必须具有相应的权限（如果操作者为用户，则必须在会中），如果会议被锁定、或参会人数如果达到上限，则会邀请失败
                 */
                invite: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/meetings/:meeting_id/invite`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting&apiName=kickout&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/kickout document }
                 *
                 * 移除参会人
                 *
                 * 将参会人从会议中移除
                 */
                kickout: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/meetings/:meeting_id/kickout`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listByNoWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/vc/v1/meetings/list_by_no`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting&apiName=list_by_no&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/list_by_no document }
                 *
                 * 获取与会议号相关联的会议列表
                 *
                 * 获取指定时间范围（90天内)会议号关联的会议简要信息列表
                 */
                listByNo: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/meetings/list_by_no`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting&apiName=set_host&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/set_host document }
                 *
                 * 设置主持人
                 *
                 * 设置会议的主持人
                 *
                 * 发起设置主持人的操作者必须具有相应的权限（如果操作者为用户，必须是会中当前主持人）；该操作使用CAS并发安全机制，需传入会中当前主持人，如果操作失败可使用返回的最新数据重试
                 */
                setHost: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/meetings/:meeting_id/set_host`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 录制
             */
            meetingRecording: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting.recording&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-recording/get document }
                 *
                 * 获取录制文件
                 *
                 * 获取一个会议的录制文件。
                 *
                 * 会议结束后并且收到了"录制完成"的事件方可获取录制文件；只有会议owner（通过开放平台预约的会议即为预约人）有权限获取；录制时间太短(&lt;5s)有可能无法生成录制文件
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/meetings/:meeting_id/recording`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting.recording&apiName=set_permission&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-recording/set_permission document }
                 *
                 * 授权录制文件
                 *
                 * 将一个会议的录制文件授权给组织、用户或公开到公网
                 *
                 * 会议结束后并且收到了"录制完成"的事件方可进行授权；会议owner（通过开放平台预约的会议即为预约人）才有权限操作
                 */
                setPermission: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/meetings/:meeting_id/recording/set_permission`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting.recording&apiName=start&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-recording/start document }
                 *
                 * 开始录制
                 *
                 * 在会议中开始录制。
                 *
                 * 会议正在进行中，且操作者具有相应权限（如果操作者为用户，必须是会中当前主持人）
                 */
                start: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/meetings/:meeting_id/recording/start`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting.recording&apiName=stop&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-recording/stop document }
                 *
                 * 停止录制
                 *
                 * 在会议中停止录制。
                 *
                 * 会议正在录制中，且操作者具有相应权限（如果操作者为用户，必须是会中当前主持人）
                 */
                stop: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/meetings/:meeting_id/recording/stop`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * meeting_list
             */
            meetingList: {
                getWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/vc/v1/meeting_list`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting_list&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=vc&resource=meeting_list&version=v1 document }
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/meeting_list`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * participant_list
             */
            participantList: {
                getWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/vc/v1/participant_list`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=participant_list&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=vc&resource=participant_list&version=v1 document }
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/participant_list`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * participant_quality_list
             */
            participantQualityList: {
                getWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/vc/v1/participant_quality_list`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=participant_quality_list&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=vc&resource=participant_quality_list&version=v1 document }
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/participant_quality_list`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 会议报告
             */
            report: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=report&apiName=get_daily&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/report/get_daily document }
                 *
                 * 获取会议报告
                 *
                 * 获取一段时间内组织的每日会议使用报告。
                 *
                 * 支持最近90天内的数据查询
                 */
                getDaily: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/reports/get_daily`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=report&apiName=get_top_user&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/report/get_top_user document }
                 *
                 * 获取top用户列表
                 *
                 * 获取一段时间内组织内会议使用的top用户列表。
                 *
                 * 支持最近90天内的数据查询；默认返回前10位，最多可查询前100位
                 */
                getTopUser: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/reports/get_top_user`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 预约
             */
            reserve: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve&apiName=apply&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/apply document }
                 *
                 * 预约会议
                 *
                 * 创建一个会议预约。
                 *
                 * 支持预约最近30天内的会议（到期时间距离当前时间不超过30天），预约到期后会议号将被释放，如需继续使用可通过"更新预约"接口进行续期；预约会议时可配置参会人在会中的权限，以达到控制会议的目的
                 */
                apply: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/reserves/apply`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/delete document }
                 *
                 * 删除预约
                 *
                 * 删除一个预约
                 *
                 * 只能删除归属于自己的预约；删除后数据不可恢复
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/reserves/:reserve_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/get document }
                 *
                 * 获取预约
                 *
                 * 获取一个预约的详情
                 *
                 * 只能获取归属于自己的预约
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/reserves/:reserve_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve&apiName=get_active_meeting&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/get_active_meeting document }
                 *
                 * 获取活跃会议
                 *
                 * 获取一个预约的当前活跃会议
                 *
                 * 只能获取归属于自己的预约的活跃会议（一个预约最多有一个正在进行中的会议）
                 */
                getActiveMeeting: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/reserves/:reserve_id/get_active_meeting`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/update document }
                 *
                 * 更新预约
                 *
                 * 更新一个预约
                 *
                 * 只能更新归属于自己的预约，不需要更新的字段不传（如果传空则会被更新为空）；可用于续期操作，到期时间距离当前时间不超过30天
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/reserves/:reserve_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * reserve_config.admin
             */
            reserveConfigAdmin: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve_config.admin&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=vc&resource=reserve_config.admin&version=v1 document }
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/reserve_configs/:reserve_config_id/admin`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve_config.admin&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=vc&resource=reserve_config.admin&version=v1 document }
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/reserve_configs/:reserve_config_id/admin`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * reserve_config.disable_inform
             */
            reserveConfigDisableInform: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve_config.disable_inform&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=vc&resource=reserve_config.disable_inform&version=v1 document }
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/reserve_configs/:reserve_config_id/disable_inform`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve_config.disable_inform&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=vc&resource=reserve_config.disable_inform&version=v1 document }
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/reserve_configs/:reserve_config_id/disable_inform`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * reserve_config.form
             */
            reserveConfigForm: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve_config.form&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=vc&resource=reserve_config.form&version=v1 document }
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/reserve_configs/:reserve_config_id/form`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve_config.form&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=patch&project=vc&resource=reserve_config.form&version=v1 document }
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/reserve_configs/:reserve_config_id/form`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * reserve_config
             */
            reserveConfig: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve_config&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve_config/patch document }
                 *
                 * 更新会议室预定范围
                 *
                 * 更新会议室预定范围
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/reserve_configs/:reserve_config_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve_config&apiName=reserve_scope&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve_config/reserve_scope document }
                 *
                 * 获取会议室预定范围
                 *
                 * 获取会议室预定范围
                 */
                reserveScope: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/reserve_configs/reserve_scope`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * resource_reservation_list
             */
            resourceReservationList: {
                getWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/vc/v1/resource_reservation_list`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=resource_reservation_list&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=get&project=vc&resource=resource_reservation_list&version=v1 document }
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/resource_reservation_list`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 会议室
             */
            room: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room/create document }
                 *
                 * 创建会议室
                 *
                 * 该接口用于创建会议室
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/rooms`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room/delete document }
                 *
                 * 删除会议室
                 *
                 * 该接口可以用来删除某个会议室
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/rooms/:room_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room/get document }
                 *
                 * 查询会议室详情
                 *
                 * 该接口可以使用会议室ID查询会议室详情
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/rooms/:room_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/vc/v1/rooms`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room/list document }
                 *
                 * 查询会议室列表
                 *
                 * 该接口可以用来查询某个会议室层级下会议室列表
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/rooms`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room&apiName=mget&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room/mget document }
                 *
                 * 批量查询会议室详情
                 *
                 * 该接口可以使用会议室ID批量查询会议室详情
                 */
                mget: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/rooms/mget`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room/patch document }
                 *
                 * 更新会议室
                 *
                 * 该接口可以用来更新某个会议室的信息
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/rooms/:room_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room&apiName=search&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room/search document }
                 *
                 * 搜索会议室
                 *
                 * 该接口可以用来搜索会议室，支持使用关键词进行搜索，也支持使用自定义会议室ID进行查询
                 */
                search: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/rooms/search`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * room_config
             */
            roomConfig: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_config&apiName=query&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=query&project=vc&resource=room_config&version=v1 document }
                 */
                query: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/room_configs/query`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_config&apiName=set&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=set&project=vc&resource=room_config&version=v1 document }
                 */
                set: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/room_configs/set`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_config&apiName=set_checkboard_access_code&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=set_checkboard_access_code&project=vc&resource=room_config&version=v1 document }
                 */
                setCheckboardAccessCode: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/room_configs/set_checkboard_access_code`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_config&apiName=set_room_access_code&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=set_room_access_code&project=vc&resource=room_config&version=v1 document }
                 */
                setRoomAccessCode: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/room_configs/set_room_access_code`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 会议室层级
             */
            roomLevel: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_level&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room_level/create document }
                 *
                 * 创建会议室层级
                 *
                 * 该接口用于创建会议室层级
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/room_levels`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_level&apiName=del&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room_level/del document }
                 *
                 * 删除会议室层级
                 *
                 * 该接口可以用来删除某个会议室层级
                 */
                del: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/room_levels/del`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_level&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room_level/get document }
                 *
                 * 查询会议室层级详情
                 *
                 * 该接口可以使用会议室层级ID查询会议室层级详情
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/room_levels/:room_level_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/vc/v1/room_levels`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_level&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room_level/list document }
                 *
                 * 查询会议室层级列表
                 *
                 * 该接口用来查询某个会议室层级下的子层级列表
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/room_levels`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_level&apiName=mget&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room_level/mget document }
                 *
                 * 批量查询会议室层级详情
                 *
                 * 该接口可以使用会议室层级ID批量查询会议室层级详情
                 */
                mget: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/room_levels/mget`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_level&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room_level/patch document }
                 *
                 * 更新会议室层级
                 *
                 * 该接口可以用来更新某个会议室层级的信息
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/room_levels/:room_level_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_level&apiName=search&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room_level/search document }
                 *
                 * 搜索会议室层级
                 *
                 * 该接口可以用来搜索会议室层级，支持使用自定义会议室层级ID进行查询
                 */
                search: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/room_levels/search`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 会议室配置
             */
            scopeConfig: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=scope_config&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/scope_config/create document }
                 *
                 * 设置会议室配置
                 *
                 * 该接口可以用来设置某个会议层级范围下或者某个会议室的配置
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/scope_config`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=vc&resource=scope_config&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/scope_config/get document }
                 *
                 * 查询会议室配置
                 *
                 * 该接口可以用来查询某个会议层级范围下或者某个会议室的配置
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/vc/v1/scope_config`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
         * 云文档-知识库
         */
        this.wiki = {
            /**
             * 知识空间
             */
            space: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space&apiName=create&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/create document }
                 *
                 * 创建知识空间
                 *
                 * 此接口用于创建知识空间
                 *
                 * 此接口不支持tenant access token（应用身份访问）
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/wiki/v2/spaces`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space&apiName=get&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get document }
                 *
                 * 获取知识空间信息
                 *
                 * 此接口用于根据知识空间ID来查询知识空间的信息。;;空间类型（type）：;- 个人空间：归个人管理。一人仅可拥有一个个人空间，无法添加其他管理员。;- 团队空间：归团队（多人)管理，可添加多个管理员。;;空间可见性（visibility）：;- 公开空间：租户所有用户可见，默认为成员权限。无法额外添加成员，但可以添加管理员。;- 私有空间：仅对知识空间管理员、成员可见，需要手动添加管理员、成员。
                 *
                 * 本接口要求知识库权限：;- 需要为知识空间成员（管理员）
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/wiki/v2/spaces/:space_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space&apiName=get_node&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node document }
                 *
                 * 获取知识空间节点信息
                 *
                 * 获取知识空间节点信息
                 *
                 * 知识库权限要求，当前使用的 access token 所代表的应用或用户拥有：;- 节点阅读权限
                 */
                getNode: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/wiki/v2/spaces/get_node`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/wiki/v2/spaces`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space&apiName=list&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/list document }
                 *
                 * 获取知识空间列表
                 *
                 * 此接口用于获取有权限访问的知识空间列表。;;此接口为分页接口。由于权限过滤，可能返回列表为空，但分页标记（has_more）为true，可以继续分页请求。;;对于知识空间各项属性描述请参阅[获取知识空间信息](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get)
                 *
                 * 使用tenant access token调用时，请确认应用/机器人拥有部分知识空间的访问权限，否则返回列表容易为空。
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/wiki/v2/spaces`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 空间成员
             */
            spaceMember: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.member&apiName=create&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-member/create document }
                 *
                 * 添加知识空间成员
                 *
                 * 添加知识空间成员或管理员。
                 *
                 * 知识空间具有[类型](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-overview)和[可见性](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-overview)的概念。不同的类型或可见性可以对本操作做出限制：;- 可见性限制：公开知识空间（visibility为public）对租户所有用户可见，因此不支持再添加成员，但可以添加管理员。;- 类型限制：个人知识空间 （type为person）为个人管理的知识空间，不支持添加其他管理员（包括应用/机器人）。但可以添加成员。;;;知识空间权限要求，当前使用的 access token 所代表的应用或用户拥有：;- 为知识空间管理员
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/wiki/v2/spaces/:space_id/members`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.member&apiName=delete&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-member/delete document }
                 *
                 * 删除知识空间成员
                 *
                 * 此接口用于删除知识空间成员或管理员。
                 *
                 * 知识空间具有[类型](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-overview)和[可见性](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-overview)的概念。不同的类型或可见性可以对本操作做出限制：;- 可见性限制：公开知识空间（visibility为public）对租户所有用户可见，因此不支持再删除成员，但可以删除管理员。;- 类型限制：个人知识空间 （type为person）为个人管理的知识空间，不支持删除管理员。但可以删除成员。;;;知识空间权限要求，当前使用的 access token 所代表的应用或用户拥有：;- 为知识空间管理员
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/wiki/v2/spaces/:space_id/members/:member_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 节点
             */
            spaceNode: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.node&apiName=copy&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/copy document }
                 *
                 * 创建知识空间节点副本
                 *
                 * 此接口用于在知识空间创建节点副本到指定位置。
                 */
                copy: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes/:node_token/copy`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.node&apiName=create&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/create document }
                 *
                 * 创建知识空间节点
                 *
                 * 此接口用于在知识节点里创建[节点](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-overview)到指定位置。
                 *
                 * 知识空间权限要求，当前使用的 access token 所代表的应用或用户拥有：;- **父节点**容器编辑权限
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.node&apiName=list&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/list document }
                 *
                 * 获取知识空间子节点列表
                 *
                 * 此接口用于分页获取Wiki节点的子节点列表。;;此接口为分页接口。由于权限过滤，可能返回列表为空，但分页标记（has_more）为true，可以继续分页请求。
                 *
                 * 知识库权限要求，当前使用的 access token 所代表的应用或用户拥有：;- 父节点阅读权限
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.node&apiName=move&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/move document }
                 *
                 * 移动知识空间节点
                 *
                 * 此方法用于在Wiki内移动节点，支持跨知识空间移动。如果有子节点，会携带子节点一起移动。
                 *
                 * 知识库权限要求：;- 节点编辑权限;- 原父节点容器编辑权限;- 目的父节点容器编辑权限
                 */
                move: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes/:node_token/move`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.node&apiName=move_docs_to_wiki&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/move_docs_to_wiki document }
                 *
                 * 移动云空间文档至知识空间
                 *
                 * 该接口允许移动云空间文档至知识空间，并挂载在指定位置
                 *
                 * 此接口为异步接口。若移动已完成（或文档已在Wiki中），则直接返回结果（Wiki token）。若尚未完成，则返回task id。请使用[获取任务结果](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/task/get)接口进行查询。;;知识库权限要求，当前使用的 access token 所代表的应用或用户拥有：;- 文档可管理权限;- 原文件夹编辑权限;- 目标父节点容器编辑权限
                 *
                 * ### 移动操作 ###;移动后，文档将从“我的空间”或“共享空间”转移至“知识库”后，无法从下列入口查看到文档：;- 云空间主页：快速访问;- 我的空间;- 共享空间;;### 权限变更 ###;移动后，文档会向所有可查看“页面树”的用户显示，默认继承父页面的权限设置。;</md-alert
                 */
                moveDocsToWiki: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes/move_docs_to_wiki`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.node&apiName=update_title&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/update_title document }
                 *
                 * 更新知识空间节点标题
                 *
                 * 此接口用于更新节点标题
                 *
                 * 此接口目前仅支持文档(doc)、新版文档(docx)和快捷方式。
                 */
                updateTitle: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes/:node_token/update_title`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 空间设置
             */
            spaceSetting: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.setting&apiName=update&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-setting/update document }
                 *
                 * 更新知识空间设置
                 *
                 * 根据space_id更新知识空间公共设置
                 *
                 * 知识库权限要求：;- 为知识空间管理员
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/wiki/v2/spaces/:space_id/setting`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 云文档
             */
            task: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=task&apiName=get&version=v2 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/task/get document }
                 *
                 * 获取任务结果
                 *
                 * 该方法用于获取wiki异步任务的结果
                 *
                 * 知识库权限要求，当前 access token 所代表的用户或应用（机器人）：;- 为任务创建者
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/wiki/v2/tasks/:task_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
             
             */
        this.workplace = {
            /**
             * custom_workplace_access_data
             */
            customWorkplaceAccessData: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=workplace&resource=custom_workplace_access_data&apiName=search&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=workplace&resource=custom_workplace_access_data&version=v1 document }
                 */
                search: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/workplace/v1/custom_workplace_access_data/search`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * workplace_access_data
             */
            workplaceAccessData: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=workplace&resource=workplace_access_data&apiName=search&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=workplace&resource=workplace_access_data&version=v1 document }
                 */
                search: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/workplace/v1/workplace_access_data/search`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * workplace_block_access_data
             */
            workplaceBlockAccessData: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=workplace&resource=workplace_block_access_data&apiName=search&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=search&project=workplace&resource=workplace_block_access_data&version=v1 document }
                 */
                search: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/workplace/v1/workplace_block_access_data/search`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
    }
}

const defaultLogger = {
    error: (...msg) => {
        console.log('[error]:', ...msg);
    },
    warn: (...msg) => {
        console.warn('[warn]:', ...msg);
    },
    info: (...msg) => {
        console.info('[info]:', ...msg);
    },
    debug: (...msg) => {
        console.debug('[debug]:', ...msg);
    },
    trace: (...msg) => {
        console.trace('[trace]:', ...msg);
    },
};

class LoggerProxy {
    constructor(level, logger) {
        this.level = level;
        this.logger = logger;
    }
    error(...msg) {
        if (this.level >= LoggerLevel.error) {
            this.logger.error(msg);
        }
    }
    warn(...msg) {
        if (this.level >= LoggerLevel.warn) {
            this.logger.warn(msg);
        }
    }
    info(...msg) {
        if (this.level >= LoggerLevel.info) {
            this.logger.info(msg);
        }
    }
    debug(...msg) {
        if (this.level >= LoggerLevel.debug) {
            this.logger.debug(msg);
        }
    }
    trace(...msg) {
        if (this.level >= LoggerLevel.trace) {
            this.logger.trace(msg);
        }
    }
}

class AppTicketManager {
    constructor(params) {
        this.appId = params.appId;
        this.appSecret = params.appSecret;
        this.cache = params.cache;
        this.domain = params.domain;
        this.logger = params.logger;
        this.appType = params.appType;
        this.httpInstance = params.httpInstance;
        this.logger.debug('app ticket manager is ready');
        this.checkAppTicket();
    }
    checkAppTicket() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (this.appType === AppType.ISV) {
                const appTicket = yield ((_a = this.cache) === null || _a === void 0 ? void 0 : _a.get(CAppTicket, {
                    namespace: this.appId
                }));
                if (!appTicket) {
                    this.requestAppTicket();
                }
            }
        });
    }
    requestAppTicket() {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.debug('request app ticket');
            yield this.httpInstance
                .post(`${this.domain}/open-apis/auth/v3/app_ticket/resend`, {
                app_id: this.appId,
                app_secret: this.appSecret,
            })
                .catch((e) => {
                this.logger.error(e);
            });
        });
    }
    getAppTicket() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const appTicket = yield ((_a = this.cache) === null || _a === void 0 ? void 0 : _a.get(CAppTicket, {
                namespace: this.appId
            }));
            if (appTicket) {
                this.logger.debug('use cache app ticket');
                return appTicket;
            }
            yield this.requestAppTicket();
            return undefined;
        });
    }
}

class TokenManager {
    constructor(params) {
        this.appId = params.appId;
        this.appSecret = params.appSecret;
        this.cache = params.cache;
        this.domain = params.domain;
        this.logger = params.logger;
        this.appType = params.appType;
        this.httpInstance = params.httpInstance;
        this.appTicketManager = new AppTicketManager({
            appId: this.appId,
            appSecret: this.appSecret,
            cache: this.cache,
            domain: this.domain,
            logger: this.logger,
            appType: this.appType,
            httpInstance: this.httpInstance,
        });
        this.logger.debug('token manager is ready');
    }
    getCustomTenantAccessToken() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const cachedTenantAccessToken = yield ((_a = this.cache) === null || _a === void 0 ? void 0 : _a.get(CTenantAccessToken, {
                namespace: this.appId
            }));
            if (cachedTenantAccessToken) {
                this.logger.debug('use cache token');
                return cachedTenantAccessToken;
            }
            this.logger.debug('request token');
            // @ts-ignore
            const { tenant_access_token, expire } = yield this.httpInstance
                .post(`${this.domain}/open-apis/auth/v3/tenant_access_token/internal`, {
                app_id: this.appId,
                app_secret: this.appSecret,
            })
                .catch((e) => {
                this.logger.error(e);
            });
            yield ((_b = this.cache) === null || _b === void 0 ? void 0 : _b.set(CTenantAccessToken, tenant_access_token, 
            // Due to the time-consuming network, the expiration time needs to be 3 minutes earlier
            new Date().getTime() + expire * 1000 - 3 * 60 * 1000, {
                namespace: this.appId
            }));
            return tenant_access_token;
        });
    }
    getMarketTenantAccessToken(tenantKey) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (!tenantKey) {
                this.logger.error('market app request need tenant key');
                return undefined;
            }
            const tenantAccessToken = yield ((_a = this.cache) === null || _a === void 0 ? void 0 : _a.get(`larkMarketAccessToken${tenantKey}`, {
                namespace: this.appId
            }));
            if (tenantAccessToken) {
                this.logger.debug('use cache token');
                return tenantAccessToken;
            }
            this.logger.debug('get app ticket');
            const appTicket = yield this.appTicketManager.getAppTicket();
            if (!appTicket) {
                this.logger.warn('no app ticket');
                return undefined;
            }
            this.logger.debug('get app access token');
            // 获取app_access_token
            // @ts-ignore
            const { app_access_token } = yield this.httpInstance
                .post(`${this.domain}/open-apis/auth/v3/app_access_token`, {
                app_id: this.appId,
                app_secret: this.appSecret,
                app_ticket: appTicket,
            })
                .catch((e) => {
                this.logger.error(e);
            });
            this.logger.debug('get tenant access token');
            // 获取tenant_access_token
            // @ts-ignore
            const { tenant_access_token, expire } = yield this.httpInstance
                .post(`${this.domain}/open-apis/auth/v3/tenant_access_token`, {
                app_access_token,
                tenant_key: tenantKey,
            })
                .catch((e) => {
                this.logger.error(e);
            });
            // 设置tenant_access_token
            yield this.cache.set(`larkMarketAccessToken${tenantKey}`, tenant_access_token, 
            // Due to the time-consuming network, the expiration time needs to be 3 minutes earlier
            new Date().getTime() + expire * 1000 - 3 * 60 * 1000, {
                namespace: this.appId
            });
            return tenant_access_token;
        });
    }
    getTenantAccessToken(params) {
        return __awaiter(this, void 0, void 0, function* () {
            assert(this.appType === AppType.SelfBuild, () => __awaiter(this, void 0, void 0, function* () {
                this.logger.debug('get custom app token');
            }));
            assert(this.appType === AppType.ISV, () => __awaiter(this, void 0, void 0, function* () {
                this.logger.debug('get market app token ');
            }));
            // prettier-ignore
            const tenantAccessToken = this.appType === AppType.SelfBuild
                ? yield this.getCustomTenantAccessToken()
                : yield this.getMarketTenantAccessToken(get(params, CTenantKey));
            return tenantAccessToken;
        });
    }
}

class Client extends Client$1 {
    constructor(params) {
        super();
        this.appId = '';
        this.appSecret = '';
        this.helpDeskId = '';
        this.helpDeskToken = '';
        this.appType = AppType.SelfBuild;
        this.logger = new LoggerProxy(params.loggerLevel || LoggerLevel.info, params.logger || defaultLogger);
        this.appId = params.appId;
        this.appSecret = params.appSecret;
        this.disableTokenCache = params.disableTokenCache;
        assert(!this.appId, () => this.logger.error('appId is needed'));
        assert(!this.appSecret, () => this.logger.error('appSecret is needed'));
        this.helpDeskId = params.helpDeskId;
        this.helpDeskToken = params.helpDeskToken;
        this.appType = get(params, 'appType', AppType.SelfBuild);
        this.domain = formatDomain(params.domain || Domain.Feishu);
        this.logger.debug(`use domain url: ${this.domain}`);
        this.cache = params.cache || internalCache;
        this.httpInstance = params.httpInstance || defaultHttpInstance;
        this.tokenManager = new TokenManager({
            appId: this.appId,
            appSecret: this.appSecret,
            cache: this.cache,
            domain: this.domain,
            logger: this.logger,
            appType: this.appType,
            httpInstance: this.httpInstance,
        });
        this.logger.info('client ready');
    }
    formatPayload(payload, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const targetOptions = [
                'lark',
                'params',
                'data',
                'headers',
                'path',
            ].reduce((acc, key) => {
                acc[key] = get(options, key, {});
                return acc;
            }, {});
            const userAccessToken = get(targetOptions.lark, CWithUserAccessToken);
            if (userAccessToken) {
                this.logger.debug('use passed token');
                targetOptions.headers.Authorization = `Bearer ${userAccessToken}`;
            }
            else if (!this.disableTokenCache) {
                const tenantAccessToken = yield this.tokenManager.getTenantAccessToken({
                    [CTenantKey]: get(targetOptions.lark, CTenantKey),
                });
                if (tenantAccessToken) {
                    targetOptions.headers.Authorization = `Bearer ${tenantAccessToken}`;
                }
                else {
                    this.logger.warn('failed to obtain token');
                }
            }
            // helpDeskCredential
            const withHelpDeskCredential = get(targetOptions.lark, CWithHelpdeskAuthorization);
            if (withHelpDeskCredential) {
                this.logger.debug('generate help desk credential');
                const helpDeskCredential = string2Base64(`${this.helpDeskId}:${this.helpDeskToken}`);
                targetOptions.headers['X-Lark-Helpdesk-Authorization'] = `Bearer ${helpDeskCredential}`;
            }
            return {
                params: Object.assign(Object.assign({}, get(payload, 'params', {})), targetOptions.params),
                headers: Object.assign(Object.assign({}, get(payload, 'headers', {})), targetOptions.headers),
                data: Object.assign(Object.assign({}, get(payload, 'data', {})), targetOptions.data),
                path: Object.assign(Object.assign({}, get(payload, 'path', {})), targetOptions.path),
            };
        });
    }
    request(payload, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data, params, headers, url } = payload, rest = __rest(payload, ["data", "params", "headers", "url"]);
            const formatPayload = yield this.formatPayload({
                data,
                params,
                headers,
            }, options);
            this.logger.trace(`send request [${payload.method}]: ${payload.url}`);
            const res = yield this.httpInstance
                .request(Object.assign(Object.assign({}, rest), {
                url: /^http/.test(url)
                    ? url
                    : `${this.domain}/${formatUrl(url)}`,
                headers: formatPayload.headers,
                data: formatPayload.data,
                params: formatPayload.params,
            }))
                .catch((e) => {
                this.logger.error(e);
                throw e;
            });
            return res;
        });
    }
}

const withAll = (withList) => withList.reduce((acc, cur) => merge(acc, cur), {});
const withTenantKey = (tenantKey) => ({
    lark: {
        [CTenantKey]: tenantKey,
    },
});
const withHelpDeskCredential = () => ({
    lark: {
        [CWithHelpdeskAuthorization]: true,
    },
});
const withTenantToken = (tenantAccessToken) => ({
    headers: {
        Authorization: `Bearer ${tenantAccessToken}`,
    },
});
const withUserAccessToken = (userAccessToken) => ({
    lark: {
        [CWithUserAccessToken]: userAccessToken,
    },
});

class RequestHandle {
    constructor(params) {
        const { encryptKey, verificationToken, logger } = params;
        this.verificationToken = verificationToken;
        this.encryptKey = encryptKey;
        this.logger = logger;
        if (encryptKey) {
            this.aesCipher = new AESCipher(encryptKey);
        }
    }
    parse(data) {
        const targetData = (() => {
            var _a;
            const _b = data || {}, { encrypt } = _b, rest = __rest(_b, ["encrypt"]);
            if (encrypt) {
                try {
                    return Object.assign(Object.assign({}, JSON.parse((_a = this.aesCipher) === null || _a === void 0 ? void 0 : _a.decrypt(encrypt))), rest);
                }
                catch (e) {
                    this.logger.error('parse encrypt data failed');
                    return {};
                }
            }
            return rest;
        })();
        // v1和v2版事件的区别：https://open.feishu.cn/document/ukTMukTMukTM/uUTNz4SN1MjL1UzM
        if ('schema' in targetData) {
            const { header, event } = targetData, rest = __rest(targetData, ["header", "event"]);
            return Object.assign(Object.assign(Object.assign({ [CEventType]: get(targetData, 'header.event_type') }, rest), header), event);
        }
        const { event } = targetData, rest = __rest(targetData, ["event"]);
        return Object.assign(Object.assign({ [CEventType]: get(targetData, 'event.type') }, event), rest);
    }
    checkIsCardEventValidated(data) {
        const { 'x-lark-request-timestamp': timestamp, 'x-lark-request-nonce': nonce, 'x-lark-signature': signature, } = data.headers;
        if (!this.verificationToken) {
            return true;
        }
        const computedSignature = crypto
            .createHash('sha1')
            .update(timestamp +
            nonce +
            this.verificationToken +
            JSON.stringify(data))
            .digest('hex');
        return computedSignature === signature;
    }
    checkIsEventValidated(data) {
        if (!this.encryptKey) {
            return true;
        }
        const { 'x-lark-request-timestamp': timestamp, 'x-lark-request-nonce': nonce, 'x-lark-signature': signature, } = data.headers;
        const content = timestamp + nonce + this.encryptKey + JSON.stringify(data);
        const computedSignature = crypto
            .createHash('sha256')
            .update(content)
            .digest('hex');
        return computedSignature === signature;
    }
}

const CAppTicketHandle = 'app_ticket';
class EventDispatcher {
    constructor(params) {
        this.verificationToken = '';
        this.encryptKey = '';
        this.handles = new Map();
        const { encryptKey, verificationToken } = params;
        this.encryptKey = encryptKey || '';
        this.verificationToken = verificationToken || '';
        this.logger = new LoggerProxy(params.loggerLevel || LoggerLevel.info, params.logger || defaultLogger);
        this.requestHandle = new RequestHandle({
            encryptKey,
            verificationToken,
            logger: this.logger,
        });
        this.cache = params.cache || internalCache;
        this.registerAppTicketHandle();
        this.logger.info('event-dispatch is ready');
    }
    registerAppTicketHandle() {
        this.register({
            app_ticket: (data) => __awaiter(this, void 0, void 0, function* () {
                const { app_ticket, app_id } = data;
                if (app_ticket) {
                    yield this.cache.set(CAppTicket, app_ticket, undefined, {
                        namespace: app_id
                    });
                    this.logger.debug('set app ticket');
                }
                else {
                    this.logger.warn('response not include app ticket');
                }
            }),
        });
    }
    register(handles) {
        Object.keys(handles).forEach((key) => {
            if (this.handles.has(key) && key !== CAppTicketHandle) {
                this.logger.error(`this ${key} handle is registered`);
            }
            this.handles.set(key, handles[key]);
            this.logger.debug(`register ${key} handle`);
        });
        return this;
    }
    invoke(data) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (!((_a = this.requestHandle) === null || _a === void 0 ? void 0 : _a.checkIsEventValidated(data))) {
                this.logger.warn('verification failed event');
                return undefined;
            }
            const targetData = (_b = this.requestHandle) === null || _b === void 0 ? void 0 : _b.parse(data);
            const type = targetData[CEventType];
            if (this.handles.has(type)) {
                const ret = yield this.handles.get(type)(targetData);
                this.logger.debug(`execute ${type} handle`);
                return ret;
            }
            this.logger.warn(`no ${type} handle`);
            return `no ${type} event handle`;
        });
    }
}

class CardActionHandler {
    constructor(params, cardHandler) {
        this.verificationToken = '';
        this.encryptKey = '';
        this.handles = new Map();
        const { verificationToken, encryptKey } = params;
        this.encryptKey = encryptKey || '';
        this.verificationToken = verificationToken || '';
        this.cardHandler = cardHandler;
        this.logger = new LoggerProxy(params.loggerLevel || LoggerLevel.info, params.logger || defaultLogger);
        this.requestHandle = new RequestHandle({
            encryptKey,
            verificationToken,
            logger: this.logger,
        });
        this.cache = params.cache || internalCache;
        this.registerAppTicketHandle();
        this.logger.info('card-action-handle is ready');
    }
    registerAppTicketHandle() {
        this.register({
            app_ticket: (data) => __awaiter(this, void 0, void 0, function* () {
                const { app_ticket, app_id } = data;
                if (app_ticket) {
                    yield this.cache.set(CAppTicket, app_ticket, undefined, {
                        namespace: app_id
                    });
                    this.logger.debug('set app ticket');
                }
                else {
                    this.logger.warn('response not include app ticket');
                }
            }),
        });
    }
    register(handles) {
        Object.keys(handles).forEach((key) => {
            this.handles.set(key, handles[key]);
            this.logger.debug(`register ${key} handle`);
        });
        return this;
    }
    invoke(data) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (!((_a = this.requestHandle) === null || _a === void 0 ? void 0 : _a.checkIsCardEventValidated(data))) {
                this.logger.warn('verification failed event');
                return undefined;
            }
            const targetData = (_b = this.requestHandle) === null || _b === void 0 ? void 0 : _b.parse(data);
            const type = targetData[CEventType];
            if (this.handles.has(type)) {
                try {
                    const ret = yield this.handles.get(type)(targetData);
                    return ret;
                }
                catch (e) {
                    this.logger.error(e);
                    return undefined;
                }
            }
            try {
                const result = yield this.cardHandler(targetData);
                this.logger.debug('execute card handle');
                return result;
            }
            catch (e) {
                this.logger.error(e);
            }
            return undefined;
        });
    }
}

const pickRequestData = (req) => new Promise((resolve) => {
    let chunks = '';
    req.on('data', (chunk) => {
        chunks += chunk;
    });
    req.on('end', () => {
        try {
            const data = JSON.parse(chunks);
            resolve(data);
        }
        catch (e) {
            resolve('');
        }
    });
});

const generateChallenge = (data, options) => {
    if ('encrypt' in data && !options.encryptKey) {
        throw new Error('auto-challenge need encryptKey, please check for missing in dispatcher');
    }
    const targetData = 'encrypt' in data
        ? JSON.parse(new AESCipher(options.encryptKey).decrypt(data.encrypt))
        : data;
    return {
        isChallenge: targetData.type === 'url_verification',
        challenge: {
            challenge: targetData.challenge,
        },
    };
};

const adaptDefault = (path, dispatcher, options) => (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    if (req.url !== path) {
        return;
    }
    const data = Object.assign(Object.create({
        headers: req.headers,
    }), yield pickRequestData(req));
    // 是否自动响应challange事件：
    // https://open.feishu.cn/document/ukTMukTMukTM/uYDNxYjL2QTM24iN0EjN/event-subscription-configure-/request-url-configuration-case
    const autoChallenge = get(options, 'autoChallenge', false);
    if (autoChallenge) {
        const { isChallenge, challenge } = generateChallenge(data, {
            encryptKey: dispatcher.encryptKey,
        });
        if (isChallenge) {
            res.end(JSON.stringify(challenge));
            return;
        }
    }
    const value = yield dispatcher.invoke(data);
    // event don't need response
    if (dispatcher instanceof CardActionHandler) {
        res.end(JSON.stringify(value));
    }
    res.end('');
});

const adaptExpress = (dispatcher, options) => (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const reqData = yield (() => __awaiter(void 0, void 0, void 0, function* () {
        if (req.body) {
            return req.body;
        }
        if (!req.complete) {
            const incomingdata = yield pickRequestData(req);
            return incomingdata;
        }
        get(options, 'logger', defaultLogger).error('unable to obtain request body, if parsed it in other middleware, please manually set in ctx.request.body');
        return null;
    }))();
    const data = Object.assign(Object.create({
        headers: req.headers,
    }), reqData);
    // 是否自动响应challange事件：
    // https://open.feishu.cn/document/ukTMukTMukTM/uYDNxYjL2QTM24iN0EjN/event-subscription-configure-/request-url-configuration-case
    const autoChallenge = get(options, 'autoChallenge', false);
    if (autoChallenge) {
        const { isChallenge, challenge } = generateChallenge(data, {
            encryptKey: dispatcher.encryptKey,
        });
        if (isChallenge) {
            res.json(challenge);
            return;
        }
    }
    const value = yield dispatcher.invoke(data);
    // event don't need response
    if (dispatcher instanceof CardActionHandler) {
        res.json(value);
    }
    res.end('');
});

const adaptKoa = (path, dispatcher, options) => (ctx, next) => __awaiter(void 0, void 0, void 0, function* () {
    const { originalUrl, req, request } = ctx;
    if (originalUrl === path) {
        const reqData = yield (() => __awaiter(void 0, void 0, void 0, function* () {
            if (request.body) {
                return request.body;
            }
            if (!req.complete) {
                const incomingdata = yield pickRequestData(req);
                return incomingdata;
            }
            get(options, 'logger', defaultLogger).error('unable to obtain request body, if parsed it in other middleware, please manually set in ctx.request.body');
            return null;
        }))();
        const data = Object.assign(Object.create({
            headers: req.headers,
        }), reqData);
        // 是否自动响应challange事件：
        // https://open.feishu.cn/document/ukTMukTMukTM/uYDNxYjL2QTM24iN0EjN/event-subscription-configure-/request-url-configuration-case
        const autoChallenge = get(options, 'autoChallenge', false);
        if (autoChallenge) {
            const { isChallenge, challenge } = generateChallenge(data, {
                encryptKey: dispatcher.encryptKey,
            });
            if (isChallenge) {
                ctx.body = challenge;
                yield next();
                return;
            }
        }
        const value = yield dispatcher.invoke(data);
        // event don't need response
        if (dispatcher instanceof CardActionHandler) {
            ctx.body = JSON.stringify(value);
        }
        else {
            ctx.body = '';
        }
    }
    yield next();
});

const adaptKoaRouter = (dispatcher, options) => (ctx, next) => __awaiter(void 0, void 0, void 0, function* () {
    const { req, request } = ctx;
    const reqData = yield (() => __awaiter(void 0, void 0, void 0, function* () {
        if (request.body) {
            return request.body;
        }
        if (!req.complete) {
            const incomingdata = yield pickRequestData(req);
            return incomingdata;
        }
        get(options, 'logger', defaultLogger).error('unable to obtain request body, if parsed it in other middleware, please manually set in ctx.request.body');
        return null;
    }))();
    const data = Object.assign(Object.create({
        headers: req.headers,
    }), reqData);
    // 是否自动响应challange事件：
    // https://open.feishu.cn/document/ukTMukTMukTM/uYDNxYjL2QTM24iN0EjN/event-subscription-configure-/request-url-configuration-case
    const autoChallenge = get(options, 'autoChallenge', false);
    if (autoChallenge) {
        const { isChallenge, challenge } = generateChallenge(data, {
            encryptKey: dispatcher.encryptKey,
        });
        if (isChallenge) {
            ctx.body = challenge;
            yield next();
            return;
        }
    }
    const value = yield dispatcher.invoke(data);
    // event don't need response
    if (dispatcher instanceof CardActionHandler) {
        ctx.body = JSON.stringify(value);
    }
    else {
        ctx.body = '';
    }
    yield next();
});

const defaultCard = (variables) => {
    const { title, content } = variables;
    return JSON.stringify({
        "config": {
            "wide_screen_mode": true
        },
        "elements": [
            {
                "tag": "markdown",
                "content": content
            }
        ],
        "header": {
            "template": "blue",
            "title": {
                "content": title,
                "tag": "plain_text"
            }
        }
    });
};

var messageCard = /*#__PURE__*/Object.freeze({
    __proto__: null,
    defaultCard: defaultCard
});

export { AESCipher, AppType, CAppTicket, CTenantAccessToken, CardActionHandler, Client, Domain, EventDispatcher, LoggerLevel, adaptDefault, adaptExpress, adaptKoa, adaptKoaRouter, defaultHttpInstance, generateChallenge, messageCard, withAll, withHelpDeskCredential, withTenantKey, withTenantToken, withUserAccessToken };
